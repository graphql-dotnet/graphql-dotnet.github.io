{"version":3,"sources":["webpack:///path---docs-getting-started-lists-non-null-40218ceff4b38dd95216.js","webpack:///./.cache/json/docs-getting-started-lists-non-null.json"],"names":["webpackJsonp","323","module","exports","data","markdownRemark","html","fields","relativePath","site","siteMetadata","githubEditUrl","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,ihOAAmxGC,QAAigIC,aAAA,2CAAyDC,MAASC,cAAgBC,cAAA,6EAA4FC,aAAgBJ,aAAA","file":"path---docs-getting-started-lists-non-null-40218ceff4b38dd95216.js","sourcesContent":["webpackJsonp([56185524266781],{\n\n/***/ 323:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"lists-and-non-null\\\"><a href=\\\"#lists-and-non-null\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Lists and Non-Null</h1>\\n<p>Object types, scalars, and enums are the only kinds of types you can define in GraphQL.\\nBut when you use the types in other parts of the schema, or in your query variable\\ndeclarations, you can apply additional <em>type modifiers</em> that affect validation of those\\nvalues. Let's look at an example:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">Character</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">appearsIn</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">Episode</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Here, we're using a <code class=\\\"language-text\\\">String</code> type and marking it as <em>Non-Null</em> by adding an exclamation\\nmark, <code class=\\\"language-text\\\">!</code> after the type name. This means that our server always expects to return a\\nnon-null value for this field, and if it ends up getting a null value that will actually\\ntrigger a GraphQL execution error, letting the client know that something has gone wrong.</p>\\n<p>The Non-Null type modifier can also be used when defining arguments for a field, which\\nwill cause the GraphQL server to return a validation error if a null value is passed as\\nthat argument, whether in the GraphQL string or in the variables.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">query</span> <span class=\\\"token definition-query function\\\">DroidById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$id</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">ID</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property-query\\\">droid</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">id</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$id</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">name</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Lists work in a similar way: We can use a type modifier to mark a type as a <code class=\\\"language-text\\\">List</code>, which\\nindicates that this field will return an array of that type. In the schema language, this\\nis denoted by wrapping the type in square brackets, <code class=\\\"language-text\\\">[</code> and <code class=\\\"language-text\\\">]</code>. It works the same for\\narguments, where the validation step will expect an array for that value.</p>\\n<p>The Non-Null and List modifiers can be combined. For example, you can have a List of Non-Null Strings:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token attr-name\\\">myField</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>This means that the <em>list itself</em> can be null, but it can't have any null members. For example, in JSON:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">myField<span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token comment\\\">// valid</span>\\nmyField<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// valid</span>\\nmyField<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// valid</span>\\nmyField<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// error</span></code></pre>\\n      </div>\\n<p>Now, let's say we defined a Non-Null List of Strings:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token attr-name\\\">myField</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token scalar\\\">String</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span></code></pre>\\n      </div>\\n<p>This means that the list itself cannot be null, but it can contain null values:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">myField<span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token comment\\\">// error</span>\\nmyField<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// valid</span>\\nmyField<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// valid</span>\\nmyField<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// valid</span></code></pre>\\n      </div>\\n<p>You can arbitrarily nest any number of Non-Null and List modifiers, according to your needs.</p>\",\"fields\":{\"relativePath\":\"docs/getting-started/lists-non-null.md\"}},\"site\":{\"siteMetadata\":{\"githubEditUrl\":\"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site\"}}},\"pathContext\":{\"relativePath\":\"docs/getting-started/lists-non-null.md\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-getting-started-lists-non-null-40218ceff4b38dd95216.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"lists-and-non-null\\\"><a href=\\\"#lists-and-non-null\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Lists and Non-Null</h1>\\n<p>Object types, scalars, and enums are the only kinds of types you can define in GraphQL.\\nBut when you use the types in other parts of the schema, or in your query variable\\ndeclarations, you can apply additional <em>type modifiers</em> that affect validation of those\\nvalues. Let's look at an example:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">Character</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">appearsIn</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">Episode</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Here, we're using a <code class=\\\"language-text\\\">String</code> type and marking it as <em>Non-Null</em> by adding an exclamation\\nmark, <code class=\\\"language-text\\\">!</code> after the type name. This means that our server always expects to return a\\nnon-null value for this field, and if it ends up getting a null value that will actually\\ntrigger a GraphQL execution error, letting the client know that something has gone wrong.</p>\\n<p>The Non-Null type modifier can also be used when defining arguments for a field, which\\nwill cause the GraphQL server to return a validation error if a null value is passed as\\nthat argument, whether in the GraphQL string or in the variables.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">query</span> <span class=\\\"token definition-query function\\\">DroidById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$id</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">ID</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property-query\\\">droid</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">id</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$id</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">name</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Lists work in a similar way: We can use a type modifier to mark a type as a <code class=\\\"language-text\\\">List</code>, which\\nindicates that this field will return an array of that type. In the schema language, this\\nis denoted by wrapping the type in square brackets, <code class=\\\"language-text\\\">[</code> and <code class=\\\"language-text\\\">]</code>. It works the same for\\narguments, where the validation step will expect an array for that value.</p>\\n<p>The Non-Null and List modifiers can be combined. For example, you can have a List of Non-Null Strings:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token attr-name\\\">myField</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>This means that the <em>list itself</em> can be null, but it can't have any null members. For example, in JSON:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">myField<span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token comment\\\">// valid</span>\\nmyField<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// valid</span>\\nmyField<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// valid</span>\\nmyField<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// error</span></code></pre>\\n      </div>\\n<p>Now, let's say we defined a Non-Null List of Strings:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token attr-name\\\">myField</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token scalar\\\">String</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span></code></pre>\\n      </div>\\n<p>This means that the list itself cannot be null, but it can contain null values:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">myField<span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token comment\\\">// error</span>\\nmyField<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// valid</span>\\nmyField<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// valid</span>\\nmyField<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// valid</span></code></pre>\\n      </div>\\n<p>You can arbitrarily nest any number of Non-Null and List modifiers, according to your needs.</p>\",\"fields\":{\"relativePath\":\"docs/getting-started/lists-non-null.md\"}},\"site\":{\"siteMetadata\":{\"githubEditUrl\":\"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site\"}}},\"pathContext\":{\"relativePath\":\"docs/getting-started/lists-non-null.md\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-getting-started-lists-non-null.json\n// module id = 323\n// module chunks = 56185524266781"],"sourceRoot":""}