webpackJsonp([44712706562510],{338:function(n,a){n.exports={data:{markdownRemark:{html:'<h1 id="variables"><a href="#variables" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Variables</h1>\n<p>You can pass variables received from the client to the execution engine by using the <code class="language-text">Variables</code> property.</p>\n<blockquote>\n<p>See the <a href="http://graphql.org/learn/queries/#variables">official GraphQL documentation on variables</a></p>\n</blockquote>\n<p>Here is what a query looks like with a variable:</p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token keyword">query</span> <span class="token definition-query function">DroidQuery</span><span class="token punctuation">(</span><span class="token variable">$droidId</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token property-query">droid</span><span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token variable">$droidId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token property">id</span>\n    <span class="token property">name</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Here is what this query would look like as a JSON request:</p>\n<div class="gatsby-highlight" data-language="json">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"query DroidQuery($droidId: String!) { droid(id: $droidId) { id name } }"</span><span class="token punctuation">,</span>\n <span class="token property">"variables"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n   <span class="token property">"droidId"</span><span class="token operator">:</span> <span class="token string">"1"</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Call <code class="language-text">.Deserialize&lt;GraphQLRequest>()</code> to parse a JSON request to provide it to the <code class="language-text">DocumentExecuter</code>:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> requestJson <span class="token operator">=</span> <span class="token comment">/* request as shown above */</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GraphQLSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GraphQLRequest<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>requestJson<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>options <span class="token operator">=></span>\n<span class="token punctuation">{</span>\n  options<span class="token punctuation">.</span>Query <span class="token operator">=</span> request<span class="token punctuation">.</span>Query<span class="token punctuation">;</span>\n  options<span class="token punctuation">.</span>OperationName <span class="token operator">=</span> request<span class="token punctuation">.</span>OperationName<span class="token punctuation">;</span>\n  options<span class="token punctuation">.</span>Variables <span class="token operator">=</span> request<span class="token punctuation">.</span>Variables<span class="token punctuation">;</span>\n  options<span class="token punctuation">.</span>Extensions <span class="token operator">=</span> request<span class="token punctuation">.</span>Extensions<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>If you need to parse the variables separately from the query, you can call <code class="language-text">.Deserialize&lt;Inputs>()</code> to parse\na JSON-formatted variables string to an <code class="language-text">Inputs</code> class suitable for passing to the <code class="language-text">DocumentExecuter</code>:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> variablesJson <span class="token operator">=</span> <span class="token comment">/* get from request */</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> inputs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GraphQLSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Inputs<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>variablesJson<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>options <span class="token operator">=></span>\n<span class="token punctuation">{</span>\n  options<span class="token punctuation">.</span>Query <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">;</span>\n  options<span class="token punctuation">.</span>Variables <span class="token operator">=</span> inputs<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Please note that you will need either the <code class="language-text">GraphQL.SystemTextJson</code> or <code class="language-text">GraphQL.NewtonsoftJson</code> nuget package\nto run the above code, with the appropriate <code class="language-text">using</code> statement.</p>\n<p>When using dependency injection, you will typically register the serializer via <code class="language-text">.AddSystemTextJson()</code> or\n<code class="language-text">.AddNewtonsoftJson()</code> in your DI configuration code, and then pull in instances of <code class="language-text">IGraphQLTextSerializer</code>,\n<code class="language-text">ISchema</code> and <code class="language-text">IDocumentExecuter</code>, resulting with code more similar to the following:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> request<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n  <span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> _serializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GraphQLRequest<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _documentExecuter<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>options <span class="token operator">=></span>\n  <span class="token punctuation">{</span>\n    options<span class="token punctuation">.</span>Schema <span class="token operator">=</span> _schema<span class="token punctuation">;</span>\n    options<span class="token punctuation">.</span>Query <span class="token operator">=</span> request<span class="token punctuation">.</span>Query<span class="token punctuation">;</span>\n    options<span class="token punctuation">.</span>OperationName <span class="token operator">=</span> request<span class="token punctuation">.</span>OperationName<span class="token punctuation">;</span>\n    options<span class="token punctuation">.</span>Variables <span class="token operator">=</span> request<span class="token punctuation">.</span>Variables<span class="token punctuation">;</span>\n    options<span class="token punctuation">.</span>Extensions <span class="token operator">=</span> request<span class="token punctuation">.</span>Extensions<span class="token punctuation">;</span>\n    options<span class="token punctuation">.</span>CancellationToken <span class="token operator">=</span> cancellationToken<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> _serializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> response<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>You can also use the <code class="language-text">.Read&lt;T>()</code> and <code class="language-text">.Write()</code> methods of the serializer for <code class="language-text">Stream</code>-based asynchronous\nserialization and deserialization.</p>',fields:{relativePath:"docs/getting-started/variables.md"}},site:{siteMetadata:{githubEditUrl:"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site"}}},pathContext:{relativePath:"docs/getting-started/variables.md"}}}});
//# sourceMappingURL=path---docs-getting-started-variables-e625c38a650cae282cd1.js.map