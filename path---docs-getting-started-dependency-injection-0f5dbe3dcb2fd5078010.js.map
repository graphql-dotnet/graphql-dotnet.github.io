{"version":3,"sources":["webpack:///path---docs-getting-started-dependency-injection-0f5dbe3dcb2fd5078010.js","webpack:///./.cache/json/docs-getting-started-dependency-injection.json"],"names":["webpackJsonp","292","module","exports","data","markdownRemark","html","fields","relativePath","site","siteMetadata","githubEditUrl","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAA8kgDC,QAAwXC,aAAA,iDAA+DC,MAASC,cAAgBC,cAAA,6EAA4FC,aAAgBJ,aAAA","file":"path---docs-getting-started-dependency-injection-0f5dbe3dcb2fd5078010.js","sourcesContent":["webpackJsonp([178698305269250],{\n\n/***/ 292:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"dependency-injection\\\"><a href=\\\"#dependency-injection\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Dependency Injection</h1>\\n<p>GraphQL .NET supports dependency injection through a <code class=\\\"language-text\\\">IServiceProvider</code> interface that is passed to the Schema class. Internally when trying to resolve a type the library will call the methods on this interface.</p>\\n<blockquote>\\n<p>The library resolves a <code class=\\\"language-text\\\">GraphType</code> only once and caches that type for the lifetime of the <code class=\\\"language-text\\\">Schema</code>.</p>\\n</blockquote>\\n<p>The default implementation of <code class=\\\"language-text\\\">IServiceProvider</code> uses <code class=\\\"language-text\\\">Activator.CreateInstance</code>. <code class=\\\"language-text\\\">Activator.CreateInstance</code> requires that an object have a public parameterless constructor.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DefaultServiceProvider</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">IServiceProvider</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">object</span></span> <span class=\\\"token function\\\">GetService</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Type</span> serviceType<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>serviceType <span class=\\\"token operator\\\">==</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">ArgumentNullException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">nameof</span><span class=\\\"token punctuation\\\">(</span>serviceType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">try</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> Activator<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">CreateInstance</span><span class=\\\"token punctuation\\\">(</span>serviceType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Exception</span> exception<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">Exception</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token interpolation-string\\\"><span class=\\\"token string\\\">$\\\"Failed to call Activator.CreateInstance. Type: </span><span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token expression language-csharp\\\">serviceType<span class=\\\"token punctuation\\\">.</span>FullName</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">,</span> exception<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>You can override the default implementation by passing a <code class=\\\"language-text\\\">IServiceProvider</code> to the constructor of your <code class=\\\"language-text\\\">Schema</code>.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsSchema</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">GraphQL<span class=\\\"token punctuation\\\">.</span>Types<span class=\\\"token punctuation\\\">.</span>Schema</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsSchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IServiceProvider</span> provider<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span>provider<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Query <span class=\\\"token operator\\\">=</span> provider<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>StarWarsQuery<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        Mutation <span class=\\\"token operator\\\">=</span> provider<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>StarWarsMutation<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>How you integrate this into your system will depend on the dependency injection framework you are using. <code class=\\\"language-text\\\">FuncServiceProvider</code> is provided for easy integration with multiple containers.</p>\\n<h2 id=\\\"aspnet-core\\\"><a href=\\\"#aspnet-core\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ASP.NET Core</h2>\\n<p><a href=\\\"https://github.com/graphql-dotnet/examples/blob/8d5b7544006902f45b818010585b1ffa86ef446b/src/AspNetCoreCustom/Example/Startup.cs#L16-L34\\\">See this example.</a></p>\\n<p><code class=\\\"language-text\\\">Microsoft.Extensions.DependencyInjection</code> package used in ASP.NET Core already has support for resolving <code class=\\\"language-text\\\">IServiceProvider</code> interface so no additional settings are required - just add your required dependencies:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">void</span></span> <span class=\\\"token function\\\">ConfigureServices</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IServiceCollection</span> services<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IDocumentExecuter<span class=\\\"token punctuation\\\">,</span> DocumentExecuter<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IDocumentWriter<span class=\\\"token punctuation\\\">,</span> DocumentWriter<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>StarWarsData<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>StarWarsQuery<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>StarWarsMutation<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>HumanType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>HumanInputType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DroidType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>CharacterInterface<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>EpisodeEnum<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>ISchema<span class=\\\"token punctuation\\\">,</span> StarWarsSchema<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"nancy-tinyioccontainer\\\"><a href=\\\"#nancy-tinyioccontainer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Nancy TinyIoCContainer</h2>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">void</span></span> <span class=\\\"token function\\\">ConfigureApplicationContainer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">TinyIoCContainer</span> container<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ConfigureApplicationContainer</span><span class=\\\"token punctuation\\\">(</span>container<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    container<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Register</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">,</span> overloads<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">StarWarsSchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">FuncServiceProvider</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">.</span>Resolve<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"simplecontainer\\\"><a href=\\\"#simplecontainer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>SimpleContainer</h2>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> container <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">SimpleContainer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ncontainer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Singleton</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">StarWarsSchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">FuncServiceProvider</span><span class=\\\"token punctuation\\\">(</span>container<span class=\\\"token punctuation\\\">.</span>Get<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"autofac\\\"><a href=\\\"#autofac\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Autofac</h2>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">void</span></span> <span class=\\\"token function\\\">Load</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">ContainerBuilder</span> builder<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    builder\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Register</span><span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">FuncServiceProvider</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Resolve</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IComponentContext<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>Resolve<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">As</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IServiceProvider<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">InstancePerDependency</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"castle-windsor\\\"><a href=\\\"#castle-windsor\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Castle Windsor</h2>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">void</span></span> <span class=\\\"token function\\\">Install</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IWindsorContainer</span> container<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IConfigurationStore</span> store<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    container<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Register</span><span class=\\\"token punctuation\\\">(</span>\\n      Component\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">For</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IServiceProvider<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">UsingFactoryMethod</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span> k<span class=\\\"token punctuation\\\">.</span>Resolve<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"schema-service-lifetime\\\"><a href=\\\"#schema-service-lifetime\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Schema Service Lifetime</h1>\\n<p>Most dependency injection frameworks allow for specifying different service lifetimes for different\\nservices. Although they may have different names with different frameworks, the three most common\\nlifetimes are as follows:</p>\\n<ul>\\n<li><strong>Transient</strong> services are created every time they are injected or requested.</li>\\n<li><strong>Scoped</strong> services are created per scope. In a web application, every web request creates a new unique service scope. That means scoped services are generally created per web request.</li>\\n<li><strong>Singleton</strong> services are created per DI container. That generally means that they are created only one time per application and then used for whole the application life time.</li>\\n</ul>\\n<p>It is highly recommended that the schema is registered as a singleton. This provides the best performance as\\nthe schema does not need to be built for every request. As all graph types are constructed at the\\nsame time as the schema, all graph types will effectively have a singleton lifetime, regardless\\nof how it is registered with the DI framework.</p>\\n<p>Scoped lifetime can be used to allow the schema and all its graph types access to the current DI scope.\\nThis is not recommended; please see <a href=\\\"#scoped-services-with-a-singleton-schema-lifetime\\\">Scoped Services</a>\\nbelow. With scoped schemas, it is <strong>required</strong> that all its graph types are registered within the DI\\nframework as scoped or transient services.</p>\\n<p>Transient lifetime is also not recommended due to performance degradation. For schemas having a transient\\nlifetime, it is <strong>required</strong> that all its graph types are also registered within the DI framework as\\ntransient services.</p>\\n<h1 id=\\\"scoped-services-with-a-singleton-schema-lifetime\\\"><a href=\\\"#scoped-services-with-a-singleton-schema-lifetime\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Scoped services with a singleton schema lifetime</h1>\\n<p>For reasons described above, it is recommended that the schema is registered as a singleton within\\nthe dependency injection framework. However, this prevents including scoped services within the\\nconstructor of the schema or your custom graph types.</p>\\n<p>To use scoped services (e.g. HttpContext scoped services in ASP.NET Core) you will need to pass\\nthe scoped service provider into the <code class=\\\"language-text\\\">ExecutionOptions.RequestServices</code> property. Then within\\nany field resolver or field middleware, you can access the <code class=\\\"language-text\\\">IResolveFieldContext.RequestServices</code>\\nproperty to resolve types via the scoped service provider. Typical integration with ASP.NET Core\\nmight look like this:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> _executer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ExecuteAsync</span><span class=\\\"token punctuation\\\">(</span>options <span class=\\\"token operator\\\">=></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    options<span class=\\\"token punctuation\\\">.</span>Schema <span class=\\\"token operator\\\">=</span> schema<span class=\\\"token punctuation\\\">;</span>\\n    options<span class=\\\"token punctuation\\\">.</span>Query <span class=\\\"token operator\\\">=</span> request<span class=\\\"token punctuation\\\">.</span>Query<span class=\\\"token punctuation\\\">;</span>\\n    options<span class=\\\"token punctuation\\\">.</span>Inputs <span class=\\\"token operator\\\">=</span> request<span class=\\\"token punctuation\\\">.</span>Variables<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToInputs</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    options<span class=\\\"token punctuation\\\">.</span>RequestServices <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span>RequestServices<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>You could then call scoped services from within field resolvers as shown in the following example:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsQuery</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DroidType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token string\\\">\\\"hero\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span> context<span class=\\\"token punctuation\\\">.</span>RequestServices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IDroidRepo<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetDroid</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"R2-D2\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"thread-safety-with-scoped-services\\\"><a href=\\\"#thread-safety-with-scoped-services\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Thread safety with scoped services</h1>\\n<p>When using scoped services, be aware that most scoped services are not thread-safe. Therefore you will likely\\nneed to use the <code class=\\\"language-text\\\">SerialExecutionStrategy</code> execution strategy, or write code to create a service scope\\nfor the duration of the execution of the field resolver that requires a scoped service. For instance, with\\nEntity Framework Core, typically the database context is registered as a scoped service and obtained via\\ndependency injection. To continue to use the database context in the same manner with a singleton schema,\\nyou would need to use a serial execution strategy, or create a scope within each field resolver that\\nrequires database access, as shown in the following example:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsQuery</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DroidType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token string\\\">\\\"hero\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">using</span> <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> scope <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span>RequestServices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">CreateScope</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> services <span class=\\\"token operator\\\">=</span> scope<span class=\\\"token punctuation\\\">.</span>ServiceProvider<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyDbContext<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>Droids<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>You can write extension methods to assist with this, as shown in the following sample:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ContextExtensions</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token return-type class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span>TReturn<span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">RunScopedAsync</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>TSource<span class=\\\"token punctuation\\\">,</span> TReturn<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token keyword\\\">this</span> <span class=\\\"token class-name\\\">IResolveFieldContext<span class=\\\"token punctuation\\\">&lt;</span>TSource<span class=\\\"token punctuation\\\">></span></span> context<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token class-name\\\">Func<span class=\\\"token punctuation\\\">&lt;</span>IResolveFieldContext<span class=\\\"token punctuation\\\">&lt;</span>TSource<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">,</span> IServiceProvider<span class=\\\"token punctuation\\\">,</span> Task<span class=\\\"token punctuation\\\">&lt;</span>TReturn<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> func<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">using</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> scope <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span>RequestServices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">CreateScope</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">,</span> scope<span class=\\\"token punctuation\\\">.</span>ServiceProvider<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">FieldBuilderExtensions</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token return-type class-name\\\">FieldBuilder<span class=\\\"token punctuation\\\">&lt;</span>TSource<span class=\\\"token punctuation\\\">,</span> TReturn<span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">ResolveScopedAsync</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>TSource<span class=\\\"token punctuation\\\">,</span> TReturn<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token keyword\\\">this</span> <span class=\\\"token class-name\\\">FieldBuilder<span class=\\\"token punctuation\\\">&lt;</span>TSource<span class=\\\"token punctuation\\\">,</span> TReturn<span class=\\\"token punctuation\\\">></span></span> builder<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token class-name\\\">Func<span class=\\\"token punctuation\\\">&lt;</span>IResolveFieldContext<span class=\\\"token punctuation\\\">&lt;</span>TSource<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">,</span> IServiceProvider<span class=\\\"token punctuation\\\">,</span> Task<span class=\\\"token punctuation\\\">&lt;</span>TReturn<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> func<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> builder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span> context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">RunScopedAsync</span><span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyGraphType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType<span class=\\\"token punctuation\\\">&lt;</span>Category<span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyGraphType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Name\\\"</span><span class=\\\"token punctuation\\\">,</span> context <span class=\\\"token operator\\\">=></span> context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>ListGraphType<span class=\\\"token punctuation\\\">&lt;</span>ProductGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Products\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveScopedAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">,</span> serviceProvider<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> db <span class=\\\"token operator\\\">=</span> serviceProvider<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyDbContext<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> db<span class=\\\"token punctuation\\\">.</span>Products<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Where</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">.</span>CategoryId <span class=\\\"token operator\\\">==</span> context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToListAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Be aware that using the service locator in this fashion described in this section could be considered an\\nAnti-Pattern. See <a href=\\\"https://blog.ploeh.dk/2010/02/03/ServiceLocatorisanAnti-Pattern/\\\">Service Locator is an Anti-Pattern</a>.\\nAnother approach to resolve scoped services is to use the SteroidsDI project, as described below.</p>\\n<h2 id=\\\"using-steroidsdi\\\"><a href=\\\"#using-steroidsdi\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Using SteroidsDI</h2>\\n<p>To use <a href=\\\"https://github.com/sungam3r/SteroidsDI\\\">SteroidsDI</a> with ASP.NET Core, add <code class=\\\"language-text\\\">Defer&lt;&gt;</code> and <code class=\\\"language-text\\\">IScopeProvider</code> in your <code class=\\\"language-text\\\">Startup.ConfigureServices</code>:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">void</span></span> <span class=\\\"token function\\\">ConfigureServices</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IServiceCollection</span> services<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span>\\n\\n    <span class=\\\"token comment\\\">// Add SteroidsDI Open Generic Defer&lt;> Factory Class</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddDefer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Add SteroidsDI IScopeProvider to use the AspNetCoreHttpScopeProvider</span>\\n    <span class=\\\"token comment\\\">// which internally uses the IHttpContextAccessor.HttpContext.RequestServices;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddHttpScope</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Then in your query graph types you can request services using <code class=\\\"language-text\\\">Defer&lt;T&gt;</code> to be injected via DI,\\nwhich will be evaluated at runtime to their relevant Scoped services, <code class=\\\"language-text\\\">T</code> has been registered with a <code class=\\\"language-text\\\">Scoped</code> DI lifetime:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsQuery</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// #1 - Add dependencies using Defer&lt;T></span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Defer<span class=\\\"token punctuation\\\">&lt;</span>IDroidRepo<span class=\\\"token punctuation\\\">></span></span> repoFactory<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DroidType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token string\\\">\\\"hero\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\n      <span class=\\\"token comment\\\">// #2 Resolve dependencies using current scope provider</span>\\n      resolve<span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span> repoFactory<span class=\\\"token punctuation\\\">.</span>Value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetDroid</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"R2-D2\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ol>\\n<li>Add <code class=\\\"language-text\\\">Defer&lt;T&gt;</code> to be injected by the dependency injection container. This is a factory which upon calling <code class=\\\"language-text\\\">Defer.Value</code> will resolve the requested service using any currently registered scope provider (e.g. <code class=\\\"language-text\\\">AspNetCoreHttpScopeProvider</code>)</li>\\n<li>Use the <code class=\\\"language-text\\\">Defer&lt;T&gt;</code> factory class to resolve the requested dependency using any currently registered scope provider. In our case it will attempt to use the <code class=\\\"language-text\\\">IHttpContextAccessor.HttpContext.RequestServices</code> which is the ASP.NET Core Scoped <code class=\\\"language-text\\\">IServiceProvider</code> in order to resolve the dependency.</li>\\n</ol>\",\"fields\":{\"relativePath\":\"docs/getting-started/dependency-injection.md\"}},\"site\":{\"siteMetadata\":{\"githubEditUrl\":\"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site\"}}},\"pathContext\":{\"relativePath\":\"docs/getting-started/dependency-injection.md\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-getting-started-dependency-injection-0f5dbe3dcb2fd5078010.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"dependency-injection\\\"><a href=\\\"#dependency-injection\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Dependency Injection</h1>\\n<p>GraphQL .NET supports dependency injection through a <code class=\\\"language-text\\\">IServiceProvider</code> interface that is passed to the Schema class. Internally when trying to resolve a type the library will call the methods on this interface.</p>\\n<blockquote>\\n<p>The library resolves a <code class=\\\"language-text\\\">GraphType</code> only once and caches that type for the lifetime of the <code class=\\\"language-text\\\">Schema</code>.</p>\\n</blockquote>\\n<p>The default implementation of <code class=\\\"language-text\\\">IServiceProvider</code> uses <code class=\\\"language-text\\\">Activator.CreateInstance</code>. <code class=\\\"language-text\\\">Activator.CreateInstance</code> requires that an object have a public parameterless constructor.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DefaultServiceProvider</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">IServiceProvider</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">object</span></span> <span class=\\\"token function\\\">GetService</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Type</span> serviceType<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>serviceType <span class=\\\"token operator\\\">==</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">ArgumentNullException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">nameof</span><span class=\\\"token punctuation\\\">(</span>serviceType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">try</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> Activator<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">CreateInstance</span><span class=\\\"token punctuation\\\">(</span>serviceType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Exception</span> exception<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">Exception</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token interpolation-string\\\"><span class=\\\"token string\\\">$\\\"Failed to call Activator.CreateInstance. Type: </span><span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token expression language-csharp\\\">serviceType<span class=\\\"token punctuation\\\">.</span>FullName</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\"</span></span><span class=\\\"token punctuation\\\">,</span> exception<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>You can override the default implementation by passing a <code class=\\\"language-text\\\">IServiceProvider</code> to the constructor of your <code class=\\\"language-text\\\">Schema</code>.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsSchema</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">GraphQL<span class=\\\"token punctuation\\\">.</span>Types<span class=\\\"token punctuation\\\">.</span>Schema</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsSchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IServiceProvider</span> provider<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span>provider<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Query <span class=\\\"token operator\\\">=</span> provider<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>StarWarsQuery<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        Mutation <span class=\\\"token operator\\\">=</span> provider<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>StarWarsMutation<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>How you integrate this into your system will depend on the dependency injection framework you are using. <code class=\\\"language-text\\\">FuncServiceProvider</code> is provided for easy integration with multiple containers.</p>\\n<h2 id=\\\"aspnet-core\\\"><a href=\\\"#aspnet-core\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ASP.NET Core</h2>\\n<p><a href=\\\"https://github.com/graphql-dotnet/examples/blob/8d5b7544006902f45b818010585b1ffa86ef446b/src/AspNetCoreCustom/Example/Startup.cs#L16-L34\\\">See this example.</a></p>\\n<p><code class=\\\"language-text\\\">Microsoft.Extensions.DependencyInjection</code> package used in ASP.NET Core already has support for resolving <code class=\\\"language-text\\\">IServiceProvider</code> interface so no additional settings are required - just add your required dependencies:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">void</span></span> <span class=\\\"token function\\\">ConfigureServices</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IServiceCollection</span> services<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IDocumentExecuter<span class=\\\"token punctuation\\\">,</span> DocumentExecuter<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IDocumentWriter<span class=\\\"token punctuation\\\">,</span> DocumentWriter<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>StarWarsData<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>StarWarsQuery<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>StarWarsMutation<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>HumanType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>HumanInputType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DroidType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>CharacterInterface<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>EpisodeEnum<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>ISchema<span class=\\\"token punctuation\\\">,</span> StarWarsSchema<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"nancy-tinyioccontainer\\\"><a href=\\\"#nancy-tinyioccontainer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Nancy TinyIoCContainer</h2>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">void</span></span> <span class=\\\"token function\\\">ConfigureApplicationContainer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">TinyIoCContainer</span> container<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ConfigureApplicationContainer</span><span class=\\\"token punctuation\\\">(</span>container<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    container<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Register</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">,</span> overloads<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">StarWarsSchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">FuncServiceProvider</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">.</span>Resolve<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"simplecontainer\\\"><a href=\\\"#simplecontainer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>SimpleContainer</h2>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> container <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">SimpleContainer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ncontainer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Singleton</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">StarWarsSchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">FuncServiceProvider</span><span class=\\\"token punctuation\\\">(</span>container<span class=\\\"token punctuation\\\">.</span>Get<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"autofac\\\"><a href=\\\"#autofac\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Autofac</h2>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">void</span></span> <span class=\\\"token function\\\">Load</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">ContainerBuilder</span> builder<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    builder\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Register</span><span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">FuncServiceProvider</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Resolve</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IComponentContext<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>Resolve<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">As</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IServiceProvider<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">InstancePerDependency</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"castle-windsor\\\"><a href=\\\"#castle-windsor\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Castle Windsor</h2>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">void</span></span> <span class=\\\"token function\\\">Install</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IWindsorContainer</span> container<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IConfigurationStore</span> store<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    container<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Register</span><span class=\\\"token punctuation\\\">(</span>\\n      Component\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">For</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IServiceProvider<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">UsingFactoryMethod</span><span class=\\\"token punctuation\\\">(</span>k <span class=\\\"token operator\\\">=></span> k<span class=\\\"token punctuation\\\">.</span>Resolve<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"schema-service-lifetime\\\"><a href=\\\"#schema-service-lifetime\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Schema Service Lifetime</h1>\\n<p>Most dependency injection frameworks allow for specifying different service lifetimes for different\\nservices. Although they may have different names with different frameworks, the three most common\\nlifetimes are as follows:</p>\\n<ul>\\n<li><strong>Transient</strong> services are created every time they are injected or requested.</li>\\n<li><strong>Scoped</strong> services are created per scope. In a web application, every web request creates a new unique service scope. That means scoped services are generally created per web request.</li>\\n<li><strong>Singleton</strong> services are created per DI container. That generally means that they are created only one time per application and then used for whole the application life time.</li>\\n</ul>\\n<p>It is highly recommended that the schema is registered as a singleton. This provides the best performance as\\nthe schema does not need to be built for every request. As all graph types are constructed at the\\nsame time as the schema, all graph types will effectively have a singleton lifetime, regardless\\nof how it is registered with the DI framework.</p>\\n<p>Scoped lifetime can be used to allow the schema and all its graph types access to the current DI scope.\\nThis is not recommended; please see <a href=\\\"#scoped-services-with-a-singleton-schema-lifetime\\\">Scoped Services</a>\\nbelow. With scoped schemas, it is <strong>required</strong> that all its graph types are registered within the DI\\nframework as scoped or transient services.</p>\\n<p>Transient lifetime is also not recommended due to performance degradation. For schemas having a transient\\nlifetime, it is <strong>required</strong> that all its graph types are also registered within the DI framework as\\ntransient services.</p>\\n<h1 id=\\\"scoped-services-with-a-singleton-schema-lifetime\\\"><a href=\\\"#scoped-services-with-a-singleton-schema-lifetime\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Scoped services with a singleton schema lifetime</h1>\\n<p>For reasons described above, it is recommended that the schema is registered as a singleton within\\nthe dependency injection framework. However, this prevents including scoped services within the\\nconstructor of the schema or your custom graph types.</p>\\n<p>To use scoped services (e.g. HttpContext scoped services in ASP.NET Core) you will need to pass\\nthe scoped service provider into the <code class=\\\"language-text\\\">ExecutionOptions.RequestServices</code> property. Then within\\nany field resolver or field middleware, you can access the <code class=\\\"language-text\\\">IResolveFieldContext.RequestServices</code>\\nproperty to resolve types via the scoped service provider. Typical integration with ASP.NET Core\\nmight look like this:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> _executer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ExecuteAsync</span><span class=\\\"token punctuation\\\">(</span>options <span class=\\\"token operator\\\">=></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    options<span class=\\\"token punctuation\\\">.</span>Schema <span class=\\\"token operator\\\">=</span> schema<span class=\\\"token punctuation\\\">;</span>\\n    options<span class=\\\"token punctuation\\\">.</span>Query <span class=\\\"token operator\\\">=</span> request<span class=\\\"token punctuation\\\">.</span>Query<span class=\\\"token punctuation\\\">;</span>\\n    options<span class=\\\"token punctuation\\\">.</span>Inputs <span class=\\\"token operator\\\">=</span> request<span class=\\\"token punctuation\\\">.</span>Variables<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToInputs</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    options<span class=\\\"token punctuation\\\">.</span>RequestServices <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span>RequestServices<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>You could then call scoped services from within field resolvers as shown in the following example:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsQuery</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DroidType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token string\\\">\\\"hero\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span> context<span class=\\\"token punctuation\\\">.</span>RequestServices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IDroidRepo<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetDroid</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"R2-D2\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"thread-safety-with-scoped-services\\\"><a href=\\\"#thread-safety-with-scoped-services\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Thread safety with scoped services</h1>\\n<p>When using scoped services, be aware that most scoped services are not thread-safe. Therefore you will likely\\nneed to use the <code class=\\\"language-text\\\">SerialExecutionStrategy</code> execution strategy, or write code to create a service scope\\nfor the duration of the execution of the field resolver that requires a scoped service. For instance, with\\nEntity Framework Core, typically the database context is registered as a scoped service and obtained via\\ndependency injection. To continue to use the database context in the same manner with a singleton schema,\\nyou would need to use a serial execution strategy, or create a scope within each field resolver that\\nrequires database access, as shown in the following example:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsQuery</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DroidType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token string\\\">\\\"hero\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">using</span> <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> scope <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span>RequestServices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">CreateScope</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> services <span class=\\\"token operator\\\">=</span> scope<span class=\\\"token punctuation\\\">.</span>ServiceProvider<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyDbContext<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>Droids<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>You can write extension methods to assist with this, as shown in the following sample:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ContextExtensions</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token return-type class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span>TReturn<span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">RunScopedAsync</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>TSource<span class=\\\"token punctuation\\\">,</span> TReturn<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token keyword\\\">this</span> <span class=\\\"token class-name\\\">IResolveFieldContext<span class=\\\"token punctuation\\\">&lt;</span>TSource<span class=\\\"token punctuation\\\">></span></span> context<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token class-name\\\">Func<span class=\\\"token punctuation\\\">&lt;</span>IResolveFieldContext<span class=\\\"token punctuation\\\">&lt;</span>TSource<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">,</span> IServiceProvider<span class=\\\"token punctuation\\\">,</span> Task<span class=\\\"token punctuation\\\">&lt;</span>TReturn<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> func<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">using</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> scope <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span>RequestServices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">CreateScope</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">,</span> scope<span class=\\\"token punctuation\\\">.</span>ServiceProvider<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">FieldBuilderExtensions</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token return-type class-name\\\">FieldBuilder<span class=\\\"token punctuation\\\">&lt;</span>TSource<span class=\\\"token punctuation\\\">,</span> TReturn<span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">ResolveScopedAsync</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>TSource<span class=\\\"token punctuation\\\">,</span> TReturn<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token keyword\\\">this</span> <span class=\\\"token class-name\\\">FieldBuilder<span class=\\\"token punctuation\\\">&lt;</span>TSource<span class=\\\"token punctuation\\\">,</span> TReturn<span class=\\\"token punctuation\\\">></span></span> builder<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token class-name\\\">Func<span class=\\\"token punctuation\\\">&lt;</span>IResolveFieldContext<span class=\\\"token punctuation\\\">&lt;</span>TSource<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">,</span> IServiceProvider<span class=\\\"token punctuation\\\">,</span> Task<span class=\\\"token punctuation\\\">&lt;</span>TReturn<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> func<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> builder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span> context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">RunScopedAsync</span><span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyGraphType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType<span class=\\\"token punctuation\\\">&lt;</span>Category<span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyGraphType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Name\\\"</span><span class=\\\"token punctuation\\\">,</span> context <span class=\\\"token operator\\\">=></span> context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>ListGraphType<span class=\\\"token punctuation\\\">&lt;</span>ProductGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Products\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveScopedAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">,</span> serviceProvider<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> db <span class=\\\"token operator\\\">=</span> serviceProvider<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyDbContext<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> db<span class=\\\"token punctuation\\\">.</span>Products<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Where</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">.</span>CategoryId <span class=\\\"token operator\\\">==</span> context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToListAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Be aware that using the service locator in this fashion described in this section could be considered an\\nAnti-Pattern. See <a href=\\\"https://blog.ploeh.dk/2010/02/03/ServiceLocatorisanAnti-Pattern/\\\">Service Locator is an Anti-Pattern</a>.\\nAnother approach to resolve scoped services is to use the SteroidsDI project, as described below.</p>\\n<h2 id=\\\"using-steroidsdi\\\"><a href=\\\"#using-steroidsdi\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Using SteroidsDI</h2>\\n<p>To use <a href=\\\"https://github.com/sungam3r/SteroidsDI\\\">SteroidsDI</a> with ASP.NET Core, add <code class=\\\"language-text\\\">Defer&lt;&gt;</code> and <code class=\\\"language-text\\\">IScopeProvider</code> in your <code class=\\\"language-text\\\">Startup.ConfigureServices</code>:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">void</span></span> <span class=\\\"token function\\\">ConfigureServices</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IServiceCollection</span> services<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span>\\n\\n    <span class=\\\"token comment\\\">// Add SteroidsDI Open Generic Defer&lt;> Factory Class</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddDefer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Add SteroidsDI IScopeProvider to use the AspNetCoreHttpScopeProvider</span>\\n    <span class=\\\"token comment\\\">// which internally uses the IHttpContextAccessor.HttpContext.RequestServices;</span>\\n    services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddHttpScope</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Then in your query graph types you can request services using <code class=\\\"language-text\\\">Defer&lt;T&gt;</code> to be injected via DI,\\nwhich will be evaluated at runtime to their relevant Scoped services, <code class=\\\"language-text\\\">T</code> has been registered with a <code class=\\\"language-text\\\">Scoped</code> DI lifetime:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StarWarsQuery</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// #1 - Add dependencies using Defer&lt;T></span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">StarWarsQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Defer<span class=\\\"token punctuation\\\">&lt;</span>IDroidRepo<span class=\\\"token punctuation\\\">></span></span> repoFactory<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DroidType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token string\\\">\\\"hero\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\n      <span class=\\\"token comment\\\">// #2 Resolve dependencies using current scope provider</span>\\n      resolve<span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span> repoFactory<span class=\\\"token punctuation\\\">.</span>Value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetDroid</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"R2-D2\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ol>\\n<li>Add <code class=\\\"language-text\\\">Defer&lt;T&gt;</code> to be injected by the dependency injection container. This is a factory which upon calling <code class=\\\"language-text\\\">Defer.Value</code> will resolve the requested service using any currently registered scope provider (e.g. <code class=\\\"language-text\\\">AspNetCoreHttpScopeProvider</code>)</li>\\n<li>Use the <code class=\\\"language-text\\\">Defer&lt;T&gt;</code> factory class to resolve the requested dependency using any currently registered scope provider. In our case it will attempt to use the <code class=\\\"language-text\\\">IHttpContextAccessor.HttpContext.RequestServices</code> which is the ASP.NET Core Scoped <code class=\\\"language-text\\\">IServiceProvider</code> in order to resolve the dependency.</li>\\n</ol>\",\"fields\":{\"relativePath\":\"docs/getting-started/dependency-injection.md\"}},\"site\":{\"siteMetadata\":{\"githubEditUrl\":\"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site\"}}},\"pathContext\":{\"relativePath\":\"docs/getting-started/dependency-injection.md\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-getting-started-dependency-injection.json\n// module id = 292\n// module chunks = 178698305269250"],"sourceRoot":""}