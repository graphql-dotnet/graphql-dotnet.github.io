webpackJsonp([0xed3b46ae8038],{339:function(n,s){n.exports={data:{markdownRemark:{html:'<h1 id="known-issues--faq"><a href="#known-issues--faq" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Known Issues / FAQ</h1>\n<h2 id="faq"><a href="#faq" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FAQ</h2>\n<h3 id="is-it-possible-to-auto-generate-classes-from-a-schema"><a href="#is-it-possible-to-auto-generate-classes-from-a-schema" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Is it possible to auto-generate classes from a schema?</h3>\n<p>This functionality is not provided by GraphQL.NET. See <a href="https://github.com/graphql-dotnet/graphql-dotnet/issues/576">issue #576</a>.</p>\n<h3 id="is-it-possible-to-auto-generate-a-graph-type-from-a-class"><a href="#is-it-possible-to-auto-generate-a-graph-type-from-a-class" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Is it possible to auto-generate a graph type from a class?</h3>\n<p>Yes, via the <code class="language-text">AutoRegisteringObjectGraphType</code>/<code class="language-text">AutoRegisteringInputObjectGraphType</code> classes.\nYou can also configure auto-generated fields and auto-create enum types via the <code class="language-text">EnumerationGraphType&lt;&gt;</code>\ngeneric class.</p>\n<p>Here is a sample of using an enumeration graph type:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token generic-method"><span class="token function">Field</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ListGraphType<span class="token punctuation">&lt;</span>EnumerationGraphType<span class="token punctuation">&lt;</span>Episodes<span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"appearsIn"</span><span class="token punctuation">,</span> <span class="token string">"Which movie they appear in."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Here is a sample of an auto registering input graph type:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Person</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token generic-method"><span class="token function">Field</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>StringGraphType<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"addPerson"</span><span class="token punctuation">,</span>\n    <span class="token named-parameter punctuation">arguments</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryArguments</span><span class="token punctuation">(</span>\n        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryArgument<span class="token punctuation">&lt;</span>AutoRegisteringInputObjectGraphType<span class="token punctuation">&lt;</span>Person<span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"value"</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token named-parameter punctuation">resolve</span><span class="token punctuation">:</span> context <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> person <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetArgument</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        db<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Here is a sample of an auto registering object graph type that modifies some of the fields:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Product</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> LastUpdated <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ProductGraphType</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AutoRegisteringObjectGraphType<span class="token punctuation">&lt;</span>Product<span class="token punctuation">></span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">ProductGraphType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x<span class="token punctuation">.</span>LastUpdated<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">GetField</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Description <span class="token operator">=</span> <span class="token string">"A short name of the product"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token generic-method"><span class="token function">Field</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ListGraphType<span class="token punctuation">&lt;</span>ProductGraphType<span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"products"</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">resolve</span><span class="token punctuation">:</span> _ <span class="token operator">=></span> db<span class="token punctuation">.</span>Products<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Note that you may need to register the classes within your dependency injection framework:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>EnumerationGraphType<span class="token punctuation">&lt;</span>Episodes<span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nservices<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AutoRegisteringInputGraphType<span class="token punctuation">&lt;</span>Person<span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nservices<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ProductGraphType<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Alternatively, you can register open generic classes:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp">services<span class="token punctuation">.</span><span class="token function">AddSingleton</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">AutoRegisteringInputGraphType<span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nservices<span class="token punctuation">.</span><span class="token function">AddSingleton</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">AutoRegisteringObjectGraphType<span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nservices<span class="token punctuation">.</span><span class="token function">AddSingleton</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">EnumerationGraphType<span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>In the above sample, you would still need to register <code class="language-text">ProductGraphType</code> separately.</p>\n<h3 id="is-it-possible-to-downloadupload-a-file-with-graphql"><a href="#is-it-possible-to-downloadupload-a-file-with-graphql" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Is it possible to download/upload a file with GraphQL?</h3>\n<p>Files would need to be encoded in some form that is transmissible via JSON (e.g. Base64). If the file isn\'t part of some other\nstructured data result, it may not be a good candidate for a GraphQL API.</p>\n<p>Note that Base64 is significantly less efficient bandwidth-wise than binary transfer, and you won\'t get an automatic browser\ndownload prompt from receiving it.</p>\n<p>If you are attempting to return pictures to be directly consumed in a web front-end, you can encode the picture as Base64 and\nprepend a data URL tag (e.g. "<code class="language-text">data:image/jpg;base64,</code>") which can be interpreted by common web browsers.</p>\n<p>Similarly, if you are attempting a mutation to allow file uploading from a web browser, you can have a field resolver\naccept a <code class="language-text">StringGraphType</code> argument consisting of a data url with base64 encoded data.</p>\n<p>Note that automatic conversion from Base64 string to byte array (but not byte array to Base64 string) is provided by\nGraphQL.NET. This means you can use <code class="language-text">GetArgument&lt;byte[]&gt;()</code> to retrieve a byte array from a field argument, provided that\nthe argument was a Base64 string.</p>\n<h3 id="can-you-use-flag-enumerations---enumerations-marked-with-the-code-classlanguage-textflagsattributecode"><a href="#can-you-use-flag-enumerations---enumerations-marked-with-the-code-classlanguage-textflagsattributecode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Can you use flag enumerations - enumerations marked with the <code class="language-text">FlagsAttribute</code>?</h3>\n<p>Flag enumerations are not natively supported by the GraphQL specification. However,\nyou can provide a similar behavior by converting your enumeration values to and from\na list of enums. Here is a sample of some extension methods to facilitate this:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EnumExtensions</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">FromFlags</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">struct</span><span class="token punctuation">,</span> <span class="token class-name">Enum</span></span>\n        <span class="token operator">=></span> Enum<span class="token punctuation">.</span><span class="token function">GetValues</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Cast</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=></span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">FromFlags</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">T<span class="token punctuation">?</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">struct</span><span class="token punctuation">,</span> <span class="token class-name">Enum</span></span>\n        <span class="token operator">=></span> <span class="token keyword">value</span><span class="token punctuation">.</span>HasValue <span class="token punctuation">?</span> <span class="token keyword">value</span><span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">FromFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">CombineFlags</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> values<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">struct</span><span class="token punctuation">,</span> <span class="token class-name">Enum</span></span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>values <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> enumType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetEnumUnderlyingType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>enumType <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>Enum<span class="token punctuation">.</span><span class="token function">ToObject</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span> values<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Cast</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Aggregate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">|</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// add support for uint/long/etc here</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotSupportedException</span><span class="token punctuation">(</span><span class="token string">"Enum type not supported"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Flags</span></span><span class="token punctuation">]</span>\n<span class="token keyword">enum</span> <span class="token class-name">MyFlags</span>\n<span class="token punctuation">{</span>\n    Grumpy <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    Happy <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    Sleepy <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// this returns the list ["GRUMPY", "HAPPY"]</span>\n<span class="token generic-method"><span class="token function">Field</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ListGraphType<span class="token punctuation">&lt;</span>EnumerationGraphType<span class="token punctuation">&lt;</span>MyFlags<span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span>\n    <span class="token string">"getFlagEnum"</span><span class="token punctuation">,</span>\n    <span class="token named-parameter punctuation">resolve</span><span class="token punctuation">:</span> ctx <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> myFlags <span class="token operator">=</span> MyFlags<span class="token punctuation">.</span>Grumpy <span class="token operator">|</span> MyFlags<span class="token punctuation">.</span>Happy<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> myFlags<span class="token punctuation">.</span><span class="token function">FromFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// when calling convertEnumListToString(arg: [GRUMPY, HAPPY]), it returns the string "Grumpy, Happy"</span>\n<span class="token generic-method"><span class="token function">Field</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>StringGraphType<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>\n    <span class="token string">"convertEnumListToString"</span><span class="token punctuation">,</span>\n    <span class="token named-parameter punctuation">arguments</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryArguments</span><span class="token punctuation">(</span>\n        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryArgument<span class="token punctuation">&lt;</span>ListGraphType<span class="token punctuation">&lt;</span>EnumerationGraphType<span class="token punctuation">&lt;</span>MyFlags<span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"arg"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token named-parameter punctuation">resolve</span><span class="token punctuation">:</span> ctx <span class="token operator">=></span> ctx<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetArgument</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEnumerable<span class="token punctuation">&lt;</span>MyFlags<span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"arg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CombineFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="can-custom-scalars-serialize-non-null-data-to-a-null-value-and-vice-versa"><a href="#can-custom-scalars-serialize-non-null-data-to-a-null-value-and-vice-versa" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Can custom scalars serialize non-null data to a null value and vice versa?</h3>\n<p>No, that is not currently possible, as returning null from <code class="language-text">Serialize</code>, <code class="language-text">ParseLiteral</code> or <code class="language-text">ParseValue</code>\nindicates a failed conversion. Further, upon output serialization, null values are not passed\nthrough the serializer.</p>\n<p>For example, let\'s say you want to write a custom serializer for date/time data types where it changes\nstrings of the format "MM-dd-yyyy" into <code class="language-text">DateTime</code> values, and empty strings into null values. That is\nnot possible. The custom scalar also cannot do the reverse: change null values back into an empty string.</p>\n<p>If this type of functionality is necessary for your data types, you will need to write code within your\nfield resolvers to perform the conversion, as a custom scalar cannot do this. This is a limitation\nof GraphQL.NET.</p>\n<h3 id="should-i-use-code-classlanguage-textgraphqlauthorizeattributecode-or-the-code-classlanguage-textauthorizewithcode-method"><a href="#should-i-use-code-classlanguage-textgraphqlauthorizeattributecode-or-the-code-classlanguage-textauthorizewithcode-method" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Should I use <code class="language-text">GraphQLAuthorizeAttribute</code> or the <code class="language-text">AuthorizeWith</code> method?</h3>\n<p><code class="language-text">GraphQLAuthorizeAttribute</code> is only for use with the schema-first syntax. <code class="language-text">AuthorizeWith</code> is for use\nwith the code-first approach.</p>\n<p>See <a href="https://github.com/graphql-dotnet/authorization/issues/68">issue #68</a> and <a href="https://github.com/graphql-dotnet/authorization/issues/74">issue #74</a>\nwithin the <a href="https://github.com/graphql-dotnet/authorization">authorization</a> package.</p>\n<h3 id="can-descriptions-be-inherited-if-a-graph-type-implements-an-graphql-interface"><a href="#can-descriptions-be-inherited-if-a-graph-type-implements-an-graphql-interface" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Can descriptions be inherited if a graph type implements an GraphQL interface?</h3>\n<p>Yes; although descriptions directly set on the graph type take precedence.</p>\n<h3 id="how-can-i-use-the-data-loader-for-a-many-to-many-relationship"><a href="#how-can-i-use-the-data-loader-for-a-many-to-many-relationship" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How can I use the data loader for a many-to-many relationship?</h3>\n<p>This is done within your database queries; it is not a function of the dataloader. Use the same\n<code class="language-text">CollectionBatchDataLoader</code> as you would for a one-to-many relationship; then when you are loading\ndata from your database within the fetch delegate, use an inner join to retrieve the proper data.</p>\n<h3 id="how-to-authenticate-subscriptions"><a href="#how-to-authenticate-subscriptions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How to authenticate subscriptions?</h3>\n<blockquote>\n<p>Note. This question has more to do with the transport layer, not GraphQL.NET itself.</p>\n</blockquote>\n<p>GraphQL subscriptions usually work over WebSockets at the transport level. If the subscription is over\nWebSockets, then the handshake is still over HTTP(HTTPS) and handshake does not allow authorization headers.\nYou should instead use <a href="https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md#gql_connection_init">GQL<em>CONNECTION</em>INIT</a>\nmessage to send additional data to the server. If you are using <a href="https://github.com/graphql-dotnet/server">server project</a>\nthen you can write your <code class="language-text">IOperationMessageListener</code> and add the listener as a transient service:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthListener</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IOperationMessageListener</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IHttpContextAccessor</span> _accessor<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token function">AuthListener</span><span class="token punctuation">(</span><span class="token class-name">IHttpContextAccessor</span> accessor<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        _accessor <span class="token operator">=</span> accessor<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">BeforeHandleAsync</span><span class="token punctuation">(</span><span class="token class-name">MessageHandlingContext</span> context<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>Type <span class="token operator">==</span> MessageType<span class="token punctuation">.</span>GQL_CONNECTION_INIT<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">// Extract the auth header and validate it.</span>\n            <span class="token comment">// Then get the user and store it in the HttpContext (or something).</span>\n            <span class="token class-name"><span class="token keyword">dynamic</span></span> payload <span class="token operator">=</span> context<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>Payload<span class="token punctuation">;</span>\n            <span class="token class-name"><span class="token keyword">string</span></span> auth <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token string">"Authorization"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            _accessor<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>User <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token range operator">..</span><span class="token punctuation">.</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">HandleAsync</span><span class="token punctuation">(</span><span class="token class-name">MessageHandlingContext</span> context<span class="token punctuation">)</span> <span class="token operator">=></span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">AfterHandleAsync</span><span class="token punctuation">(</span><span class="token class-name">MessageHandlingContext</span> context<span class="token punctuation">)</span> <span class="token operator">=></span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    services<span class="token punctuation">.</span><span class="token function">AddHttpContextAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IOperationMessageListener<span class="token punctuation">,</span> AuthListener<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><code class="language-text">GQL_CONNECTION_INIT</code> message looks like this:</p>\n<div class="gatsby-highlight" data-language="json">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"connection_init"</span><span class="token punctuation">,</span>\n  <span class="token property">"payload"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"Authorization"</span><span class="token operator">:</span> <span class="token string">"Bearer eyJhbGciOiJIUzI..."</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="why-does-my-saved-code-classlanguage-textiresolvefieldcontextcode-instance-change-after-the-field-resolver-executes"><a href="#why-does-my-saved-code-classlanguage-textiresolvefieldcontextcode-instance-change-after-the-field-resolver-executes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Why does my saved <code class="language-text">IResolveFieldContext</code> instance "change" after the field resolver executes?</h3>\n<p>The <code class="language-text">IResolveFieldContext</code> instance passed to field resolvers is re-used at the completion of the resolver. Be sure not to\nuse this instance once the resolver finishes executing. To preserve a copy of the context, call <code class="language-text">.Copy()</code> on the context\nto create a copy that is not re-used. Note that it is safe to use the field context within asynchronous field resolvers and\ndata loaders. Once the asynchronous field resolver or data loader returns its final result, the context may be re-used.\nAlso, any calls to the configured <code class="language-text">UnhandledExceptionDelegate</code> will receive a field context copy that will not be re-used,\nso it is safe to preserve these instances without calling <code class="language-text">.Copy()</code>.</p>\n<h2 id="known-issues"><a href="#known-issues" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Known Issues</h2>\n<p><code class="language-text">IResolveFieldContext.HasArgument</code> will return <code class="language-text">true</code> for all arguments where <code class="language-text">GetArgument</code> does not return <code class="language-text">null</code>.\nIt cannot identify which arguments have been provided a <code class="language-text">null</code> value compared to arguments which were not provided.\nThis issue should supposedly be resolved in version 4.</p>\n<h2 id="common-errors"><a href="#common-errors" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Common Errors</h2>\n<h3 id="synchronous-operations-are-disallowed"><a href="#synchronous-operations-are-disallowed" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Synchronous operations are disallowed.</h3>\n<blockquote>\n<p>InvalidOperationException: Synchronous operations are disallowed. Call ReadAsync or set AllowSynchronousIO to true instead</p>\n</blockquote>\n<p>ASP.NET Core 3 does not by default allow synchronous reading/writing of input/output streams. When using the <code class="language-text">Newtonsoft.Json</code> package,\nyou will need to set the <code class="language-text">AllowSynchronousIO</code> property to <code class="language-text">true</code>. The <code class="language-text">System.Text.Json</code> package fully supports\nasynchronous reading of json data streams and should not be a problem.</p>\n<p>Here is the workaround for <code class="language-text">Newtonsoft.Json</code>:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// kestrel</span>\nservices<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>KestrelServerOptions<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>options <span class="token operator">=></span>\n<span class="token punctuation">{</span>\n    options<span class="token punctuation">.</span>AllowSynchronousIO <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// IIS</span>\n services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IISServerOptions<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>options <span class="token operator">=></span>\n<span class="token punctuation">{</span>\n    options<span class="token punctuation">.</span>AllowSynchronousIO <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="cannot-resolve-scoped-service-within-graph-type"><a href="#cannot-resolve-scoped-service-within-graph-type" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cannot resolve scoped service within graph type</h3>\n<blockquote>\n<p>InvalidOperationException: Cannot resolve scoped service from root provider</p>\n</blockquote>\n<p>The recommended lifetime for the schema and its graph types within a dependency injection\nframework is the \'singleton\' lifetime. This prevents the schema from having to be built\nfor every GraphQL request. Since the graph types are constructed at the same time as the\nschema, it is not possible to register the graph types as scoped services while leaving\nthe schema as a singleton. Instead, you will need to pull your scoped services from within\nthe field resolver via the <code class="language-text">IResolveFieldContext.RequestServices</code> property. Detailed\ninformation on this technique, its configuration requirements, and alternatives are outlined\nin the <a href="../getting-started/dependency-injection.md">Dependency Injection</a> documentation.</p>\n<p>It is also possible to register the schema and all its graph types as scoped services.\nThis is not recommended due to the overhead of building the schema for each request.</p>\n<p>Note that concurrency issues typically arise when using scoped services with a parallel\nexecution strategy. Please read the section on this in the\n<a href="../getting-started/dependency-injection.md#scoped-services-with-a-singleton-schema-lifetime">documentation</a>.</p>\n<h3 id="entity-framework-concurrency-issues"><a href="#entity-framework-concurrency-issues" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Entity Framework concurrency issues</h3>\n<blockquote>\n<p>InvalidOperationException: A second operation started on this context before a previous\noperation completed. This is usually caused by different threads using the same instance\nof DbContext. For more information on how to avoid threading issues with DbContext,\nsee <a href="https://go.microsoft.com/fwlink/?linkid=2097913">https://go.microsoft.com/fwlink/?linkid=2097913</a>.</p>\n</blockquote>\n<p>This problem is due to the fact that the default execution strategy for a query operation\nis the <code class="language-text">ParallelExecutionStrategy</code>, per the <a href="https://spec.graphql.org/June2018/#sec-Normal-and-Serial-Execution">spec</a>,\ncombined with the fact that you are using a shared instance of the Entity Framework\n<code class="language-text">DbContext</code>.</p>\n<p>For instance, let\'s say the database context is registered as a scoped service (typical for EF),\nand if you request the database context via the <code class="language-text">IResolveFieldContext.RequestServices</code> property,\nyou will retrieve an instance of the database context that, although unique\nto this request, is shared between all field resolvers within this request.</p>\n<p>The easiest option is to change the execution strategy to <code class="language-text">SerialExecutionStrategy</code>. Although\nthis would solve concurrency issues in this case, there may be an objectionable performance\ndegradation, since only a single field resolver can execute at a time.</p>\n<p>A second option would be to change the database context lifetime to \'transient\'. This means\nthat each time the database context was requested, it would receive a different copy, solving\nthe concurrency problems with GraphQL.NET\'s parallel execution strategy. However, if your\nbusiness logic layer passes EF-tracked entities through different services, this will not\nwork for you as each of the different services will not know about the tracked entities\npassed from another service. Therefore, the database context must remain scoped.</p>\n<p>Finally, you can create a scope within each field resolver that relies on Entity Framework\nor your other scoped services. Please see the section on this in the\n<a href="../getting-started/dependency-injection.md#scoped-services-with-a-singleton-schema-lifetime">dependency injection documentation</a>.</p>\n<p>Also see discussion in <a href="https://github.com/graphql-dotnet/graphql-dotnet/issues/1310">#1310</a> with related issues.</p>',
fields:{relativePath:"docs/guides/known-issues.md"}},site:{siteMetadata:{githubEditUrl:"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site"}}},pathContext:{relativePath:"docs/guides/known-issues.md"}}}});
//# sourceMappingURL=path---docs-guides-known-issues-3aa3f8ca2968b2641d75.js.map