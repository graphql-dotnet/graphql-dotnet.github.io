webpackJsonp([0xf20e3161d4a6],{311:function(n,a){n.exports={data:{markdownRemark:{html:'<h1 id="custom-scalars"><a href="#custom-scalars" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Custom Scalars</h1>\n<p>You can extend your schema with your own custom scalars. Conceptually, a scalar must implement the following operations:</p>\n<ul>\n<li>\n<p>Serialization: Transforms a scalar from its server-side representation to a representation suitable for the client.</p>\n</li>\n<li>\n<p>Value Parsing: Transforms a scalar from its client-side representation as a variable to its server-side representation.</p>\n</li>\n<li>\n<p>Literal Parsing: Transforms a scalar from its client-side representation as an argument to its server-side representation.</p>\n</li>\n</ul>\n<p>Parsing for arguments and variables are handled separately because while arguments must always be expressed in GraphQL\nquery syntax, variable format is transport-specific (usually JSON). You can find more information about\nthese methods <a href="https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL/Types/Scalars/ScalarGraphType.cs">here</a>.</p>\n<p>You may wish to read more about how scalars work at the following links:</p>\n<ul>\n<li><a href="https://www.graphql-scalars.com/scalars-guide/">https://www.graphql-scalars.com/scalars-guide/</a></li>\n<li><a href="https://www.graphql.de/blog/scalars-in-depth/">https://www.graphql.de/blog/scalars-in-depth/</a></li>\n</ul>\n<h2 id="vector3-sample-with-string-parsing-and-serialization"><a href="#vector3-sample-with-string-parsing-and-serialization" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Vector3 sample with string parsing and serialization</h2>\n<p>The following example shows how to create a custom scalar in GraphQL.NET. You will create a 3D Vector which will be exchanged\nbetween server and client as a comma-separated string (ex. "34, 61, 12"). The example assumes the GraphQL schema is implemented\nin an ASP.NET Core project using the <code class="language-text">Microsoft.Extensions.DependencyInjection</code> package, though only minor modifications would\nbe required for other project types.</p>\n<p>Assume the following schema</p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token keyword">scalar</span> <span class="token class-name">Vector3</span>\n\n<span class="token keyword">schema</span> <span class="token punctuation">{</span>\n    <span class="token attr-name">query</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token attr-name">getVector</span><span class="token punctuation">:</span> Vector3<span class="token operator">!</span>\n    <span class="token punctuation">}</span>\n    <span class="token attr-name">mutation</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token attr-name">addVector</span><span class="token punctuation">(</span><span class="token attr-name">vector3</span><span class="token punctuation">:</span> Vector3<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Vector3\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>The goal is to execute mutations with both arguments:</p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token keyword">mutation</span> <span class="token punctuation">{</span>\n    addVector<span class="token punctuation">(</span><span class="token attr-name">vector3</span><span class="token punctuation">:</span> <span class="token string">"23,43,66"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>and also variables:</p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token keyword">mutation</span> AddVector<span class="token punctuation">(</span><span class="token variable">$vector3</span><span class="token punctuation">:</span> Vector3<span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    addVector<span class="token punctuation">(</span><span class="token attr-name">vector3</span><span class="token punctuation">:</span> <span class="token variable">$vector3</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n//variables\n<span class="token punctuation">{</span>\n    <span class="token string">"vector3"</span><span class="token punctuation">:</span> <span class="token string">"23,43,66"</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Vectors should be returned in the same format:</p>\n<div class="gatsby-highlight" data-language="json">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"getVector"</span><span class="token operator">:</span> <span class="token string">"23,43,66"</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="1-create-the-classstruct-for-the-server-side-representation"><a href="#1-create-the-classstruct-for-the-server-side-representation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>1. Create the class/struct for the server-side representation.</h3>\n<p>This is not necessary if you intend to use already existing classes (<code class="language-text">string</code>, <code class="language-text">int</code>, etc.)\nfor the server-side representation.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">Vector3</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">Vector3</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> y<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> z<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        X <span class="token operator">=</span> x<span class="token punctuation">;</span>\n        Y <span class="token operator">=</span> y<span class="token punctuation">;</span>\n        Z <span class="token operator">=</span> z<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> X <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Y <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Z <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>       \n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="2-create-a-graph-type-for-the-scalar-by-inheriting-code-classlanguage-textscalargraphtypecode"><a href="#2-create-a-graph-type-for-the-scalar-by-inheriting-code-classlanguage-textscalargraphtypecode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2. Create a graph type for the scalar by inheriting <code class="language-text">ScalarGraphType</code>.</h3>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">GraphQL</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">GraphQL<span class="token punctuation">.</span>Types</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">GraphQL<span class="token punctuation">.</span>Language<span class="token punctuation">.</span>AST</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector3Type</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScalarGraphType</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">Vector3Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Name <span class="token operator">=</span> <span class="token string">"Vector3"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ParseLiteral</span><span class="token punctuation">(</span><span class="token class-name">IValue</span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ParseValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="3-register-the-graph-type-with-the-di-container"><a href="#3-register-the-graph-type-with-the-di-container" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3. Register the graph type with the DI container.</h3>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// In Startup.cs</span>\n\n<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Vector3Type<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Other schema registrations...</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="4-prepare-to-accept-code-classlanguage-textvector3code-inputs-from-query-arguments-implement-code-classlanguage-textscalargraphtypeparseliteralcode"><a href="#4-prepare-to-accept-code-classlanguage-textvector3code-inputs-from-query-arguments-implement-code-classlanguage-textscalargraphtypeparseliteralcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4. Prepare to accept <code class="language-text">Vector3</code> inputs from query arguments. Implement <code class="language-text">ScalarGraphType.ParseLiteral</code>.</h3>\n<p>Keep in mind that AST parsing may present values as any of the following types:</p>\n<ul>\n<li><code class="language-text">IntValue</code> - integers that can be represented within an <code class="language-text">int</code></li>\n<li><code class="language-text">LongValue</code> - integers that can be represented within a <code class="language-text">long</code></li>\n<li><code class="language-text">BigIntValue</code> - integers that can be represented within a <code class="language-text">BigInteger</code></li>\n<li><code class="language-text">FloatValue</code> - floating-point values that can be represented within a <code class="language-text">double</code></li>\n<li><code class="language-text">DecimalValue</code> - floating-point values that can be represented within a <code class="language-text">decimal</code></li>\n<li><code class="language-text">StringValue</code> - string values</li>\n<li><code class="language-text">EnumValue</code> - enumeration values</li>\n<li><code class="language-text">NullValue</code> - representing <code class="language-text">null</code> - must be handled by all scalars</li>\n</ul>\n<p>If your custom scalar accepts floating-point values, you must be sure to handle all 5 of the\nnumeric types, since queries like <code class="language-text">{ field(arg: 3) }</code> is parsed as an <code class="language-text">IntValue</code> even though\nit is also a valid floating-point number.</p>\n<p>In the sample below, only <code class="language-text">NullValue</code> and <code class="language-text">StringValue</code> need to be handled.</p>\n<p>For any type that is not handled, or when the value cannot be parsed, you must throw an exception.\n<code class="language-text">ThrowLiteralConversionError</code> is provided as a convenient method to facilitate throwing an exception\nwhen the type does not match.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">//in Vector3Type</span>\n\n<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ParseLiteral</span><span class="token punctuation">(</span><span class="token class-name">IValue</span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name">NullValue</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name">StringValue</span> stringValue<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token function">ParseValue</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token function">ThrowLiteralConversionError</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Once the raw string is extracted from the value node, normal parsing can proceed.</p>\n<h3 id="5-prepare-to-accept-code-classlanguage-textvector3code-inputs-from-query-variables-implement-code-classlanguage-textscalargraphtypeparsevaluecode"><a href="#5-prepare-to-accept-code-classlanguage-textvector3code-inputs-from-query-variables-implement-code-classlanguage-textscalargraphtypeparsevaluecode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>5. Prepare to accept <code class="language-text">Vector3</code> inputs from query variables. Implement <code class="language-text">ScalarGraphType.ParseValue</code>.</h3>\n<p>Similar to <code class="language-text">ParseLiteral</code>, you must keep in mind the expected format of values that are likely\nto be presented to this method. For instance, if you are using a JSON deserializer, you may be\npresented with values of any of these types (or more, depending on your deserializer configuration):</p>\n<ul>\n<li><code class="language-text">int</code></li>\n<li><code class="language-text">long</code></li>\n<li><code class="language-text">ulong</code></li>\n<li><code class="language-text">BigInteger</code></li>\n<li><code class="language-text">double</code></li>\n<li><code class="language-text">decimal</code></li>\n<li><code class="language-text">string</code></li>\n<li><code class="language-text">null</code> - must be handled by all scalars</li>\n</ul>\n<p>On top of that, if you are calling this method from <code class="language-text">ParseLiteral</code>, you must handle the types\npassed from it. So if your scalar needs to handle floating-point values, you likely need to handle\n<code class="language-text">int</code>, <code class="language-text">long</code>, <code class="language-text">ulong</code>, <code class="language-text">BigInteger</code>, <code class="language-text">double</code> and <code class="language-text">decimal</code> types.</p>\n<p>For any type that is not handled, or when the value cannot be parsed, you must throw an exception.\n<code class="language-text">ThrowValueConversionError</code> is provided as a convenient method to facilitate throwing an exception\nwhen the type does not match.</p>\n<p>In the sample below, only <code class="language-text">null</code> and <code class="language-text">string</code> types need to be handled.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// In Vector3Type</span>\n\n<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ParseValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name"><span class="token keyword">string</span></span> vector3InputString<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">try</span>\n        <span class="token punctuation">{</span>\n            <span class="token class-name"><span class="token keyword">var</span></span> vector3Parts <span class="token operator">=</span> vector3InputString<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string character">\',\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name"><span class="token keyword">var</span></span> x <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>vector3Parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name"><span class="token keyword">var</span></span> y <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>vector3Parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name"><span class="token keyword">var</span></span> z <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>vector3Parts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">catch</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FormatException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Failed to parse </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">nameof</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> from input \'</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">vector3InputString</span><span class="token punctuation">}</span></span><span class="token string">\'. Input should be a string of three comma-separated floats in X Y Z order, ex. 1.0,2.0,3.0"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token function">ThrowValueConversionError</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="6-implement-code-classlanguage-textscalargraphtypeserializecode-so-code-classlanguage-textvector3code-instances-can-be-sent-to-the-client"><a href="#6-implement-code-classlanguage-textscalargraphtypeserializecode-so-code-classlanguage-textvector3code-instances-can-be-sent-to-the-client" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>6. Implement <code class="language-text">ScalarGraphType.Serialize</code> so <code class="language-text">Vector3</code> instances can be sent to the client.</h3>\n<p>Keep in mind that a <code class="language-text">null</code> value also required to be handled.</p>\n<p>It is recommended that the type of data this method returns match the same type as\nis handled within <code class="language-text">ParseValue</code>. In this case, serialization of <code class="language-text">Vector3</code> is serialized as\na string, which matches the expected data type within <code class="language-text">ParseValue</code>.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// In Vector3Type</span>\n\n<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name">Vector3</span> vector3<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">vector3<span class="token punctuation">.</span>X</span><span class="token punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">vector3<span class="token punctuation">.</span>Y</span><span class="token punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">vector3<span class="token punctuation">.</span>Z</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token function">ThrowSerializationError</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="7-override-code-classlanguage-textscalargraphtypetoastcode-if-necessary"><a href="#7-override-code-classlanguage-textscalargraphtypetoastcode-if-necessary" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>7. Override <code class="language-text">ScalarGraphType.ToAST</code> if necessary.</h3>\n<p>The infrastructure converts default field values to AST representations during initialization\nin order to verify that the default values are valid within an AST tree. The default implementation\ncalls <code class="language-text">Serialize</code> to convert the value to its client-side equivalent, then embeds it into an\nappropriate AST node based on the data type returned from <code class="language-text">Serialize</code>. It is likely you will\nonly need to override this method if you are creating a custom scalar that returns enumeration\nvalues, or if you are returning structured data.</p>\n<h3 id="8-code-first-register-the-net-type-mapping-with-the-schema-optional"><a href="#8-code-first-register-the-net-type-mapping-with-the-schema-optional" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>8. Code-first: Register the .NET type mapping with the schema (optional).</h3>\n<p>In order to allow simple field mappings like <code class="language-text">Field(x =&gt; x.Vector)</code>, you need to register the\ncustom scalar within the schema so that the proper graph type can be selected for the field.\nCall <code class="language-text">RegisterTypeMapping</code> with the CLR data model type and the graph type you want it mapped to.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySchema</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">MySchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token range operator">..</span><span class="token punctuation">.</span>\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterTypeMapping</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Vector3<span class="token punctuation">,</span> Vector3Type<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>This is not necessary if you use the alternate <code class="language-text">Field&lt;T&gt;</code> syntax which specifies the graph type\nto be used for the field, or if your scalar data type is marked with the <code class="language-text">GraphQLMetadata</code>\nattribute setting the <code class="language-text">InputType</code> and/or <code class="language-text">OutputType</code> properties.</p>\n<p>In this example, you created a custom scalar. In summary:</p>\n<ul>\n<li>Create (if necessary) a data class/struct for the server-side representation of the scalar</li>\n<li>Implement a <code class="language-text">ScalarGraphType</code> which handles variable parsing, literal parsing, and serialization</li>\n<li>Register the <code class="language-text">ScalarGraphType</code> within the DI container</li>\n</ul>\n<p>You can also choose to override <code class="language-text">CanParseLiteral</code>, <code class="language-text">CanParseValue</code> or <code class="language-text">IsValidDefault</code> for\nenhanced performance. The default implementations call <code class="language-text">ParseLiteral</code>, <code class="language-text">ParseValue</code> and\n<code class="language-text">ToAST</code> respectively, returning <code class="language-text">false</code> if an exception is caught, or <code class="language-text">true</code> otherwise.\nIf you do choose to implement these methods, note that those methods must not throw an\nexception, and that they are not always called when executing a document.</p>\n<h2 id="vector3-sample-with-combined-stringstructured-parsing-and-serialization"><a href="#vector3-sample-with-combined-stringstructured-parsing-and-serialization" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Vector3 sample with combined string/structured parsing and serialization</h2>\n<p>Keep in mind that the serialized value returned by custom scalar can be anything that the\nenvironment allows. For example it can be a structured object, rather than a simple value.</p>\n<p>So to extend our sample, let\'s assume that we want the Vector3 scalar to instead accept and\nreturn data in a more structured format, in addition to supporting the string format for literals.</p>\n<p>Here is a sample of a variable supporting a more structured format:</p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token keyword">mutation</span> AddVector<span class="token punctuation">(</span><span class="token variable">$vector3</span><span class="token punctuation">:</span> Vector3<span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    addVector<span class="token punctuation">(</span><span class="token attr-name">vector3</span><span class="token punctuation">:</span> <span class="token variable">$vector3</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n//variables\n<span class="token punctuation">{</span>\n    <span class="token string">"vector3"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token string">"x"</span><span class="token punctuation">:</span><span class="token string">"23"</span><span class="token punctuation">,</span>\n        <span class="token string">"y"</span><span class="token punctuation">:</span><span class="token string">"43"</span><span class="token punctuation">,</span>\n        <span class="token string">"z"</span><span class="token punctuation">:</span><span class="token string">"66"</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>And a sample of a response with a vector in a more structured format:</p>\n<div class="gatsby-highlight" data-language="json">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"getVector"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">"x"</span><span class="token operator">:</span><span class="token string">"23"</span><span class="token punctuation">,</span>\n            <span class="token property">"y"</span><span class="token operator">:</span><span class="token string">"43"</span><span class="token punctuation">,</span>\n            <span class="token property">"z"</span><span class="token operator">:</span><span class="token string">"66"</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="1-change-code-classlanguage-textparseliteralcode-to-accept-strings-or-structured-data"><a href="#1-change-code-classlanguage-textparseliteralcode-to-accept-strings-or-structured-data" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>1. Change <code class="language-text">ParseLiteral</code> to accept strings or structured data:</h3>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// In Vector3Type</span>\n\n<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ParseLiteral</span><span class="token punctuation">(</span><span class="token class-name">IValue</span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name">NullValue</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name">StringValue</span> stringValue<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token function">ParseValue</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name">ObjectValue</span> objectValue<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> entries <span class="token operator">=</span> objectValue<span class="token punctuation">.</span>ObjectFields<span class="token punctuation">.</span><span class="token function">ToDictionary</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> x <span class="token operator">=></span> _floatScalar<span class="token punctuation">.</span><span class="token function">ParseLiteral</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>entries<span class="token punctuation">.</span>Count <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span> <span class="token function">ThrowLiteralConversionError</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>entries<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>entries<span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>entries<span class="token punctuation">[</span><span class="token string">"z"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>y<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token function">ThrowLiteralConversionError</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="2-change-code-classlanguage-textparsevaluecode-to-accept-strings-or-structured-data"><a href="#2-change-code-classlanguage-textparsevaluecode-to-accept-strings-or-structured-data" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2. Change <code class="language-text">ParseValue</code> to accept strings or structured data:</h3>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// In Vector3Type</span>\n\n<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ParseValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name"><span class="token keyword">string</span></span> vector3InputString<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">try</span>\n        <span class="token punctuation">{</span>\n            <span class="token class-name"><span class="token keyword">var</span></span> vector3Parts <span class="token operator">=</span> vector3InputString<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string character">\',\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name"><span class="token keyword">var</span></span> x <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>vector3Parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name"><span class="token keyword">var</span></span> y <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>vector3Parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name"><span class="token keyword">var</span></span> z <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>vector3Parts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">catch</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FormatException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Failed to parse </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">nameof</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> from input \'</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">vector3InputString</span><span class="token punctuation">}</span></span><span class="token string">\'. Input should be a string of three comma-separated floats in X Y Z order, ex. 1.0,2.0,3.0"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">></span></span> dictionary<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">try</span>\n        <span class="token punctuation">{</span>\n            <span class="token class-name"><span class="token keyword">var</span></span> x <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToSingle</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name"><span class="token keyword">var</span></span> y <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToSingle</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name"><span class="token keyword">var</span></span> z <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToSingle</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">[</span><span class="token string">"z"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>dictionary<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span>\n                <span class="token keyword">return</span> <span class="token function">ThrowValueConversionError</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">catch</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FormatException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Failed to parse </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">nameof</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> from object. Input should be an object of three floats named X Y and Z"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token function">ThrowValueConversionError</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="3-change-code-classlanguage-textserializecode-to-return-structured-data"><a href="#3-change-code-classlanguage-textserializecode-to-return-structured-data" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3. Change <code class="language-text">Serialize</code> to return structured data.</h3>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// In Vector3Type</span>\n\n<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name">Vector3</span> vector3<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span>\n        <span class="token punctuation">{</span>\n            x <span class="token operator">=</span> vector3<span class="token punctuation">.</span>X<span class="token punctuation">,</span>\n            y <span class="token operator">=</span> vector3<span class="token punctuation">.</span>Y<span class="token punctuation">,</span>\n            z <span class="token operator">=</span> vector3<span class="token punctuation">.</span>Z\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token function">ThrowSerializationError</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="4-change-code-classlanguage-texttoastcode-to-return-an-ast-literal-that-represents-the-data"><a href="#4-change-code-classlanguage-texttoastcode-to-return-an-ast-literal-that-represents-the-data" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4. Change <code class="language-text">ToAST</code> to return an AST literal that represents the data.</h3>\n<p>Since <code class="language-text">Serialize</code> no longer returns a type that can be converted to an AST node, it is\nnecessary to override this method.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// In Vector3Type</span>\n\n<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">IValue</span> <span class="token function">ToAST</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NullValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name">Vector3</span> vector3<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ObjectValue</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ObjectField</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FloatValue</span><span class="token punctuation">(</span>vector3<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ObjectField</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FloatValue</span><span class="token punctuation">(</span>vector3<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ObjectField</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FloatValue</span><span class="token punctuation">(</span>vector3<span class="token punctuation">.</span>Z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token function">ThrowASTConversionError</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>With these changes, a literal or variable can be parsed as a string or as a structured object, and\nis always returned as a structured object.</p>\n<h2 id="valueconverter"><a href="#valueconverter" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ValueConverter</h2>\n<p>When <code class="language-text">GetArgument&lt;T&gt;</code> is called, the argument value is coerced to the requested type via the <code class="language-text">ValueConverter</code>.\nNo conversion takes place when the requested type matches the type of the object or scalar (the type returned from\n<code class="language-text">ParseLiteral</code> or <code class="language-text">ParseValue</code>). But you can also use the value converter to assist with input deserialization.</p>\n<p>For instance, you may be using <code class="language-text">IdGraphType</code> within your schema as unique identifiers for your data objects. Pursuant\nto the GraphQL specification, these identifiers may be passed as strings such as in the below example:</p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token punctuation">{</span>\n    widget <span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        name\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>However, your code may use integer identifiers in the data access layer. So when you call <code class="language-text">context.GetArgument&lt;int&gt;(&quot;id&quot;)</code>,\nGraphQL.NET calls the value converter to convert the string to an integer.</p>\n<p>The value converter can be extended globally by calling the static method <code class="language-text">Register</code> as follows:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp">ValueConverter<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Vector3<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span>v <span class="token operator">=></span> <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">v<span class="token punctuation">.</span>X</span><span class="token punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">v<span class="token punctuation">.</span>Y</span><span class="token punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">v<span class="token punctuation">.</span>Z</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>The above method registers a conversion from the <code class="language-text">Vector3</code> struct to a <code class="language-text">string</code>. Since the registration is static,\nit should only be done once per application lifetime. For instance, in a static constructor of your schema.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySchema</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Schema</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token function">MySchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        ValueConverter<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Vector3<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span>v <span class="token operator">=></span> <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">v<span class="token punctuation">.</span>X</span><span class="token punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">v<span class="token punctuation">.</span>Y</span><span class="token punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">v<span class="token punctuation">.</span>Z</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token range operator">..</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="null-values"><a href="#null-values" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Null values</h2>\n<p>Custom scalars process and handle null values during serialization and deserialization. For instance,\nlet\'s say you have a database where database ID values of 0 should be represented as GraphQL \'null\'\nvalues. You could of course write code within the field resolver to translate the values, or you may\nutilize a custom scalar to translate the values for you. The below example of a custom scalar does\nthis and also rejects external values that are not strings containing integers, and rejects 0 or negative values:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DbIdGraphType</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScalarGraphType</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">DbIdGraphType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Name <span class="token operator">=</span> <span class="token string">"DbId"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ParseLiteral</span><span class="token punctuation">(</span><span class="token class-name">IValue</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">value</span> <span class="token keyword">switch</span>\n    <span class="token punctuation">{</span>\n        <span class="token return-type class-name">StringValue</span> s <span class="token operator">=></span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> i<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">?</span> i <span class="token punctuation">:</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FormatException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"\'</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">s<span class="token punctuation">.</span>Value</span><span class="token punctuation">}</span></span><span class="token string">\' is not a valid identifier."</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name">NullValue</span> _ <span class="token operator">=></span> <span class="token number">0</span><span class="token punctuation">,</span>\n        _ <span class="token operator">=></span> <span class="token function">ThrowLiteralConversionError</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ParseValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">value</span> <span class="token keyword">switch</span>\n    <span class="token punctuation">{</span>\n        <span class="token return-type class-name"><span class="token keyword">string</span></span> s <span class="token operator">=></span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> i<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">?</span> i <span class="token punctuation">:</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FormatException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"\'</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">s</span><span class="token punctuation">}</span></span><span class="token string">\' is not a valid identifier."</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">null</span> <span class="token operator">=></span> <span class="token number">0</span><span class="token punctuation">,</span>\n        _ <span class="token operator">=></span> <span class="token function">ThrowValueConversionError</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">value</span> <span class="token keyword">switch</span>\n    <span class="token punctuation">{</span>\n        <span class="token return-type class-name"><span class="token keyword">int</span></span> i <span class="token operator">=></span> i <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">?</span> i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> <span class="token function">ThrowSerializationError</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        _ <span class="token operator">=></span> <span class="token function">ThrowSerializationError</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="replacing-built-in-scalar-types"><a href="#replacing-built-in-scalar-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Replacing built-in scalar types</h2>\n<p>In some cases you may want or need to replace the functionality of the built-in graph types. This can\nbe accomplished by registering a replacement scalar before the schema has been initialized. Keep in\nmind that replacing a built-in type may affect the operation of introspection queries.</p>\n<p>In order to replace a built-in scalar graph type, the new scalar graph type must:</p>\n<ol>\n<li>inherit from the scalar graph type it is replacing; and</li>\n<li>have the <code class="language-text">Name</code> property set to the name of the built-in graph type.</li>\n</ol>\n<p>You may then override any of the members to provide custom implementations. Note that most of the\nbuilt-in scalars override <code class="language-text">CanParseLiteral</code>, so it may be necessary to override that method if you\noverride <code class="language-text">ParseLiteral</code>. Check the source code for the built-in scalar type you are overriding for\nfurther reference.</p>\n<p>Below is a sample of how to replace the built-in <code class="language-text">BooleanGraphType</code> so it will accept 0 and non-zero\nvalues to represent <code class="language-text">false</code> and <code class="language-text">true</code>.</p>\n<h3 id="1-create-a-new-scalar-graph-type-code-classlanguage-textmybooleangraphtypecode-inherit-from-code-classlanguage-textbooleangraphtypecode-and-set"><a href="#1-create-a-new-scalar-graph-type-code-classlanguage-textmybooleangraphtypecode-inherit-from-code-classlanguage-textbooleangraphtypecode-and-set" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>1. Create a new scalar graph type <code class="language-text">MyBooleanGraphType</code>. Inherit from <code class="language-text">BooleanGraphType</code> and set</h3>\n<p>the name to be <code class="language-text">Boolean</code>.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBooleanGraphType</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BooleanGraphType</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">MyBooleanGraphType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Name <span class="token operator">=</span> <span class="token string">"Boolean"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="2-override-the-methods-as-necessary-in-this-case-we-must-override-all-of-them-except-code-classlanguage-textserializecode-and-code-classlanguage-textisvaliddefaultcode"><a href="#2-override-the-methods-as-necessary-in-this-case-we-must-override-all-of-them-except-code-classlanguage-textserializecode-and-code-classlanguage-textisvaliddefaultcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2. Override the methods as necessary; in this case we must override all of them except <code class="language-text">Serialize</code> and <code class="language-text">IsValidDefault</code>.</h3>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBooleanGraphType</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BooleanGraphType</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">MyBooleanGraphType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Name <span class="token operator">=</span> <span class="token string">"Boolean"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ParseLiteral</span><span class="token punctuation">(</span><span class="token class-name">IValue</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">value</span> <span class="token keyword">switch</span>\n    <span class="token punctuation">{</span>\n        <span class="token return-type class-name">BooleanValue</span> b <span class="token operator">=></span> b<span class="token punctuation">.</span>Value<span class="token punctuation">,</span>\n        <span class="token return-type class-name">IntValue</span> i <span class="token operator">=></span> <span class="token function">ParseValue</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name">LongValue</span> l <span class="token operator">=></span> <span class="token function">ParseValue</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name">BigIntValue</span> bi <span class="token operator">=></span> <span class="token function">ParseValue</span><span class="token punctuation">(</span>bi<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name">StringValue</span> s <span class="token operator">=></span> <span class="token function">ParseValue</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name">FloatValue</span> f <span class="token operator">=></span> <span class="token function">ParseValue</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name">DecimalValue</span> d <span class="token operator">=></span> <span class="token function">ParseValue</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name">NullValue</span> _ <span class="token operator">=></span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n        _ <span class="token operator">=></span> <span class="token function">ThrowLiteralConversionError</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CanParseLiteral</span><span class="token punctuation">(</span><span class="token class-name">IValue</span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">try</span>\n        <span class="token punctuation">{</span>\n            _ <span class="token operator">=</span> <span class="token function">ParseLiteral</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">catch</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ParseValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">value</span> <span class="token keyword">switch</span>\n    <span class="token punctuation">{</span>\n        <span class="token return-type class-name"><span class="token keyword">bool</span></span> _ <span class="token operator">=></span> <span class="token keyword">value</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name"><span class="token keyword">byte</span></span> b <span class="token operator">=></span> b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name"><span class="token keyword">sbyte</span></span> sb <span class="token operator">=></span> sb <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name"><span class="token keyword">short</span></span> s <span class="token operator">=></span> s <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name"><span class="token keyword">ushort</span></span> us <span class="token operator">=></span> us <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name"><span class="token keyword">int</span></span> i <span class="token operator">=></span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name"><span class="token keyword">uint</span></span> ui <span class="token operator">=></span> ui <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name"><span class="token keyword">long</span></span> l <span class="token operator">=></span> l <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name"><span class="token keyword">ulong</span></span> ul <span class="token operator">=></span> ul <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name">BigInteger</span> bi <span class="token operator">=></span> bi <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name"><span class="token keyword">float</span></span> f <span class="token operator">=></span> f <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name"><span class="token keyword">double</span></span> d <span class="token operator">=></span> d <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name"><span class="token keyword">decimal</span></span> d <span class="token operator">=></span> d <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token return-type class-name"><span class="token keyword">string</span></span> s <span class="token operator">=></span> <span class="token keyword">bool</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">null</span> <span class="token operator">=></span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n        _ <span class="token operator">=></span> <span class="token function">ThrowValueConversionError</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CanParseValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">try</span>\n        <span class="token punctuation">{</span>\n            _ <span class="token operator">=</span> <span class="token function">ParseValue</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">catch</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">IValue</span> <span class="token function">ToAST</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token keyword">switch</span>\n    <span class="token punctuation">{</span>\n        <span class="token return-type class-name"><span class="token keyword">bool</span></span> b <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BooleanValue</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">null</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NullValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        _ <span class="token operator">=></span> <span class="token function">ThrowASTConversionError</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="3-register-the-custom-scalar-within-your-schema"><a href="#3-register-the-custom-scalar-within-your-schema" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3. Register the custom scalar within your schema.</h3>\n<p>The final step is to register an instance of the custom scalar within the schema. This can be\ndone for code-first or schema-first schemas. For code-first schemas, register it within\nyour constructor via <code class="language-text">RegisterType</code>, as follows:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySchema</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Schema</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MySchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Query <span class="token operator">=</span> <span class="token range operator">..</span><span class="token range operator">..</span><span class="token punctuation">;</span>\n\n        <span class="token function">RegisterType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyBooleanGraphType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>For schema-first schemas, register it immediately after calling <code class="language-text">Schema.For</code> to create the schema.\nImmediately after calling <code class="language-text">Schema.For</code> the schema is not yet initialized, therefore allowing registration of types.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> schema <span class="token operator">=</span> Schema<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nschema<span class="token punctuation">.</span><span class="token function">RegisterType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyBooleanGraphType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Now all <code class="language-text">BooleanGraphType</code> references in your schema will utilize the new <code class="language-text">MyBooleanGraphType</code>\nregistered within the schema. This technique can be used to replace any of the built-in graph types.</p>\n<p>Note that if you set the <code class="language-text">ResolvedType</code> property of a field or argument to an instance of a built-in\ntype, or provide an instance of a built-in type to an applicable constructor, it will not be replaced\nwith your registered replacement built-in type. For example, consider this code:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token generic-method"><span class="token function">Field</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>StringGraphType<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"sample"</span><span class="token punctuation">,</span>\n    <span class="token named-parameter punctuation">arguments</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryArguments</span> <span class="token punctuation">{</span>\n        <span class="token comment">// will be replaced with MyBooleanGraphType</span>\n        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryArgument<span class="token punctuation">&lt;</span>BooleanGraphType<span class="token punctuation">></span></span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"argNewBehavior"</span> <span class="token punctuation">}</span>\n\n        <span class="token comment">// will retain default behavior</span>\n        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryArgument</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">BooleanGraphType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"argOldBehavior"</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token named-parameter punctuation">resolve</span><span class="token punctuation">:</span> <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>This is by design. However, you can call the <code class="language-text">ReplaceScalar</code> extension method after the schema is\nbuilt, which will walk through all the graph types configured on the schema and replace any remaining\nreferences of the "Boolean" scalar graph type with references to your replacement scalar graph type.\nThe scalar to be replaced is matched based on the name of the scalar.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> schema <span class="token operator">=</span> Schema<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nschema<span class="token punctuation">.</span><span class="token function">ReplaceScalar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyBooleanGraphType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>',
fields:{relativePath:"docs/getting-started/custom-scalars.md"}},site:{siteMetadata:{githubEditUrl:"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site"}}},pathContext:{relativePath:"docs/getting-started/custom-scalars.md"}}}});
//# sourceMappingURL=path---docs-getting-started-custom-scalars-1b011c11d0cc7b648509.js.map