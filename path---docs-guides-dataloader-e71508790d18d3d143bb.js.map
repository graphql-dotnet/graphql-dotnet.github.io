{"version":3,"sources":["webpack:///path---docs-guides-dataloader-e71508790d18d3d143bb.js","webpack:///./.cache/json/docs-guides-dataloader.json"],"names":["webpackJsonp","339","module","exports","data","markdownRemark","html","fields","relativePath","site","siteMetadata","githubEditUrl","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAAyo5FC,QAA8CC,aAAA,8BAA4CC,MAASC,cAAgBC,cAAA,6EAA4FC,aAAgBJ,aAAA","file":"path---docs-guides-dataloader-e71508790d18d3d143bb.js","sourcesContent":["webpackJsonp([67274500541493],{\n\n/***/ 339:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"dataloader\\\"><a href=\\\"#dataloader\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>DataLoader</h1>\\n<p>GraphQL.NET includes an implementation of Facebook's <a href=\\\"https://github.com/facebook/dataloader\\\">DataLoader</a> within the\\n<a href=\\\"https://www.nuget.org/packages/GraphQL.DataLoader\\\"><code class=\\\"language-text\\\">GraphQL.DataLoader</code></a> NuGet package.</p>\\n<p>Consider a GraphQL query like this:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token property-query\\\">orders</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">date</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"2017-01-01\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token property\\\">orderId</span>\\n\\t\\t<span class=\\\"token property\\\">date</span>\\n\\t\\t<span class=\\\"token object\\\">user</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token property\\\">userId</span>\\n\\t\\t\\t<span class=\\\"token property\\\">firstName</span>\\n\\t\\t\\t<span class=\\\"token property\\\">lastName</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>When the query is executed, first a list of orders is fetched. Then for each order, the associated user must also be fetched. If each user is fetched one-by-one, this would get more inefficient as the number of orders (N) grows. This is known as the N+1 problem. If there are 50 orders (N = 50), 51 separate requests would be made to load this data.</p>\\n<p>A DataLoader helps in two ways:</p>\\n<ol>\\n<li>Similar operations are batched together. This can make fetching data over a network much more efficient.</li>\\n<li>Fetched values are cached so if they are requested again, the cached value is returned.</li>\\n</ol>\\n<p>In the example above, a using a DataLoader will allow us to batch together all of the requests for the users. So there would be 1 request to retrieve the list of orders and 1 request to load all users associated with those orders. This would always be a total of 2 requests rather than N+1.</p>\\n<h2 id=\\\"setup\\\"><a href=\\\"#setup\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Setup</h2>\\n<ol>\\n<li>Register <code class=\\\"language-text\\\">IDataLoaderContextAccessor</code> in your IoC container.</li>\\n<li>Register <code class=\\\"language-text\\\">DataLoaderDocumentListener</code> in your IoC container.</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IDataLoaderContextAccessor<span class=\\\"token punctuation\\\">,</span> DataLoaderContextAccessor<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nservices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DataLoaderDocumentListener<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<ol start=\\\"3\\\">\\n<li>Hook up your GraphQL schema to your IoC container.</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MySchema</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">Schema</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MySchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IServiceProvider</span> services<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span>services<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MySchema<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<ol start=\\\"4\\\">\\n<li>Add the <code class=\\\"language-text\\\">DataLoaderDocumentListener</code> to the <code class=\\\"language-text\\\">DocumentExecuter</code>.</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> listener <span class=\\\"token operator\\\">=</span> Services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DataLoaderDocumentListener<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> executer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">DocumentExecuter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> result <span class=\\\"token operator\\\">=</span> executer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ExecuteAsync</span><span class=\\\"token punctuation\\\">(</span>opts <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\n\\t<span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span>\\n\\n\\topts<span class=\\\"token punctuation\\\">.</span>Listeners<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Add</span><span class=\\\"token punctuation\\\">(</span>listener<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h2>\\n<p>First, inject the <code class=\\\"language-text\\\">IDataLoaderContextAccessor</code> into your GraphQL type class.</p>\\n<p>Then use the <code class=\\\"language-text\\\">Context</code> property on the accessor to get the current <code class=\\\"language-text\\\">DataLoaderContext</code>. The <code class=\\\"language-text\\\">DataLoaderDocumentListener</code> configured above ensures that each request will have its own context instance.</p>\\n<p>Use one of the \\\"GetOrAddLoader\\\" methods on the <code class=\\\"language-text\\\">DataLoaderContext</code>. These methods all require a string key to uniquely identify each loader. They also require a delegate for fetching the data. Each method will get an existing loader or add a new one, identified by the string key. Each method has various overloads to support different ways to load and map data with the keys.</p>\\n<p>Call <code class=\\\"language-text\\\">LoadAsync()</code> on the data loader. This will queue the request and return a <code class=\\\"language-text\\\">IDataLoaderResult&lt;T></code>. If the result has already been cached, the returned value will be pulled from the cache.</p>\\n<p>The <code class=\\\"language-text\\\">ExecutionStrategy</code> will dispatch queued data loaders after all other pending fields have been resolved.</p>\\n<p>If your code requires an asynchronous call prior to queuing the data loader, use the <code class=\\\"language-text\\\">ResolveAsync</code> field builder method to return a\\n<code class=\\\"language-text\\\">Task&lt;IDataLoaderResult&lt;T>></code>. The execution strategy will start executing the asynchronous code as soon as the field resolver executes.\\nOnce the <code class=\\\"language-text\\\">IDataLoaderResult&lt;T></code> is retrieved from the asynchronous task, the data loader will be queued to be dispatched once all\\nother pending fields have been resolved.</p>\\n<p>To execute code within the resolver after the data loader has retrieved the data, pass a delegate to the <code class=\\\"language-text\\\">Then</code> extension\\nmethod of the returned <code class=\\\"language-text\\\">IDataLoaderResult&lt;T></code>. You can use a synchronous or asynchronous delegate, and it can return another\\n<code class=\\\"language-text\\\">IDataLoaderResult&lt;T></code> if you wish to chain dataloaders together. This may result in the field builder's Resolve delegate\\nsignature looking like <code class=\\\"language-text\\\">IDataLoaderResult&lt;IDataLoaderResult&lt;T>></code>, which is correct and will be handled properly by the execution strategy.</p>\\n<h2 id=\\\"examples\\\"><a href=\\\"#examples\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Examples</h2>\\n<p>This is an example of using a DataLoader to batch requests for loading items by a key. <code class=\\\"language-text\\\">LoadAsync()</code> is called by the field resolver for each Order. <code class=\\\"language-text\\\">IUsersStore.GetUsersByIdAsync()</code> will be called with the batch of userIds that were requested.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">OrderType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType<span class=\\\"token punctuation\\\">&lt;</span>Order<span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Inject the IDataLoaderContextAccessor to access the current DataLoaderContext</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">OrderType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IDataLoaderContextAccessor</span> accessor<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IUsersStore</span> users<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span>\\n\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>UserType<span class=\\\"token punctuation\\\">,</span> User<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"User\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// Get or add a batch loader with the key \\\"GetUsersById\\\"</span>\\n                <span class=\\\"token comment\\\">// The loader will call GetUsersByIdAsync for each batch of keys</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> loader <span class=\\\"token operator\\\">=</span> accessor<span class=\\\"token punctuation\\\">.</span>Context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetOrAddBatchLoader</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> User<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"GetUsersById\\\"</span><span class=\\\"token punctuation\\\">,</span> users<span class=\\\"token punctuation\\\">.</span>GetUsersByIdAsync<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token comment\\\">// Add this UserId to the pending keys to fetch</span>\\n                <span class=\\\"token comment\\\">// The execution strategy will trigger the data loader to fetch the data via GetUsersByIdAsync() at the</span>\\n                <span class=\\\"token comment\\\">//   appropriate time, and the field will be resolved with an instance of User once GetUsersByIdAsync()</span>\\n                <span class=\\\"token comment\\\">//   returns with the batched results</span>\\n                <span class=\\\"token keyword\\\">return</span> loader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">LoadAsync</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token punctuation\\\">.</span>UserId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IUsersStore</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// This will be called by the loader for all pending keys</span>\\n    <span class=\\\"token comment\\\">// Note that fetch delegates can accept a CancellationToken parameter or not</span>\\n    <span class=\\\"token return-type class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span>IDictionary<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> User<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">GetUsersByIdAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span> userIds<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">CancellationToken</span> cancellationToken<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>This is an example of using a DataLoader to batch requests for loading a collection of items by a key. This is used when a key may be associated with more than one item. <code class=\\\"language-text\\\">LoadAsync()</code> is called by the field resolver for each User. A User can have zero to many Orders. <code class=\\\"language-text\\\">IOrdersStore.GetOrdersByUserIdAsync</code> will be called with a batch of userIds that have been requested.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType<span class=\\\"token punctuation\\\">&lt;</span>User<span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Inject the IDataLoaderContextAccessor to access the current DataLoaderContext</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">UserType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IDataLoaderContextAccessor</span> accessor<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IOrdersStore</span> orders<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span>\\n\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>ListGraphType<span class=\\\"token punctuation\\\">&lt;</span>OrderType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">,</span> IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>Order<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Orders\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>ctx <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// Get or add a collection batch loader with the key \\\"GetOrdersByUserId\\\"</span>\\n                <span class=\\\"token comment\\\">// The loader will call GetOrdersByUserIdAsync with a batch of keys</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> ordersLoader <span class=\\\"token operator\\\">=</span> accessor<span class=\\\"token punctuation\\\">.</span>Context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetOrAddCollectionBatchLoader</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"GetOrdersByUserId\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                    orders<span class=\\\"token punctuation\\\">.</span>GetOrdersByUserIdAsync<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token comment\\\">// Add this UserId to the pending keys to fetch data for</span>\\n                <span class=\\\"token comment\\\">// The execution strategy will trigger the data loader to fetch the data via GetOrdersByUserId() at the</span>\\n                <span class=\\\"token comment\\\">//   appropriate time, and the field will be resolved with an instance of IEnumerable&lt;Order> once</span>\\n                <span class=\\\"token comment\\\">//   GetOrdersByUserId() returns with the batched results</span>\\n                <span class=\\\"token keyword\\\">return</span> ordersLoader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">LoadAsync</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token punctuation\\\">.</span>UserId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">OrdersStore</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">IOrdersStore</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token return-type class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span>ILookup<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">GetOrdersByUserIdAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span> userIds<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> orders <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token comment\\\">// load data from database</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">return</span> orders\\n\\t\\t\\t<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToLookup</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">.</span>UserId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>This is an example of using a DataLoader without batching. This could be useful if the data may be requested multiple times. The result will be cached the first time. Subsequent calls to <code class=\\\"language-text\\\">LoadAsync()</code> will return the cached result.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">QueryType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Inject the IDataLoaderContextAccessor to access the current DataLoaderContext</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">QueryType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IDataLoaderContextAccessor</span> accessor<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IUsersStore</span> users<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>ListGraphType<span class=\\\"token punctuation\\\">&lt;</span>UserType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">,</span> IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>User<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Users\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Get all Users\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>ctx <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// Get or add a loader with the key \\\"GetAllUsers\\\"</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> loader <span class=\\\"token operator\\\">=</span> accessor<span class=\\\"token punctuation\\\">.</span>Context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetOrAddLoader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"GetAllUsers\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> users<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetAllUsersAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token comment\\\">// Prepare the load operation</span>\\n                <span class=\\\"token comment\\\">// If the result is cached, a completed Task&lt;IEnumerable&lt;User>> will be returned</span>\\n                <span class=\\\"token keyword\\\">return</span> loader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">LoadAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IUsersStore</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token return-type class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span>IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>User<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">GetAllUsersAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>This is an example of using two chained DataLoaders to batch requests together, with asynchronous code before the data loaders execute, and post-processing afterwards.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType<span class=\\\"token punctuation\\\">&lt;</span>User<span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Inject the IDataLoaderContextAccessor to access the current DataLoaderContext</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">UserType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IDataLoaderContextAccessor</span> accessor<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IUsersStore</span> users<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IOrdersStore</span> orders<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IItemsStore</span> items<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span>\\n\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>ListGraphType<span class=\\\"token punctuation\\\">&lt;</span>ItemType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">,</span> IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>Item<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"OrderedItems\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">async</span> context <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// Asynchronously authenticate</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> valid <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> users<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">CanViewOrders</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token punctuation\\\">.</span>UserId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>valid<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n                \\n                <span class=\\\"token comment\\\">// Get or add a collection batch loader with the key \\\"GetOrdersByUserId\\\"</span>\\n                <span class=\\\"token comment\\\">// The loader will call GetOrdersByUserIdAsync with a batch of keys</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> ordersLoader <span class=\\\"token operator\\\">=</span> accessor<span class=\\\"token punctuation\\\">.</span>Context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetOrAddCollectionBatchLoader</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"GetOrdersByUserId\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                    orders<span class=\\\"token punctuation\\\">.</span>GetOrdersByUserIdAsync<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> ordersResult <span class=\\\"token operator\\\">=</span> ordersLoader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">LoadAsync</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token punctuation\\\">.</span>UserId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token comment\\\">// Once the orders have been retrieved by the first data loader, feed the order IDs into</span>\\n                <span class=\\\"token comment\\\">//   the second data loader</span>\\n                <span class=\\\"token keyword\\\">return</span> ordersResult<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>orders<span class=\\\"token punctuation\\\">,</span> cancellationToken<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n                <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token comment\\\">// Collect all of the order IDs</span>\\n                    <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> orderIds <span class=\\\"token operator\\\">=</span> orders<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Select</span><span class=\\\"token punctuation\\\">(</span>o <span class=\\\"token operator\\\">=></span> o<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                    <span class=\\\"token comment\\\">// Get or add a collection batch loader with the key \\\"GetItemsByOrderId\\\"</span>\\n                    <span class=\\\"token comment\\\">// The loader will call GetItemsByOrderId with a batch of keys</span>\\n                    <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> itemsLoader <span class=\\\"token operator\\\">=</span> accessor<span class=\\\"token punctuation\\\">.</span>Context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetOrAddCollectionBatchLoader</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Item<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"GetItemsByOrderId\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                        items<span class=\\\"token punctuation\\\">.</span>GetItemsByOrderIdAsync<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                    <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> itemsResults <span class=\\\"token operator\\\">=</span> itemsLoader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">LoadAsync</span><span class=\\\"token punctuation\\\">(</span>orderIds<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                    <span class=\\\"token comment\\\">// itemsResults is of type IDataLoaderResult&lt;IEnumerable&lt;Item>[]> so the array needs to be flattened</span>\\n                    <span class=\\\"token comment\\\">//   before returning it back to the query</span>\\n                    <span class=\\\"token keyword\\\">return</span> itemsResults<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Then</span><span class=\\\"token punctuation\\\">(</span>itemResultSet <span class=\\\"token operator\\\">=></span>\\n                    <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token comment\\\">// Flatten the results after the second dataloader has finished</span>\\n                        <span class=\\\"token keyword\\\">return</span> flattenedResults <span class=\\\"token operator\\\">=</span> itemResultSet<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SelectMany</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IUsersStore</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// This will be called for each call to OrderedItems, prior to any data loader execution</span>\\n    <span class=\\\"token return-type class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">bool</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">CanViewOrders</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">int</span></span> userId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IOrdersStore</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// This will be called by the \\\"order\\\" loader for all pending keys</span>\\n    <span class=\\\"token comment\\\">// Note that fetch delegates can accept a CancellationToken parameter or not</span>\\n    <span class=\\\"token return-type class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span>ILookup<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">GetOrdersByUserIdAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span> userIds<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">CancellationToken</span> cancellationToken<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IItemsStore</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// This will be called by the \\\"item\\\" loader for all pending keys</span>\\n    <span class=\\\"token comment\\\">// Note that fetch delegates can accept a CancellationToken parameter or not</span>\\n    <span class=\\\"token return-type class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span>ILookup<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Item<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">GetItemsByOrderIdAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span> orderIds<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">CancellationToken</span> cancellationToken<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<blockquote>\\n<p>See this <a href=\\\"https://fiyazhasan.me/graphql-with-net-core-part-xi-dataloader/\\\">blog series</a> for an in depth example using Entity Framework.</p>\\n</blockquote>\\n<h2 id=\\\"exceptions\\\"><a href=\\\"#exceptions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Exceptions</h2>\\n<p>Exceptions within data loaders' fetch delegates are passed back to the execution strategy for all associated fields.\\nIf you have a need to capture exceptions raised by the fetch delegate, create a <code class=\\\"language-text\\\">new SimpleDataLoader&lt;T></code> within\\nyour field resolver (do not use the <code class=\\\"language-text\\\">IDataLoaderContextAccessor</code> for this) and have its fetch delegate await the\\n<code class=\\\"language-text\\\">IDataLoaderResult&lt;T>.GetResultAsync</code> method of the result obtained from the first data loader within a try/catch\\nblock. Return the result of the simple data loader's <code class=\\\"language-text\\\">LoadAsync()</code> function to the field resolver.  The data loader\\nwill still load at the appropriate time, and you can handle exceptions as desired.</p>\\n<h2 id=\\\"di-based-data-loaders\\\"><a href=\\\"#di-based-data-loaders\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>DI-based data loaders</h2>\\n<p>The above instructions describe how to use the data loader context and accessor classes to create data loaders scoped\\nto the current request. You can also use dependency injection to register a data loader instance. This can eliminate\\nduplicated code if you call the same data loader from different field resolvers. It can also help to prevent\\nunforseen bugs due to a data loader fetch delegate capturing variables from a field resolver's scope.</p>\\n<p>To create a custom and register a custom data loader instance, first create a class and inherit <code class=\\\"language-text\\\">DataLoaderBase&lt;TKey, T></code>.\\nOverride the <code class=\\\"language-text\\\">FetchAsync</code> method with the code to retrieve the data based on the provided keys. Call <code class=\\\"language-text\\\">SetResult</code> on\\neach provided <code class=\\\"language-text\\\">DataLoaderPair</code> to set the result. Feel free to use dependency injection to rely on any scoped services\\nnecessary to facilitate execution of the fetch method. See below sample:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Order</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">int</span></span> Id <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">string</span></span> ShipToName <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">OrderItem</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">int</span></span> Id <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">int</span></span> OrderId <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">string</span></span> ItemName <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// similar to BatchDataLoader</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyOrderDataLoader</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">DataLoaderBase<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">readonly</span> <span class=\\\"token class-name\\\">MyDbContext</span> _dbContext<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyOrderDataLoader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">MyDbContext</span> dataContext<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        _dbContext <span class=\\\"token operator\\\">=</span> dataContext<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token return-type class-name\\\">Task</span> <span class=\\\"token function\\\">FetchAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> list<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">CancellationToken</span> cancellationToken<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span> ids <span class=\\\"token operator\\\">=</span> list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Select</span><span class=\\\"token punctuation\\\">(</span>pair <span class=\\\"token operator\\\">=></span> pair<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token class-name\\\">IDictionary<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> _dbContext<span class=\\\"token punctuation\\\">.</span>Orders<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Where</span><span class=\\\"token punctuation\\\">(</span>order <span class=\\\"token operator\\\">=></span> ids<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Contains</span><span class=\\\"token punctuation\\\">(</span>order<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToDictionaryAsync</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">,</span> cancellationToken<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span> entry <span class=\\\"token keyword\\\">in</span> list<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            entry<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SetResult</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">.</span>TryGetValue<span class=\\\"token class-name\\\"><span class=\\\"token punctuation\\\">(</span>entry<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">out</span> <span class=\\\"token keyword\\\">var</span> order<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">?</span></span> order <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// similar to CollectionBatchDataLoader</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyOrderItemsDataLoader</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">DataLoaderBase<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>OrderItem<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">readonly</span> <span class=\\\"token class-name\\\">MyDbContext</span> _dbContext<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyOrderItemsDataLoader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">MyDbContext</span> dataContext<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        _dbContext <span class=\\\"token operator\\\">=</span> dataContext<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token return-type class-name\\\">Task</span> <span class=\\\"token function\\\">FetchAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>OrderItem<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> list<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">CancellationToken</span> cancellationToken<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span> ids <span class=\\\"token operator\\\">=</span> list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Select</span><span class=\\\"token punctuation\\\">(</span>pair <span class=\\\"token operator\\\">=></span> pair<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>OrderItem<span class=\\\"token punctuation\\\">></span></span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> _dbContext<span class=\\\"token punctuation\\\">.</span>OrderItems<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Where</span><span class=\\\"token punctuation\\\">(</span>orderItem <span class=\\\"token operator\\\">=></span> ids<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Contains</span><span class=\\\"token punctuation\\\">(</span>orderItem<span class=\\\"token punctuation\\\">.</span>OrderId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToListAsync</span><span class=\\\"token punctuation\\\">(</span>cancellationToken<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token class-name\\\">ILookup<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> OrderItem<span class=\\\"token punctuation\\\">></span></span> dataLookup <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToLookup</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">.</span>OrderId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>OrderItem<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> entry <span class=\\\"token keyword\\\">in</span> list<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            entry<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SetResult</span><span class=\\\"token punctuation\\\">(</span>dataLookup<span class=\\\"token punctuation\\\">[</span>entry<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>You will need to register the data loader as a scoped service within your DI framework.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddScoped</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyOrderDataLoader<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nservices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddScoped</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyOrderItemsDataLoader<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Then within your field resolvers, access the data loader via the <code class=\\\"language-text\\\">RequestServices</code> property and call <code class=\\\"language-text\\\">LoadAsync</code> as before:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyQuery</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>OrderType<span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Order\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Argument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IdGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// Get the custom data loader</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> loader <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span>RequestServices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyOrderDataLoader<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token comment\\\">// Add this UserId to the pending keys to fetch.</span>\\n                <span class=\\\"token comment\\\">// The execution strategy will trigger the data loader to fetch the data via MyOrderDataLoader.FetchAsync() at the</span>\\n                <span class=\\\"token comment\\\">// appropriate time, and the field will be resolved with an instance of Order once FetchAsync()</span>\\n                <span class=\\\"token comment\\\">// returns with the batched results</span>\\n                <span class=\\\"token keyword\\\">return</span> loader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">LoadAsync</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">OrderType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType<span class=\\\"token punctuation\\\">&lt;</span>Order<span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">OrderType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token named-parameter punctuation\\\">type</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">typeof</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token type-expression class-name\\\">IdGraphType</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">.</span>ShipToName<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>ListGraphType<span class=\\\"token punctuation\\\">&lt;</span>OrderItemType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">,</span> IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>OrderItem<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Items\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> loader <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span>RequestServices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyOrderItemsDataLoader<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> loader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">LoadAsync</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>You do not need to use <code class=\\\"language-text\\\">IDataLoaderContextAccessor</code> or <code class=\\\"language-text\\\">DataLoaderDocumentListener</code> and may remove those references\\nfrom your code.</p>\\n<h2 id=\\\"singleton-di-based-data-loader-instances\\\"><a href=\\\"#singleton-di-based-data-loader-instances\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Singleton DI-based data loader instances</h2>\\n<p>If you wish to register the data loader as a singleton, be sure to disable caching by calling <code class=\\\"language-text\\\">: base(false)</code> in\\nthe constructor, as the cache entries never expire. You will also need to be sure your code does not rely on any\\nscoped services, or create a dedicated service scope within the fetch method as shown below.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyOrderDataLoader</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">DataLoaderBase<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">readonly</span> <span class=\\\"token class-name\\\">IServiceProvider</span> _rootServiceProvider<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyOrderDataLoader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IServiceProvider</span> serviceProvider<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        _rootServiceProvider <span class=\\\"token operator\\\">=</span> serviceProvider<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token return-type class-name\\\">Task</span> <span class=\\\"token function\\\">FetchAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> list<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">CancellationToken</span> cancellationToken<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">using</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> scope <span class=\\\"token operator\\\">=</span> _rootServiceProvider<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">CreateScope</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token class-name\\\">MyDbContext</span> dbContext <span class=\\\"token operator\\\">=</span> scope<span class=\\\"token punctuation\\\">.</span>ServiceProvider<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyDbContext<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span> ids <span class=\\\"token operator\\\">=</span> list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Select</span><span class=\\\"token punctuation\\\">(</span>pair <span class=\\\"token operator\\\">=></span> pair<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token class-name\\\">IDictionary<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> dbContext<span class=\\\"token punctuation\\\">.</span>Orders<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Where</span><span class=\\\"token punctuation\\\">(</span>order <span class=\\\"token operator\\\">=></span> ids<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Contains</span><span class=\\\"token punctuation\\\">(</span>order<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToDictionaryAsync</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">,</span> cancellationToken<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span> entry <span class=\\\"token keyword\\\">in</span> list<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                entry<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SetResult</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">.</span>TryGetValue<span class=\\\"token class-name\\\"><span class=\\\"token punctuation\\\">(</span>entry<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">out</span> <span class=\\\"token keyword\\\">var</span> order<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">?</span></span> order <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>As a singleton, you can pull the singleton instance into your graphtype class in its constructor.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyQuery</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType</span></span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">MyOrderDataLoader</span> loader<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>OrderType<span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Order\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Argument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IdGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span>\\n                <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">return</span> loader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">LoadAsync</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"adding-a-global-cache\\\"><a href=\\\"#adding-a-global-cache\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Adding a global cache</h2>\\n<p>Data loaders will, by default, cache values returned for a given key for the lifetime of a request. You can change\\nthe fetch method of your data loader to use a global cache. The below sample demonstrates changes required to a singleton\\nDI-based data loader as shown immediately above, using the <code class=\\\"language-text\\\">Microsoft.Extensions.Caching.Memory</code> NuGet package.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyOrderDataLoader</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">DataLoaderBase<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">readonly</span> <span class=\\\"token class-name\\\">IServiceProvider</span> _rootServiceProvider<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">readonly</span> <span class=\\\"token class-name\\\">IMemoryCache</span> _memoryCache<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">readonly</span> <span class=\\\"token class-name\\\">MemoryCacheEntryOptions</span> _memoryCacheEntryOptions<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">string</span></span> CACHE_PREFIX <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"ORDER_\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        \\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyOrderDataLoader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IServiceProvider</span> serviceProvider<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IMemoryCache</span> memoryCache<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        _rootServiceProvider <span class=\\\"token operator\\\">=</span> serviceProvider<span class=\\\"token punctuation\\\">;</span>\\n        _memoryCache <span class=\\\"token operator\\\">=</span> memoryCache<span class=\\\"token punctuation\\\">;</span>\\n        _memoryCacheEntryOptions <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">MemoryCacheEntryOptions</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// specify a maximum lifetime of 5 minutes</span>\\n            AbsoluteExpirationRelativeToNow <span class=\\\"token operator\\\">=</span> TimeSpan<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">FromMinutes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token comment\\\">// set so that the size of the cache can be limited</span>\\n            Size <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token return-type class-name\\\">Task</span> <span class=\\\"token function\\\">FetchAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> list<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">CancellationToken</span> cancellationToken<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// create a list of keys that are not in the cache</span>\\n        <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> unMatched <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">List<span class=\\\"token punctuation\\\">&lt;</span>DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Count</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// attempt to match any keys possible from the global cache</span>\\n        <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> entry <span class=\\\"token keyword\\\">in</span> list<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>_memoryCache<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">TryGetValue</span><span class=\\\"token punctuation\\\">(</span>CACHE_PREFIX <span class=\\\"token operator\\\">+</span> entry<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">out</span> <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> <span class=\\\"token keyword\\\">value</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                entry<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SetResult</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>Order<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">value</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">else</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                unMatched<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Add</span><span class=\\\"token punctuation\\\">(</span>entry<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token comment\\\">// process the unmatched keys as usual</span>\\n        list <span class=\\\"token operator\\\">=</span> unMatched<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">using</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> scope <span class=\\\"token operator\\\">=</span> _rootServiceProvider<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">CreateScope</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> dbContext <span class=\\\"token operator\\\">=</span> scope<span class=\\\"token punctuation\\\">.</span>ServiceProvider<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyDbContext<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span> ids <span class=\\\"token operator\\\">=</span> list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Select</span><span class=\\\"token punctuation\\\">(</span>pair <span class=\\\"token operator\\\">=></span> pair<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token class-name\\\">IDictionary<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> dbContext<span class=\\\"token punctuation\\\">.</span>Orders<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Where</span><span class=\\\"token punctuation\\\">(</span>order <span class=\\\"token operator\\\">=></span> ids<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Contains</span><span class=\\\"token punctuation\\\">(</span>order<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToDictionaryAsync</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">,</span> cancellationToken<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span> entry <span class=\\\"token keyword\\\">in</span> list<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">TryGetValue</span><span class=\\\"token punctuation\\\">(</span>entry<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">out</span> <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> order<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token comment\\\">// only save the entry in the cache if it was found in the database</span>\\n                    _memoryCache<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Set</span><span class=\\\"token punctuation\\\">(</span>CACHE_PREFIX <span class=\\\"token operator\\\">+</span> entry<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">,</span> order<span class=\\\"token punctuation\\\">,</span> _memoryCacheEntryOptions<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    entry<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SetResult</span><span class=\\\"token punctuation\\\">(</span>order<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token keyword\\\">else</span>\\n                <span class=\\\"token punctuation\\\">{</span>\\n                    entry<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SetResult</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// also, register the memory cache in your DI configuration</span>\\n<span class=\\\"token comment\\\">// limit cache to 10,000 entries</span>\\nservices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IMemoryCache<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">MemoryCache</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">MemoryCacheOptions</span> <span class=\\\"token punctuation\\\">{</span> SizeLimit <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10000</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\",\"fields\":{\"relativePath\":\"docs/guides/dataloader.md\"}},\"site\":{\"siteMetadata\":{\"githubEditUrl\":\"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site\"}}},\"pathContext\":{\"relativePath\":\"docs/guides/dataloader.md\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-guides-dataloader-e71508790d18d3d143bb.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"dataloader\\\"><a href=\\\"#dataloader\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>DataLoader</h1>\\n<p>GraphQL.NET includes an implementation of Facebook's <a href=\\\"https://github.com/facebook/dataloader\\\">DataLoader</a> within the\\n<a href=\\\"https://www.nuget.org/packages/GraphQL.DataLoader\\\"><code class=\\\"language-text\\\">GraphQL.DataLoader</code></a> NuGet package.</p>\\n<p>Consider a GraphQL query like this:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token property-query\\\">orders</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">date</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"2017-01-01\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token property\\\">orderId</span>\\n\\t\\t<span class=\\\"token property\\\">date</span>\\n\\t\\t<span class=\\\"token object\\\">user</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token property\\\">userId</span>\\n\\t\\t\\t<span class=\\\"token property\\\">firstName</span>\\n\\t\\t\\t<span class=\\\"token property\\\">lastName</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>When the query is executed, first a list of orders is fetched. Then for each order, the associated user must also be fetched. If each user is fetched one-by-one, this would get more inefficient as the number of orders (N) grows. This is known as the N+1 problem. If there are 50 orders (N = 50), 51 separate requests would be made to load this data.</p>\\n<p>A DataLoader helps in two ways:</p>\\n<ol>\\n<li>Similar operations are batched together. This can make fetching data over a network much more efficient.</li>\\n<li>Fetched values are cached so if they are requested again, the cached value is returned.</li>\\n</ol>\\n<p>In the example above, a using a DataLoader will allow us to batch together all of the requests for the users. So there would be 1 request to retrieve the list of orders and 1 request to load all users associated with those orders. This would always be a total of 2 requests rather than N+1.</p>\\n<h2 id=\\\"setup\\\"><a href=\\\"#setup\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Setup</h2>\\n<ol>\\n<li>Register <code class=\\\"language-text\\\">IDataLoaderContextAccessor</code> in your IoC container.</li>\\n<li>Register <code class=\\\"language-text\\\">DataLoaderDocumentListener</code> in your IoC container.</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IDataLoaderContextAccessor<span class=\\\"token punctuation\\\">,</span> DataLoaderContextAccessor<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nservices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DataLoaderDocumentListener<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<ol start=\\\"3\\\">\\n<li>Hook up your GraphQL schema to your IoC container.</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MySchema</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">Schema</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MySchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IServiceProvider</span> services<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span>services<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MySchema<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<ol start=\\\"4\\\">\\n<li>Add the <code class=\\\"language-text\\\">DataLoaderDocumentListener</code> to the <code class=\\\"language-text\\\">DocumentExecuter</code>.</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> listener <span class=\\\"token operator\\\">=</span> Services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DataLoaderDocumentListener<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> executer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">DocumentExecuter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> result <span class=\\\"token operator\\\">=</span> executer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ExecuteAsync</span><span class=\\\"token punctuation\\\">(</span>opts <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\n\\t<span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span>\\n\\n\\topts<span class=\\\"token punctuation\\\">.</span>Listeners<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Add</span><span class=\\\"token punctuation\\\">(</span>listener<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h2>\\n<p>First, inject the <code class=\\\"language-text\\\">IDataLoaderContextAccessor</code> into your GraphQL type class.</p>\\n<p>Then use the <code class=\\\"language-text\\\">Context</code> property on the accessor to get the current <code class=\\\"language-text\\\">DataLoaderContext</code>. The <code class=\\\"language-text\\\">DataLoaderDocumentListener</code> configured above ensures that each request will have its own context instance.</p>\\n<p>Use one of the \\\"GetOrAddLoader\\\" methods on the <code class=\\\"language-text\\\">DataLoaderContext</code>. These methods all require a string key to uniquely identify each loader. They also require a delegate for fetching the data. Each method will get an existing loader or add a new one, identified by the string key. Each method has various overloads to support different ways to load and map data with the keys.</p>\\n<p>Call <code class=\\\"language-text\\\">LoadAsync()</code> on the data loader. This will queue the request and return a <code class=\\\"language-text\\\">IDataLoaderResult&lt;T></code>. If the result has already been cached, the returned value will be pulled from the cache.</p>\\n<p>The <code class=\\\"language-text\\\">ExecutionStrategy</code> will dispatch queued data loaders after all other pending fields have been resolved.</p>\\n<p>If your code requires an asynchronous call prior to queuing the data loader, use the <code class=\\\"language-text\\\">ResolveAsync</code> field builder method to return a\\n<code class=\\\"language-text\\\">Task&lt;IDataLoaderResult&lt;T>></code>. The execution strategy will start executing the asynchronous code as soon as the field resolver executes.\\nOnce the <code class=\\\"language-text\\\">IDataLoaderResult&lt;T></code> is retrieved from the asynchronous task, the data loader will be queued to be dispatched once all\\nother pending fields have been resolved.</p>\\n<p>To execute code within the resolver after the data loader has retrieved the data, pass a delegate to the <code class=\\\"language-text\\\">Then</code> extension\\nmethod of the returned <code class=\\\"language-text\\\">IDataLoaderResult&lt;T></code>. You can use a synchronous or asynchronous delegate, and it can return another\\n<code class=\\\"language-text\\\">IDataLoaderResult&lt;T></code> if you wish to chain dataloaders together. This may result in the field builder's Resolve delegate\\nsignature looking like <code class=\\\"language-text\\\">IDataLoaderResult&lt;IDataLoaderResult&lt;T>></code>, which is correct and will be handled properly by the execution strategy.</p>\\n<h2 id=\\\"examples\\\"><a href=\\\"#examples\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Examples</h2>\\n<p>This is an example of using a DataLoader to batch requests for loading items by a key. <code class=\\\"language-text\\\">LoadAsync()</code> is called by the field resolver for each Order. <code class=\\\"language-text\\\">IUsersStore.GetUsersByIdAsync()</code> will be called with the batch of userIds that were requested.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">OrderType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType<span class=\\\"token punctuation\\\">&lt;</span>Order<span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Inject the IDataLoaderContextAccessor to access the current DataLoaderContext</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">OrderType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IDataLoaderContextAccessor</span> accessor<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IUsersStore</span> users<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span>\\n\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>UserType<span class=\\\"token punctuation\\\">,</span> User<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"User\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// Get or add a batch loader with the key \\\"GetUsersById\\\"</span>\\n                <span class=\\\"token comment\\\">// The loader will call GetUsersByIdAsync for each batch of keys</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> loader <span class=\\\"token operator\\\">=</span> accessor<span class=\\\"token punctuation\\\">.</span>Context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetOrAddBatchLoader</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> User<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"GetUsersById\\\"</span><span class=\\\"token punctuation\\\">,</span> users<span class=\\\"token punctuation\\\">.</span>GetUsersByIdAsync<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token comment\\\">// Add this UserId to the pending keys to fetch</span>\\n                <span class=\\\"token comment\\\">// The execution strategy will trigger the data loader to fetch the data via GetUsersByIdAsync() at the</span>\\n                <span class=\\\"token comment\\\">//   appropriate time, and the field will be resolved with an instance of User once GetUsersByIdAsync()</span>\\n                <span class=\\\"token comment\\\">//   returns with the batched results</span>\\n                <span class=\\\"token keyword\\\">return</span> loader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">LoadAsync</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token punctuation\\\">.</span>UserId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IUsersStore</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// This will be called by the loader for all pending keys</span>\\n    <span class=\\\"token comment\\\">// Note that fetch delegates can accept a CancellationToken parameter or not</span>\\n    <span class=\\\"token return-type class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span>IDictionary<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> User<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">GetUsersByIdAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span> userIds<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">CancellationToken</span> cancellationToken<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>This is an example of using a DataLoader to batch requests for loading a collection of items by a key. This is used when a key may be associated with more than one item. <code class=\\\"language-text\\\">LoadAsync()</code> is called by the field resolver for each User. A User can have zero to many Orders. <code class=\\\"language-text\\\">IOrdersStore.GetOrdersByUserIdAsync</code> will be called with a batch of userIds that have been requested.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType<span class=\\\"token punctuation\\\">&lt;</span>User<span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Inject the IDataLoaderContextAccessor to access the current DataLoaderContext</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">UserType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IDataLoaderContextAccessor</span> accessor<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IOrdersStore</span> orders<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span>\\n\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>ListGraphType<span class=\\\"token punctuation\\\">&lt;</span>OrderType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">,</span> IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>Order<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Orders\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>ctx <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// Get or add a collection batch loader with the key \\\"GetOrdersByUserId\\\"</span>\\n                <span class=\\\"token comment\\\">// The loader will call GetOrdersByUserIdAsync with a batch of keys</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> ordersLoader <span class=\\\"token operator\\\">=</span> accessor<span class=\\\"token punctuation\\\">.</span>Context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetOrAddCollectionBatchLoader</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"GetOrdersByUserId\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                    orders<span class=\\\"token punctuation\\\">.</span>GetOrdersByUserIdAsync<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token comment\\\">// Add this UserId to the pending keys to fetch data for</span>\\n                <span class=\\\"token comment\\\">// The execution strategy will trigger the data loader to fetch the data via GetOrdersByUserId() at the</span>\\n                <span class=\\\"token comment\\\">//   appropriate time, and the field will be resolved with an instance of IEnumerable&lt;Order> once</span>\\n                <span class=\\\"token comment\\\">//   GetOrdersByUserId() returns with the batched results</span>\\n                <span class=\\\"token keyword\\\">return</span> ordersLoader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">LoadAsync</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token punctuation\\\">.</span>UserId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">OrdersStore</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">IOrdersStore</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token return-type class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span>ILookup<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">GetOrdersByUserIdAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span> userIds<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> orders <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token comment\\\">// load data from database</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">return</span> orders\\n\\t\\t\\t<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToLookup</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">.</span>UserId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>This is an example of using a DataLoader without batching. This could be useful if the data may be requested multiple times. The result will be cached the first time. Subsequent calls to <code class=\\\"language-text\\\">LoadAsync()</code> will return the cached result.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">QueryType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Inject the IDataLoaderContextAccessor to access the current DataLoaderContext</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">QueryType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IDataLoaderContextAccessor</span> accessor<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IUsersStore</span> users<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>ListGraphType<span class=\\\"token punctuation\\\">&lt;</span>UserType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">,</span> IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>User<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Users\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Get all Users\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>ctx <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// Get or add a loader with the key \\\"GetAllUsers\\\"</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> loader <span class=\\\"token operator\\\">=</span> accessor<span class=\\\"token punctuation\\\">.</span>Context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetOrAddLoader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"GetAllUsers\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> users<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetAllUsersAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token comment\\\">// Prepare the load operation</span>\\n                <span class=\\\"token comment\\\">// If the result is cached, a completed Task&lt;IEnumerable&lt;User>> will be returned</span>\\n                <span class=\\\"token keyword\\\">return</span> loader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">LoadAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IUsersStore</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token return-type class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span>IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>User<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">GetAllUsersAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>This is an example of using two chained DataLoaders to batch requests together, with asynchronous code before the data loaders execute, and post-processing afterwards.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType<span class=\\\"token punctuation\\\">&lt;</span>User<span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Inject the IDataLoaderContextAccessor to access the current DataLoaderContext</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">UserType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IDataLoaderContextAccessor</span> accessor<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IUsersStore</span> users<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IOrdersStore</span> orders<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IItemsStore</span> items<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span>\\n\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>ListGraphType<span class=\\\"token punctuation\\\">&lt;</span>ItemType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">,</span> IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>Item<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"OrderedItems\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">async</span> context <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// Asynchronously authenticate</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> valid <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> users<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">CanViewOrders</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token punctuation\\\">.</span>UserId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>valid<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n                \\n                <span class=\\\"token comment\\\">// Get or add a collection batch loader with the key \\\"GetOrdersByUserId\\\"</span>\\n                <span class=\\\"token comment\\\">// The loader will call GetOrdersByUserIdAsync with a batch of keys</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> ordersLoader <span class=\\\"token operator\\\">=</span> accessor<span class=\\\"token punctuation\\\">.</span>Context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetOrAddCollectionBatchLoader</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"GetOrdersByUserId\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                    orders<span class=\\\"token punctuation\\\">.</span>GetOrdersByUserIdAsync<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> ordersResult <span class=\\\"token operator\\\">=</span> ordersLoader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">LoadAsync</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token punctuation\\\">.</span>UserId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token comment\\\">// Once the orders have been retrieved by the first data loader, feed the order IDs into</span>\\n                <span class=\\\"token comment\\\">//   the second data loader</span>\\n                <span class=\\\"token keyword\\\">return</span> ordersResult<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>orders<span class=\\\"token punctuation\\\">,</span> cancellationToken<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n                <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token comment\\\">// Collect all of the order IDs</span>\\n                    <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> orderIds <span class=\\\"token operator\\\">=</span> orders<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Select</span><span class=\\\"token punctuation\\\">(</span>o <span class=\\\"token operator\\\">=></span> o<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                    <span class=\\\"token comment\\\">// Get or add a collection batch loader with the key \\\"GetItemsByOrderId\\\"</span>\\n                    <span class=\\\"token comment\\\">// The loader will call GetItemsByOrderId with a batch of keys</span>\\n                    <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> itemsLoader <span class=\\\"token operator\\\">=</span> accessor<span class=\\\"token punctuation\\\">.</span>Context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetOrAddCollectionBatchLoader</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Item<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"GetItemsByOrderId\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                        items<span class=\\\"token punctuation\\\">.</span>GetItemsByOrderIdAsync<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                    <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> itemsResults <span class=\\\"token operator\\\">=</span> itemsLoader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">LoadAsync</span><span class=\\\"token punctuation\\\">(</span>orderIds<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                    <span class=\\\"token comment\\\">// itemsResults is of type IDataLoaderResult&lt;IEnumerable&lt;Item>[]> so the array needs to be flattened</span>\\n                    <span class=\\\"token comment\\\">//   before returning it back to the query</span>\\n                    <span class=\\\"token keyword\\\">return</span> itemsResults<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Then</span><span class=\\\"token punctuation\\\">(</span>itemResultSet <span class=\\\"token operator\\\">=></span>\\n                    <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token comment\\\">// Flatten the results after the second dataloader has finished</span>\\n                        <span class=\\\"token keyword\\\">return</span> flattenedResults <span class=\\\"token operator\\\">=</span> itemResultSet<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SelectMany</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IUsersStore</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// This will be called for each call to OrderedItems, prior to any data loader execution</span>\\n    <span class=\\\"token return-type class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">bool</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">CanViewOrders</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">int</span></span> userId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IOrdersStore</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// This will be called by the \\\"order\\\" loader for all pending keys</span>\\n    <span class=\\\"token comment\\\">// Note that fetch delegates can accept a CancellationToken parameter or not</span>\\n    <span class=\\\"token return-type class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span>ILookup<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">GetOrdersByUserIdAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span> userIds<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">CancellationToken</span> cancellationToken<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IItemsStore</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// This will be called by the \\\"item\\\" loader for all pending keys</span>\\n    <span class=\\\"token comment\\\">// Note that fetch delegates can accept a CancellationToken parameter or not</span>\\n    <span class=\\\"token return-type class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span>ILookup<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Item<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">GetItemsByOrderIdAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span> orderIds<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">CancellationToken</span> cancellationToken<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<blockquote>\\n<p>See this <a href=\\\"https://fiyazhasan.me/graphql-with-net-core-part-xi-dataloader/\\\">blog series</a> for an in depth example using Entity Framework.</p>\\n</blockquote>\\n<h2 id=\\\"exceptions\\\"><a href=\\\"#exceptions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Exceptions</h2>\\n<p>Exceptions within data loaders' fetch delegates are passed back to the execution strategy for all associated fields.\\nIf you have a need to capture exceptions raised by the fetch delegate, create a <code class=\\\"language-text\\\">new SimpleDataLoader&lt;T></code> within\\nyour field resolver (do not use the <code class=\\\"language-text\\\">IDataLoaderContextAccessor</code> for this) and have its fetch delegate await the\\n<code class=\\\"language-text\\\">IDataLoaderResult&lt;T>.GetResultAsync</code> method of the result obtained from the first data loader within a try/catch\\nblock. Return the result of the simple data loader's <code class=\\\"language-text\\\">LoadAsync()</code> function to the field resolver.  The data loader\\nwill still load at the appropriate time, and you can handle exceptions as desired.</p>\\n<h2 id=\\\"di-based-data-loaders\\\"><a href=\\\"#di-based-data-loaders\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>DI-based data loaders</h2>\\n<p>The above instructions describe how to use the data loader context and accessor classes to create data loaders scoped\\nto the current request. You can also use dependency injection to register a data loader instance. This can eliminate\\nduplicated code if you call the same data loader from different field resolvers. It can also help to prevent\\nunforseen bugs due to a data loader fetch delegate capturing variables from a field resolver's scope.</p>\\n<p>To create a custom and register a custom data loader instance, first create a class and inherit <code class=\\\"language-text\\\">DataLoaderBase&lt;TKey, T></code>.\\nOverride the <code class=\\\"language-text\\\">FetchAsync</code> method with the code to retrieve the data based on the provided keys. Call <code class=\\\"language-text\\\">SetResult</code> on\\neach provided <code class=\\\"language-text\\\">DataLoaderPair</code> to set the result. Feel free to use dependency injection to rely on any scoped services\\nnecessary to facilitate execution of the fetch method. See below sample:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Order</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">int</span></span> Id <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">string</span></span> ShipToName <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">OrderItem</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">int</span></span> Id <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">int</span></span> OrderId <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">string</span></span> ItemName <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// similar to BatchDataLoader</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyOrderDataLoader</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">DataLoaderBase<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">readonly</span> <span class=\\\"token class-name\\\">MyDbContext</span> _dbContext<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyOrderDataLoader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">MyDbContext</span> dataContext<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        _dbContext <span class=\\\"token operator\\\">=</span> dataContext<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token return-type class-name\\\">Task</span> <span class=\\\"token function\\\">FetchAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> list<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">CancellationToken</span> cancellationToken<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span> ids <span class=\\\"token operator\\\">=</span> list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Select</span><span class=\\\"token punctuation\\\">(</span>pair <span class=\\\"token operator\\\">=></span> pair<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token class-name\\\">IDictionary<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> _dbContext<span class=\\\"token punctuation\\\">.</span>Orders<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Where</span><span class=\\\"token punctuation\\\">(</span>order <span class=\\\"token operator\\\">=></span> ids<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Contains</span><span class=\\\"token punctuation\\\">(</span>order<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToDictionaryAsync</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">,</span> cancellationToken<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span> entry <span class=\\\"token keyword\\\">in</span> list<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            entry<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SetResult</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">.</span>TryGetValue<span class=\\\"token class-name\\\"><span class=\\\"token punctuation\\\">(</span>entry<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">out</span> <span class=\\\"token keyword\\\">var</span> order<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">?</span></span> order <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// similar to CollectionBatchDataLoader</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyOrderItemsDataLoader</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">DataLoaderBase<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>OrderItem<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">readonly</span> <span class=\\\"token class-name\\\">MyDbContext</span> _dbContext<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyOrderItemsDataLoader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">MyDbContext</span> dataContext<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        _dbContext <span class=\\\"token operator\\\">=</span> dataContext<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token return-type class-name\\\">Task</span> <span class=\\\"token function\\\">FetchAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>OrderItem<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> list<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">CancellationToken</span> cancellationToken<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span> ids <span class=\\\"token operator\\\">=</span> list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Select</span><span class=\\\"token punctuation\\\">(</span>pair <span class=\\\"token operator\\\">=></span> pair<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>OrderItem<span class=\\\"token punctuation\\\">></span></span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> _dbContext<span class=\\\"token punctuation\\\">.</span>OrderItems<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Where</span><span class=\\\"token punctuation\\\">(</span>orderItem <span class=\\\"token operator\\\">=></span> ids<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Contains</span><span class=\\\"token punctuation\\\">(</span>orderItem<span class=\\\"token punctuation\\\">.</span>OrderId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToListAsync</span><span class=\\\"token punctuation\\\">(</span>cancellationToken<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token class-name\\\">ILookup<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> OrderItem<span class=\\\"token punctuation\\\">></span></span> dataLookup <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToLookup</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">.</span>OrderId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>OrderItem<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> entry <span class=\\\"token keyword\\\">in</span> list<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            entry<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SetResult</span><span class=\\\"token punctuation\\\">(</span>dataLookup<span class=\\\"token punctuation\\\">[</span>entry<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>You will need to register the data loader as a scoped service within your DI framework.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddScoped</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyOrderDataLoader<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nservices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddScoped</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyOrderItemsDataLoader<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Then within your field resolvers, access the data loader via the <code class=\\\"language-text\\\">RequestServices</code> property and call <code class=\\\"language-text\\\">LoadAsync</code> as before:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyQuery</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>OrderType<span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Order\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Argument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IdGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// Get the custom data loader</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> loader <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span>RequestServices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyOrderDataLoader<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token comment\\\">// Add this UserId to the pending keys to fetch.</span>\\n                <span class=\\\"token comment\\\">// The execution strategy will trigger the data loader to fetch the data via MyOrderDataLoader.FetchAsync() at the</span>\\n                <span class=\\\"token comment\\\">// appropriate time, and the field will be resolved with an instance of Order once FetchAsync()</span>\\n                <span class=\\\"token comment\\\">// returns with the batched results</span>\\n                <span class=\\\"token keyword\\\">return</span> loader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">LoadAsync</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">OrderType</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType<span class=\\\"token punctuation\\\">&lt;</span>Order<span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">OrderType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token named-parameter punctuation\\\">type</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">typeof</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token type-expression class-name\\\">IdGraphType</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token function\\\">Field</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">.</span>ShipToName<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>ListGraphType<span class=\\\"token punctuation\\\">&lt;</span>OrderItemType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">,</span> IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>OrderItem<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Items\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> loader <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span>RequestServices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyOrderItemsDataLoader<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> loader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">LoadAsync</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>You do not need to use <code class=\\\"language-text\\\">IDataLoaderContextAccessor</code> or <code class=\\\"language-text\\\">DataLoaderDocumentListener</code> and may remove those references\\nfrom your code.</p>\\n<h2 id=\\\"singleton-di-based-data-loader-instances\\\"><a href=\\\"#singleton-di-based-data-loader-instances\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Singleton DI-based data loader instances</h2>\\n<p>If you wish to register the data loader as a singleton, be sure to disable caching by calling <code class=\\\"language-text\\\">: base(false)</code> in\\nthe constructor, as the cache entries never expire. You will also need to be sure your code does not rely on any\\nscoped services, or create a dedicated service scope within the fetch method as shown below.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyOrderDataLoader</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">DataLoaderBase<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">readonly</span> <span class=\\\"token class-name\\\">IServiceProvider</span> _rootServiceProvider<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyOrderDataLoader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IServiceProvider</span> serviceProvider<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        _rootServiceProvider <span class=\\\"token operator\\\">=</span> serviceProvider<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token return-type class-name\\\">Task</span> <span class=\\\"token function\\\">FetchAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> list<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">CancellationToken</span> cancellationToken<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">using</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> scope <span class=\\\"token operator\\\">=</span> _rootServiceProvider<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">CreateScope</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token class-name\\\">MyDbContext</span> dbContext <span class=\\\"token operator\\\">=</span> scope<span class=\\\"token punctuation\\\">.</span>ServiceProvider<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyDbContext<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span> ids <span class=\\\"token operator\\\">=</span> list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Select</span><span class=\\\"token punctuation\\\">(</span>pair <span class=\\\"token operator\\\">=></span> pair<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token class-name\\\">IDictionary<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> dbContext<span class=\\\"token punctuation\\\">.</span>Orders<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Where</span><span class=\\\"token punctuation\\\">(</span>order <span class=\\\"token operator\\\">=></span> ids<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Contains</span><span class=\\\"token punctuation\\\">(</span>order<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToDictionaryAsync</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">,</span> cancellationToken<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span> entry <span class=\\\"token keyword\\\">in</span> list<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                entry<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SetResult</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">.</span>TryGetValue<span class=\\\"token class-name\\\"><span class=\\\"token punctuation\\\">(</span>entry<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">out</span> <span class=\\\"token keyword\\\">var</span> order<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">?</span></span> order <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>As a singleton, you can pull the singleton instance into your graphtype class in its constructor.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyQuery</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType</span></span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">MyOrderDataLoader</span> loader<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>OrderType<span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Order\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Argument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IdGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span>\\n                <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">return</span> loader<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">LoadAsync</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"adding-a-global-cache\\\"><a href=\\\"#adding-a-global-cache\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Adding a global cache</h2>\\n<p>Data loaders will, by default, cache values returned for a given key for the lifetime of a request. You can change\\nthe fetch method of your data loader to use a global cache. The below sample demonstrates changes required to a singleton\\nDI-based data loader as shown immediately above, using the <code class=\\\"language-text\\\">Microsoft.Extensions.Caching.Memory</code> NuGet package.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyOrderDataLoader</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">DataLoaderBase<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">readonly</span> <span class=\\\"token class-name\\\">IServiceProvider</span> _rootServiceProvider<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">readonly</span> <span class=\\\"token class-name\\\">IMemoryCache</span> _memoryCache<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">readonly</span> <span class=\\\"token class-name\\\">MemoryCacheEntryOptions</span> _memoryCacheEntryOptions<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">string</span></span> CACHE_PREFIX <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"ORDER_\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        \\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyOrderDataLoader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IServiceProvider</span> serviceProvider<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IMemoryCache</span> memoryCache<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        _rootServiceProvider <span class=\\\"token operator\\\">=</span> serviceProvider<span class=\\\"token punctuation\\\">;</span>\\n        _memoryCache <span class=\\\"token operator\\\">=</span> memoryCache<span class=\\\"token punctuation\\\">;</span>\\n        _memoryCacheEntryOptions <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">MemoryCacheEntryOptions</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// specify a maximum lifetime of 5 minutes</span>\\n            AbsoluteExpirationRelativeToNow <span class=\\\"token operator\\\">=</span> TimeSpan<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">FromMinutes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token comment\\\">// set so that the size of the cache can be limited</span>\\n            Size <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token return-type class-name\\\">Task</span> <span class=\\\"token function\\\">FetchAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> list<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">CancellationToken</span> cancellationToken<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// create a list of keys that are not in the cache</span>\\n        <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> unMatched <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">List<span class=\\\"token punctuation\\\">&lt;</span>DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Count</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// attempt to match any keys possible from the global cache</span>\\n        <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> entry <span class=\\\"token keyword\\\">in</span> list<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>_memoryCache<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">TryGetValue</span><span class=\\\"token punctuation\\\">(</span>CACHE_PREFIX <span class=\\\"token operator\\\">+</span> entry<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">out</span> <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> <span class=\\\"token keyword\\\">value</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                entry<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SetResult</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>Order<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">value</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">else</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                unMatched<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Add</span><span class=\\\"token punctuation\\\">(</span>entry<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token comment\\\">// process the unmatched keys as usual</span>\\n        list <span class=\\\"token operator\\\">=</span> unMatched<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">using</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> scope <span class=\\\"token operator\\\">=</span> _rootServiceProvider<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">CreateScope</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> dbContext <span class=\\\"token operator\\\">=</span> scope<span class=\\\"token punctuation\\\">.</span>ServiceProvider<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyDbContext<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span> ids <span class=\\\"token operator\\\">=</span> list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Select</span><span class=\\\"token punctuation\\\">(</span>pair <span class=\\\"token operator\\\">=></span> pair<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token class-name\\\">IDictionary<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> dbContext<span class=\\\"token punctuation\\\">.</span>Orders<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Where</span><span class=\\\"token punctuation\\\">(</span>order <span class=\\\"token operator\\\">=></span> ids<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Contains</span><span class=\\\"token punctuation\\\">(</span>order<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToDictionaryAsync</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> x<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">,</span> cancellationToken<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">DataLoaderPair<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> Order<span class=\\\"token punctuation\\\">></span></span> entry <span class=\\\"token keyword\\\">in</span> list<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">TryGetValue</span><span class=\\\"token punctuation\\\">(</span>entry<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">out</span> <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> order<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token comment\\\">// only save the entry in the cache if it was found in the database</span>\\n                    _memoryCache<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Set</span><span class=\\\"token punctuation\\\">(</span>CACHE_PREFIX <span class=\\\"token operator\\\">+</span> entry<span class=\\\"token punctuation\\\">.</span>Key<span class=\\\"token punctuation\\\">,</span> order<span class=\\\"token punctuation\\\">,</span> _memoryCacheEntryOptions<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    entry<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SetResult</span><span class=\\\"token punctuation\\\">(</span>order<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token keyword\\\">else</span>\\n                <span class=\\\"token punctuation\\\">{</span>\\n                    entry<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SetResult</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// also, register the memory cache in your DI configuration</span>\\n<span class=\\\"token comment\\\">// limit cache to 10,000 entries</span>\\nservices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddSingleton</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IMemoryCache<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">MemoryCache</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">MemoryCacheOptions</span> <span class=\\\"token punctuation\\\">{</span> SizeLimit <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10000</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\",\"fields\":{\"relativePath\":\"docs/guides/dataloader.md\"}},\"site\":{\"siteMetadata\":{\"githubEditUrl\":\"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site\"}}},\"pathContext\":{\"relativePath\":\"docs/guides/dataloader.md\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-guides-dataloader.json\n// module id = 339\n// module chunks = 67274500541493"],"sourceRoot":""}