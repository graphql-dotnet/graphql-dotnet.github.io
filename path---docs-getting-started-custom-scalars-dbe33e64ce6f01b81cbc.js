webpackJsonp([0xf20e3161d4a6],{307:function(n,s){n.exports={data:{markdownRemark:{html:'<h1 id="custom-scalars"><a href="#custom-scalars" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Custom Scalars</h1>\n<p>You can extend your schema with your own custom scalars. Conceptually, a scalar must implement the following operations:</p>\n<ul>\n<li>\n<p>Serialization: Transforms a scalar from its server-side representation to a representation suitable for the client.</p>\n</li>\n<li>\n<p>Value Parsing: Transforms a scalar from its client-side representation as a variable to its server-side representation.</p>\n</li>\n<li>\n<p>Literal Parsing: Transforms a scalar from its client-side representation as an argument to its server-side representation.</p>\n</li>\n</ul>\n<p>Parsing for arguments and variables are handled separately because while arguments must always be expressed in GraphQL query syntax, variable format is transport-specific (usually JSON).</p>\n<p>The following example shows how to create a custom scalar in GraphQL.NET. You will create a 3D Vector which will be exchanged between server and client as a comma-separated string (ex. "34, 61, 12"). The example assumes the GraphQL schema is implemented in an ASP.NET Core project using the <code class="language-text">Microsoft.Extensions.DependencyInjection</code> package, though only minor modifications would be required for other project types.</p>\n<p>Assume the following schema</p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token keyword">scalar</span> <span class="token class-name">Vector3</span>\n\n<span class="token keyword">schema</span> <span class="token punctuation">{</span>\n    <span class="token attr-name">query</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token attr-name">getVector</span><span class="token punctuation">:</span> Vector3<span class="token operator">!</span>\n    <span class="token punctuation">}</span>\n    <span class="token attr-name">mutation</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token attr-name">addVector</span><span class="token punctuation">(</span><span class="token attr-name">vector3</span><span class="token punctuation">:</span> Vector3<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Vector3\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>The goal is to execute mutations with both arguments:</p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token keyword">mutation</span> <span class="token punctuation">{</span>\n    addVector<span class="token punctuation">(</span><span class="token attr-name">vector3</span><span class="token punctuation">:</span> <span class="token string">"23, 43, 66"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>and also variables:</p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token keyword">mutation</span> AddVector<span class="token punctuation">(</span><span class="token variable">$vector3</span><span class="token punctuation">:</span> Vector3<span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    addVector<span class="token punctuation">(</span><span class="token attr-name">vector3</span><span class="token punctuation">:</span> <span class="token variable">$vector3</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n//variables\n<span class="token punctuation">{</span>\n    <span class="token string">"vector3"</span><span class="token punctuation">:</span> <span class="token string">"23, 43, 66"</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Vectors should be received in a more structured format:</p>\n<div class="gatsby-highlight" data-language="json">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"getVector"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">"X"</span><span class="token operator">:</span><span class="token string">"23"</span><span class="token punctuation">,</span>\n            <span class="token property">"Y"</span><span class="token operator">:</span><span class="token string">"43"</span><span class="token punctuation">,</span>\n            <span class="token property">"Z"</span><span class="token operator">:</span><span class="token string">"66"</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<ol>\n<li>Create the class for the server-side representation.</li>\n</ol>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">Vector3</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">Vector3</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> y<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> z<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        X <span class="token operator">=</span> x<span class="token punctuation">;</span>\n        Y <span class="token operator">=</span> y<span class="token punctuation">;</span>\n        Z <span class="token operator">=</span> z<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> X <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Y <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Z <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>       \n<span class="token punctuation">}</span></code></pre>\n      </div>\n<ol start="2">\n<li>Create a graph type for the scalar by inheriting <code class="language-text">ScalarGraphType</code>.</li>\n</ol>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">GraphQL</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">GraphQL<span class="token punctuation">.</span>Types</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">GraphQL<span class="token punctuation">.</span>Language<span class="token punctuation">.</span>AST</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector3Type</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScalarGraphType</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">Vector3Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Name <span class="token operator">=</span> <span class="token string">"Vector3"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ParseLiteral</span><span class="token punctuation">(</span><span class="token class-name">IValue</span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ParseValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<ol start="3">\n<li>Register the graph type with the DI container.</li>\n</ol>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// In Startup.cs</span>\n\n<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Vector3Type<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Other schema registrations...</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<ol start="4">\n<li>Prepare to accept <code class="language-text">Vector3</code> inputs from query arguments. Implement <code class="language-text">ScalarGraphType.ParseLiteral</code>.</li>\n</ol>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">//in Vector3Type</span>\n\n<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ParseLiteral</span><span class="token punctuation">(</span><span class="token class-name">IValue</span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name">StringValue</span> <span class="token return-type class-name">stringValue\n        <span class="token punctuation">?</span></span> <span class="token function">ParseValue</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>\n        <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Once the raw string is extracted from the value node, normal parsing can proceed.</p>\n<ol start="5">\n<li>Prepare to accept <code class="language-text">Vector3</code> inputs from query variables. Implement <code class="language-text">ScalarGraphType.ParseValue</code>.</li>\n</ol>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// In Vector3Type</span>\n<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ParseValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ValueConverter<span class="token punctuation">.</span><span class="token function">ConvertTo</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Vector3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>For this call to succeed, a type conversion from <code class="language-text">string</code> to <code class="language-text">Vector3</code> must be registered with the <code class="language-text">ValueConverter</code> class. This can be done anywhere since the API is static. For this example, perform the registration in the schema\'s constructor.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">GraphQL</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">GraphQL<span class="token punctuation">.</span>Language<span class="token punctuation">.</span>AST</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">GraphQL<span class="token punctuation">.</span>Types</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">StarWars<span class="token punctuation">.</span>Types</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleSchema</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Schema</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">ExampleSchema</span><span class="token punctuation">(</span><span class="token class-name">IServiceProvider</span> provider<span class="token punctuation">)</span>\n        <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>        \n        ValueConverter<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Vector3<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>ParseVector3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Other schema assignments...</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token return-type class-name">Vector3</span> <span class="token function">ParseVector3</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> vector3InputString<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">try</span>\n        <span class="token punctuation">{</span>\n            <span class="token class-name"><span class="token keyword">var</span></span> vector3Parts <span class="token operator">=</span> vector3InputString<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string character">\',\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name"><span class="token keyword">var</span></span> x <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>vector3Parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name"><span class="token keyword">var</span></span> y <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>vector3Parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name"><span class="token keyword">var</span></span> z <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>vector3Parts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">catch</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FormatException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Failed to parse </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">nameof</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> from input \'</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">vector3InputString</span><span class="token punctuation">}</span></span><span class="token string">\'. Input should be a string of three comma-separated floats in X Y Z order, ex. 1.0,2.0,3.0"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<ol start="6">\n<li>Prepare to support conversion of <code class="language-text">Vector3</code> to an AST node. This allows GraphQL.NET to treat values parsed from variables the same as arguments, which arrive for execution as AST nodes. </li>\n</ol>\n<p>Implement <code class="language-text">ValueNode&lt;Vector3&gt;</code>. Instances of <code class="language-text">Vector3</code> parsed from variables will be wrapped in this type during execution.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector3Value</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ValueNode<span class="token punctuation">&lt;</span>Vector3<span class="token punctuation">></span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">Vector3Value</span><span class="token punctuation">(</span><span class="token class-name">Vector3</span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Value <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name">ValueNode<span class="token punctuation">&lt;</span>Vector3<span class="token punctuation">></span></span> node<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Value<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Implement <code class="language-text">IAstFromValueConverter</code> for <code class="language-text">Vector3</code>. This type is used to instruct GraphQL.NET how to wrap custom scalars in <code class="language-text">IValue</code> instances during execution. The framework uses <code class="language-text">Matches</code> to find the appropriate AST value converter after parsing a custom scalar, then uses <code class="language-text">Convert</code> to perform the conversion.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector3AstValueConverter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IAstFromValueConverter</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">IValue</span> <span class="token function">Convert</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">IGraphType</span> type<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3Value</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Matches</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">IGraphType</span> type<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name">Vector3</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Register <code class="language-text">Vector3AstValueConverter</code> with the schema. Don\'t conflate <code class="language-text">ValueConverter.Register</code> used in step 4 with <code class="language-text">Schema.RegisterValueConverter</code> - the latter is used for conversions to AST value nodes.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// In ExampleSchema</span>\n<span class="token keyword">public</span> <span class="token function">ExampleSchema</span><span class="token punctuation">(</span><span class="token class-name">IServiceProvider</span> provider<span class="token punctuation">)</span>\n    <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>        \n    ValueConverter<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Vector3<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>ParseVector3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">RegisterValueConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3AstValueConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Other schema assignments...</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Update the implementation of <code class="language-text">Vector3Type.ParseLiteral</code>:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// In Vector3Type</span>\n<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ParseLiteral</span><span class="token punctuation">(</span><span class="token class-name">IValue</span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// new test</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name">Vector3Value</span> vector3Value<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token function">ParseValue</span><span class="token punctuation">(</span>vector3Value<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name">StringValue</span> <span class="token return-type class-name">stringValue\n        <span class="token punctuation">?</span></span> <span class="token function">ParseValue</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>\n        <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>This is necessary since the query executor converts all arguments and variables to <code class="language-text">IValue</code> instances before coercing them to their server-side representation using <code class="language-text">ParseLiteral</code>. <code class="language-text">Vector3</code> instances parsed from variables will be converted to the more specific <code class="language-text">Vector3Value</code> type.</p>\n<ol start="7">\n<li>Implement <code class="language-text">ScalarGraphType.Serialize</code> so <code class="language-text">Vector3</code> instances can be sent to the client.</li>\n</ol>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// In Vector3Type</span>\n\n<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ValueConverter<span class="token punctuation">.</span><span class="token function">ConvertTo</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Vector3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>This implementation may surprise you. Why is <code class="language-text">Serialize</code>, which is used for output, implemented identically to <code class="language-text">ParseValue</code>, which is used for input? Why does <code class="language-text">Serialize</code> return an object, rather than a string or byte array? It helps to understand a few internals of the library.</p>\n<ul>\n<li>\n<p><code class="language-text">Serialize</code> will be called during query execution, and should be passed an instance of <code class="language-text">Vector3</code> from a field resolver.</p>\n</li>\n<li>\n<p><code class="language-text">Serialize</code> is <em>also</em> called when reading variables from the client so that variables can be converted to <code class="language-text">IValue</code> instances. In the case of <code class="language-text">Vector3Type</code>, <code class="language-text">value</code> will be a string during this process.</p>\n</li>\n<li>\n<p><code class="language-text">ValueConverter.ConvertTo</code> handles the case when <code class="language-text">value</code> is an instance of the requested type by returning <code class="language-text">value</code>. Therefore, <code class="language-text">ValueConverter.ConvertTo</code> neatly handles both input and output representations of the scalar.</p>\n</li>\n<li>\n<p>Since GraphQL specifies no response format, <code class="language-text">Serialize</code> is not responsible for preparing the scalar for transport to the client. It is only responsible for generating an object which can eventually be serialized by <code class="language-text">IDocumentWriter</code> or other transport-focused API.</p>\n</li>\n</ul>\n<p>In this example, you created a custom scalar. In summary:</p>\n<ul>\n<li>Create a class for the server-side representation of the scalar</li>\n<li>Implement a <code class="language-text">ScalarGraphType</code> which handles parsing, literal parsing, and serialization</li>\n<li>Register the `ScalarGraphType with the DI container</li>\n<li>Define how to parse the raw representation of the scalar to its server-side representation using <code class="language-text">ValueConverter.Register</code></li>\n<li>Implement a <code class="language-text">ValueNode&lt;T&gt;</code> class for the server-side representation</li>\n<li>Implement an <code class="language-text">IAstFromValueConverter</code> for wrapping the server-side representation in its <code class="language-text">ValueNode&lt;T&gt;</code> implementation</li>\n<li>Register the <code class="language-text">IAstFromValueConverter</code> with the schema using <code class="language-text">Schema.RegisterValueConverter</code></li>\n</ul>',
fields:{relativePath:"docs/getting-started/custom-scalars.md"}},site:{siteMetadata:{githubEditUrl:"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site"}}},pathContext:{relativePath:"docs/getting-started/custom-scalars.md"}}}});
//# sourceMappingURL=path---docs-getting-started-custom-scalars-dbe33e64ce6f01b81cbc.js.map