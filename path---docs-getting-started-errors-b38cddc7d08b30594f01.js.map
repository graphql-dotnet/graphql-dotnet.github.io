{"version":3,"sources":["webpack:///path---docs-getting-started-errors-b38cddc7d08b30594f01.js","webpack:///./.cache/json/docs-getting-started-errors.json"],"names":["webpackJsonp","316","module","exports","data","markdownRemark","html","fields","relativePath","site","siteMetadata","githubEditUrl","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,w/0BAA4wqBC,QAAglMC,aAAA,mCAAiDC,MAASC,cAAgBC,cAAA,6EAA4FC,aAAgBJ,aAAA","file":"path---docs-getting-started-errors-b38cddc7d08b30594f01.js","sourcesContent":["webpackJsonp([75494656540334],{\n\n/***/ 316:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"error-handling\\\"><a href=\\\"#error-handling\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Error Handling</h1>\\n<p>Errors within the GraphQL engine can be thought of as falling into one of three groups: schema errors,\\ninput errors and processing errors. For instance, if an invalid query was passed to the <code class=\\\"language-text\\\">DocumentExecuter</code>,\\nit would be considered an input error, and a <code class=\\\"language-text\\\">SyntaxError</code> would be thrown. Or if an invalid enum string\\nwas passed as a variable to a query, an <code class=\\\"language-text\\\">InvalidValueError</code> would be thrown. All validation rules that\\nfail their respective tests are treated as input errors. Processing errors typically represent unanticipated\\nexceptions occurring during the execution of a field resolver, such as a timeout during a database operation.</p>\\n<p>Input errors and processing errors are returned from the <code class=\\\"language-text\\\">DocumentExecuter</code> within the <code class=\\\"language-text\\\">ExecutionResult.Errors</code>\\nproperty as a list of <code class=\\\"language-text\\\">ExecutionError</code> objects. <code class=\\\"language-text\\\">ExecutionError</code> is derived from <code class=\\\"language-text\\\">Exception</code>, and the <code class=\\\"language-text\\\">Message</code>\\nproperty is serialized <a href=\\\"https://spec.graphql.org/October2021/#sec-Errors\\\">according to the spec</a>\\nwith location and path information. In addition, by default three additional pieces of information are serialized\\nto the <code class=\\\"language-text\\\">extensions</code> property of the GraphQL error which contain:</p>\\n<ul>\\n<li>Within <code class=\\\"language-text\\\">code</code>, the <code class=\\\"language-text\\\">Code</code> property of the <code class=\\\"language-text\\\">ExecutionError</code>, if any,</li>\\n<li>Within <code class=\\\"language-text\\\">codes</code>, the <code class=\\\"language-text\\\">Code</code> property of the <code class=\\\"language-text\\\">ExecutionError</code> along with generated codes of any inner exceptions, if any, and</li>\\n<li>Within <code class=\\\"language-text\\\">data</code>, the contents of the <code class=\\\"language-text\\\">ExecutionError.Data</code> property, which by default contains the data of the inner exception, if any.</li>\\n</ul>\\n<p>Note that by default, messages from unhandled processing errors are masked and a\\ngeneric \\\"Error trying to resolve field '&#x3C;FIELD_NAME>'.\\\" or similar error is returned.</p>\\n<p>Here is a sample result of a <code class=\\\"language-text\\\">FormatException</code> thrown within a <code class=\\\"language-text\\\">product</code> field resolver (a processing error):</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"errors\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"message\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"Error trying to resolve field 'product'.\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token property\\\">\\\"locations\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token property\\\">\\\"line\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span>\\n          <span class=\\\"token property\\\">\\\"column\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">5</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token property\\\">\\\"path\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token string\\\">\\\"product\\\"</span>\\n      <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token property\\\">\\\"extensions\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token property\\\">\\\"code\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"FORMAT\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token property\\\">\\\"codes\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n          <span class=\\\"token string\\\">\\\"FORMAT\\\"</span>\\n        <span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"schema-errors\\\"><a href=\\\"#schema-errors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Schema Errors</h2>\\n<p>Schema errors throw an exception during the process of defining or building the schema. For instance,\\nadding a two fields of the same name to a GraphQL type would result in an <code class=\\\"language-text\\\">ArgumentOutOfRangeException</code>\\nwhile attempting to add the second field. Another example would be if a schema defined an invalid union;\\nan error would be thrown while the schema was being initialized within <code class=\\\"language-text\\\">DocumentExecuter</code> and caught as\\nan unhandled exception (see <a href=\\\"#ProcessingErrors\\\">Processing Errors</a> below).</p>\\n<h2 id=\\\"input-errors\\\"><a href=\\\"#input-errors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Input Errors</h2>\\n<p>All input errors generated by GraphQL.NET derive from <code class=\\\"language-text\\\">DocumentError</code>. Below is a list of error\\nmessages and their respective error classes and codes:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Description</th>\\n<th>Error class</th>\\n<th>Code</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Empty query document</td>\\n<td>NoOperationError</td>\\n<td>NO_OPERATION</td>\\n</tr>\\n<tr>\\n<td>Query parsing error</td>\\n<td>SyntaxError</td>\\n<td>SYNTAX_ERROR</td>\\n</tr>\\n<tr>\\n<td>Attempting a mutation or subscription when none are defined</td>\\n<td>InvalidOperationError</td>\\n<td>INVALID_OPERATION</td>\\n</tr>\\n<tr>\\n<td>Invalid variable values</td>\\n<td>InvalidVariableError</td>\\n<td>INVALID_VALUE</td>\\n</tr>\\n<tr>\\n<td>Validation errors</td>\\n<td>derived from ValidationError</td>\\n<td><a href=\\\"#ValidationErrors\\\">(varies; see list below)</a></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Field resolvers can manually trigger an input error by throwing an <code class=\\\"language-text\\\">ExecutionError</code> or derived class.\\nAny other thrown error is treated as a processing error (see <a href=\\\"#ProcessingErrors\\\">Processing Errors</a> below).\\nHere is an example of typical validation within a field resolver that returns an input error:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>OrderGraph<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"order\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token named-parameter punctuation\\\">arguments</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>IntGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token punctuation\\\">{</span> Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"id\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> order <span class=\\\"token operator\\\">=</span> _orderService<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetById</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>order <span class=\\\"token operator\\\">==</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">ExecutionError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Invalid order id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>You can also add errors to the <code class=\\\"language-text\\\">IResolveFieldContext.Errors</code> property directly.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DroidType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">\\\"hero\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span> context<span class=\\\"token punctuation\\\">.</span>Errors<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">ExecutionError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Error Message\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"a-nameprocessingerrorsaprocessing-errors\\\"><a href=\\\"#a-nameprocessingerrorsaprocessing-errors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a name=\\\"ProcessingErrors\\\"></a>Processing Errors</h2>\\n<p>Processing errors should only occur if an exception is thrown from within a field resolver.\\nFor instance, if you execute <code class=\\\"language-text\\\">.Single()</code> on an empty array, causing an <code class=\\\"language-text\\\">InvalidOperationException</code>\\nto be thrown. These types of errors are most likely to be bugs or connection problems, such as a\\nconnection error when communicating to a database. There are also two other types of processing\\nerrors to be aware of:</p>\\n<ul>\\n<li>Calling <code class=\\\"language-text\\\">context.GetArgument&lt;></code> with a type that does not match the argument type, when the system\\ncannot perform the conversion – for instance, calling <code class=\\\"language-text\\\">context.GetArgument&lt;Guid>(\\\"arg\\\")</code> on an argument\\nof type <code class=\\\"language-text\\\">IntGraphType</code>, and</li>\\n<li>Returning data from a field resolver that does not match the graph type of field resolver, when the\\nsystem cannot perform the conversion.</li>\\n</ul>\\n<p>Processing errors can be thrown back to the caller of <code class=\\\"language-text\\\">DocumentExecuter.ExecuteAsync</code> by setting the\\n<code class=\\\"language-text\\\">ExecutionOptions.ThrowOnUnhandledExceptions</code> property to <code class=\\\"language-text\\\">true</code>. When this property is set to <code class=\\\"language-text\\\">false</code>,\\nthe default setting, unhandled exceptions are wrapped in an <code class=\\\"language-text\\\">UnhandledError</code> and added with a generic\\nerror message to the <code class=\\\"language-text\\\">ExecutionResult.Errors</code> property. Error codes are dynamically generated from the\\ninner exceptions of the wrapped exception and also returned along with data contained within the inner\\nexception's <code class=\\\"language-text\\\">Data</code> property.</p>\\n<p>You can also handle these processing exceptions by setting a delegate within the\\n<code class=\\\"language-text\\\">ExecutionOptions.UnhandledExceptionDelegate</code> property. Within the delegate you can log the error message\\nand stack trace for debugging needs. You can also override the generic error message with a more specific\\nmessage, wrap or replace the exception with your own <code class=\\\"language-text\\\">ExecutionError</code> class, and/or set the codes and data\\nas necessary. Note that if <code class=\\\"language-text\\\">ThrowOnUnhandledExceptions</code> is <code class=\\\"language-text\\\">true</code>, the <code class=\\\"language-text\\\">UnhandledExceptionDelegate</code> will not be called.</p>\\n<p>Here is a sample of a typical unhandled exception delegate which logs the error to a database.\\nIt also returns the log id along with the error message:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> executer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">DocumentExecuter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> result <span class=\\\"token operator\\\">=</span> executer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ExecuteAsync</span><span class=\\\"token punctuation\\\">(</span>options <span class=\\\"token operator\\\">=></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n\\n    <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span>\\n\\n    options<span class=\\\"token punctuation\\\">.</span>UnhandledExceptionDelegate <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">async</span> context <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">try</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">using</span> <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> db <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">MyDatabaseContext</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> errorLog <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">ErrorLog</span> <span class=\\\"token punctuation\\\">{</span>\\n                DateStamp <span class=\\\"token operator\\\">=</span> DateTime<span class=\\\"token punctuation\\\">.</span>UtcNow<span class=\\\"token punctuation\\\">,</span>\\n                Message <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span>Exception<span class=\\\"token punctuation\\\">.</span>Message<span class=\\\"token punctuation\\\">,</span>\\n                Details <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span>Exception<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n            db<span class=\\\"token punctuation\\\">.</span>ErrorLogs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Add</span><span class=\\\"token punctuation\\\">(</span>errorLog<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">await</span> db<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SaveChangesAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            context<span class=\\\"token punctuation\\\">.</span>Exception<span class=\\\"token punctuation\\\">.</span>Data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"errorLogId\\\"</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> errorLog<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">catch</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>You can also override the serialized exception by setting <code class=\\\"language-text\\\">context.Exception</code>, or simply replace\\nthe message by setting <code class=\\\"language-text\\\">context.ErrorMessage</code> such as in this example:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">options<span class=\\\"token punctuation\\\">.</span>UnhandledExecutionDelegate <span class=\\\"token operator\\\">=</span> ctx <span class=\\\"token operator\\\">=></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>Exception <span class=\\\"token keyword\\\">is</span> <span class=\\\"token class-name\\\">SqlException</span><span class=\\\"token punctuation\\\">)</span>\\n        ctx<span class=\\\"token punctuation\\\">.</span>ErrorMessage <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"A database error has occurred.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"error-serialization\\\"><a href=\\\"#error-serialization\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Error Serialization</h2>\\n<p>After the <code class=\\\"language-text\\\">DocumentExecuter</code> has returned a <code class=\\\"language-text\\\">ExecutionResult</code> containing the data and/or errors,\\ntypically you will pass this object to an implementation of <code class=\\\"language-text\\\">IGraphQLSerializer</code> to convert the\\nobject tree into json. The <code class=\\\"language-text\\\">IGraphQLSerializer</code> implementations provided by the <code class=\\\"language-text\\\">GraphQL.SystemTextJson</code>\\nand <code class=\\\"language-text\\\">GraphQL.NewtonsoftJson</code> packages allow you to configure error serialization by providing an\\n<code class=\\\"language-text\\\">IErrorInfoProvider</code> implementation. If you are using a dependency injection framework, you can register\\nthe <code class=\\\"language-text\\\">IErrorInfoProvider</code> instance and it will be consumed by the <code class=\\\"language-text\\\">IGraphQLSerializer</code> implementation\\nautomatically. Please review the <a href=\\\"../guides/serialization\\\">serialization</a> documentation for more details.</p>\\n<h2 id=\\\"a-namevalidationerrorsavalidation-error-reference-list\\\"><a href=\\\"#a-namevalidationerrorsavalidation-error-reference-list\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a name=\\\"ValidationErrors\\\"></a>Validation error reference list</h2>\\n<p>Here is a full list of validation errors produced by GraphQL.NET:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Rule</th>\\n<th>Code</th>\\n<th>Number</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>UniqueOperationNames</td>\\n<td><code class=\\\"language-text\\\">UNIQUE_OPERATION_NAMES</code></td>\\n<td>5.2.1.1</td>\\n</tr>\\n<tr>\\n<td>LoneAnonymousOperation</td>\\n<td><code class=\\\"language-text\\\">LONE_ANONYMOUS_OPERATION</code></td>\\n<td>5.2.2.1</td>\\n</tr>\\n<tr>\\n<td>SingleRootFieldSubscriptions</td>\\n<td><code class=\\\"language-text\\\">SINGLE_ROOT_FIELD_SUBSCRIPTIONS</code></td>\\n<td>5.2.3.1</td>\\n</tr>\\n<tr>\\n<td>FieldsOnCorrectType</td>\\n<td><code class=\\\"language-text\\\">FIELDS_ON_CORRECT_TYPE</code></td>\\n<td>5.3.1</td>\\n</tr>\\n<tr>\\n<td>OverlappingFieldsCanBeMerged</td>\\n<td><code class=\\\"language-text\\\">OVERLAPPING_FIELDS_CAN_BE_MERGED</code></td>\\n<td>5.3.2</td>\\n</tr>\\n<tr>\\n<td>ScalarLeafs</td>\\n<td><code class=\\\"language-text\\\">SCALAR_LEAFS</code></td>\\n<td>5.3.3</td>\\n</tr>\\n<tr>\\n<td>KnownArgumentNames</td>\\n<td><code class=\\\"language-text\\\">KNOWN_ARGUMENT_NAMES</code></td>\\n<td>5.4.1</td>\\n</tr>\\n<tr>\\n<td>UniqueArgumentNames</td>\\n<td><code class=\\\"language-text\\\">UNIQUE_ARGUMENT_NAMES</code></td>\\n<td>5.4.2</td>\\n</tr>\\n<tr>\\n<td>ProvidedNonNullArguments</td>\\n<td><code class=\\\"language-text\\\">PROVIDED_NON_NULL_ARGUMENTS</code></td>\\n<td>5.4.2.1</td>\\n</tr>\\n<tr>\\n<td>UniqueFragmentNames</td>\\n<td><code class=\\\"language-text\\\">UNIQUE_FRAGMENT_NAMES</code></td>\\n<td>5.5.1.1</td>\\n</tr>\\n<tr>\\n<td>KnownTypeNames</td>\\n<td><code class=\\\"language-text\\\">KNOWN_TYPE_NAMES</code></td>\\n<td>5.5.1.2</td>\\n</tr>\\n<tr>\\n<td>FragmentsOnCompositeTypes</td>\\n<td><code class=\\\"language-text\\\">FRAGMENTS_ON_COMPOSITE_TYPES</code></td>\\n<td>5.5.1.3</td>\\n</tr>\\n<tr>\\n<td>NoUnusedFragments</td>\\n<td><code class=\\\"language-text\\\">NO_UNUSED_FRAGMENTS</code></td>\\n<td>5.5.1.4</td>\\n</tr>\\n<tr>\\n<td>KnownFragmentNames</td>\\n<td><code class=\\\"language-text\\\">KNOWN_FRAGMENT_NAMES</code></td>\\n<td>5.5.2.1</td>\\n</tr>\\n<tr>\\n<td>NoFragmentCycles</td>\\n<td><code class=\\\"language-text\\\">NO_FRAGMENT_CYCLES</code></td>\\n<td>5.5.2.2</td>\\n</tr>\\n<tr>\\n<td>PossibleFragmentSpreads</td>\\n<td><code class=\\\"language-text\\\">POSSIBLE_FRAGMENT_SPREADS</code></td>\\n<td>5.5.2.3</td>\\n</tr>\\n<tr>\\n<td>ArgumentsOfCorrectType</td>\\n<td><code class=\\\"language-text\\\">ARGUMENTS_OF_CORRECT_TYPE</code></td>\\n<td>5.6.1</td>\\n</tr>\\n<tr>\\n<td>DefaultValuesOfCorrectType</td>\\n<td><code class=\\\"language-text\\\">DEFAULT_VALUES_OF_CORRECT_TYPE</code></td>\\n<td>5.6.1</td>\\n</tr>\\n<tr>\\n<td>UniqueInputFieldNames</td>\\n<td><code class=\\\"language-text\\\">UNIQUE_INPUT_FIELD_NAMES</code></td>\\n<td>5.6.3</td>\\n</tr>\\n<tr>\\n<td>KnownDirectivesInAllowedLocations</td>\\n<td><code class=\\\"language-text\\\">KNOWN_DIRECTIVES</code></td>\\n<td>5.7.1</td>\\n</tr>\\n<tr>\\n<td>KnownDirectivesInAllowedLocations</td>\\n<td><code class=\\\"language-text\\\">DIRECTIVES_IN_ALLOWED_LOCATIONS</code></td>\\n<td>5.7.2</td>\\n</tr>\\n<tr>\\n<td>UniqueDirectivesPerLocation</td>\\n<td><code class=\\\"language-text\\\">UNIQUE_DIRECTIVES_PER_LOCATION</code></td>\\n<td>5.7.3</td>\\n</tr>\\n<tr>\\n<td>UniqueVariableNames</td>\\n<td><code class=\\\"language-text\\\">UNIQUE_VARIABLE_NAMES</code></td>\\n<td>5.8.1</td>\\n</tr>\\n<tr>\\n<td>VariablesAreInputTypes</td>\\n<td><code class=\\\"language-text\\\">VARIABLES_ARE_INPUT_TYPES</code></td>\\n<td>5.8.2</td>\\n</tr>\\n<tr>\\n<td>NoUndefinedVariables</td>\\n<td><code class=\\\"language-text\\\">NO_UNDEFINED_VARIABLES</code></td>\\n<td>5.8.3</td>\\n</tr>\\n<tr>\\n<td>NoUnusedVariables</td>\\n<td><code class=\\\"language-text\\\">NO_UNUSED_VARIABLES</code></td>\\n<td>5.8.4</td>\\n</tr>\\n<tr>\\n<td>VariablesInAllowedPosition</td>\\n<td><code class=\\\"language-text\\\">VARIABLES_IN_ALLOWED_POSITION</code></td>\\n<td>5.8.5</td>\\n</tr>\\n</tbody>\\n</table>\",\"fields\":{\"relativePath\":\"docs/getting-started/errors.md\"}},\"site\":{\"siteMetadata\":{\"githubEditUrl\":\"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site\"}}},\"pathContext\":{\"relativePath\":\"docs/getting-started/errors.md\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-getting-started-errors-b38cddc7d08b30594f01.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"error-handling\\\"><a href=\\\"#error-handling\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Error Handling</h1>\\n<p>Errors within the GraphQL engine can be thought of as falling into one of three groups: schema errors,\\ninput errors and processing errors. For instance, if an invalid query was passed to the <code class=\\\"language-text\\\">DocumentExecuter</code>,\\nit would be considered an input error, and a <code class=\\\"language-text\\\">SyntaxError</code> would be thrown. Or if an invalid enum string\\nwas passed as a variable to a query, an <code class=\\\"language-text\\\">InvalidValueError</code> would be thrown. All validation rules that\\nfail their respective tests are treated as input errors. Processing errors typically represent unanticipated\\nexceptions occurring during the execution of a field resolver, such as a timeout during a database operation.</p>\\n<p>Input errors and processing errors are returned from the <code class=\\\"language-text\\\">DocumentExecuter</code> within the <code class=\\\"language-text\\\">ExecutionResult.Errors</code>\\nproperty as a list of <code class=\\\"language-text\\\">ExecutionError</code> objects. <code class=\\\"language-text\\\">ExecutionError</code> is derived from <code class=\\\"language-text\\\">Exception</code>, and the <code class=\\\"language-text\\\">Message</code>\\nproperty is serialized <a href=\\\"https://spec.graphql.org/October2021/#sec-Errors\\\">according to the spec</a>\\nwith location and path information. In addition, by default three additional pieces of information are serialized\\nto the <code class=\\\"language-text\\\">extensions</code> property of the GraphQL error which contain:</p>\\n<ul>\\n<li>Within <code class=\\\"language-text\\\">code</code>, the <code class=\\\"language-text\\\">Code</code> property of the <code class=\\\"language-text\\\">ExecutionError</code>, if any,</li>\\n<li>Within <code class=\\\"language-text\\\">codes</code>, the <code class=\\\"language-text\\\">Code</code> property of the <code class=\\\"language-text\\\">ExecutionError</code> along with generated codes of any inner exceptions, if any, and</li>\\n<li>Within <code class=\\\"language-text\\\">data</code>, the contents of the <code class=\\\"language-text\\\">ExecutionError.Data</code> property, which by default contains the data of the inner exception, if any.</li>\\n</ul>\\n<p>Note that by default, messages from unhandled processing errors are masked and a\\ngeneric \\\"Error trying to resolve field '&#x3C;FIELD_NAME>'.\\\" or similar error is returned.</p>\\n<p>Here is a sample result of a <code class=\\\"language-text\\\">FormatException</code> thrown within a <code class=\\\"language-text\\\">product</code> field resolver (a processing error):</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"errors\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">\\\"message\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"Error trying to resolve field 'product'.\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token property\\\">\\\"locations\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token property\\\">\\\"line\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span>\\n          <span class=\\\"token property\\\">\\\"column\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">5</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token property\\\">\\\"path\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token string\\\">\\\"product\\\"</span>\\n      <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token property\\\">\\\"extensions\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token property\\\">\\\"code\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"FORMAT\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token property\\\">\\\"codes\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n          <span class=\\\"token string\\\">\\\"FORMAT\\\"</span>\\n        <span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"schema-errors\\\"><a href=\\\"#schema-errors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Schema Errors</h2>\\n<p>Schema errors throw an exception during the process of defining or building the schema. For instance,\\nadding a two fields of the same name to a GraphQL type would result in an <code class=\\\"language-text\\\">ArgumentOutOfRangeException</code>\\nwhile attempting to add the second field. Another example would be if a schema defined an invalid union;\\nan error would be thrown while the schema was being initialized within <code class=\\\"language-text\\\">DocumentExecuter</code> and caught as\\nan unhandled exception (see <a href=\\\"#ProcessingErrors\\\">Processing Errors</a> below).</p>\\n<h2 id=\\\"input-errors\\\"><a href=\\\"#input-errors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Input Errors</h2>\\n<p>All input errors generated by GraphQL.NET derive from <code class=\\\"language-text\\\">DocumentError</code>. Below is a list of error\\nmessages and their respective error classes and codes:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Description</th>\\n<th>Error class</th>\\n<th>Code</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Empty query document</td>\\n<td>NoOperationError</td>\\n<td>NO_OPERATION</td>\\n</tr>\\n<tr>\\n<td>Query parsing error</td>\\n<td>SyntaxError</td>\\n<td>SYNTAX_ERROR</td>\\n</tr>\\n<tr>\\n<td>Attempting a mutation or subscription when none are defined</td>\\n<td>InvalidOperationError</td>\\n<td>INVALID_OPERATION</td>\\n</tr>\\n<tr>\\n<td>Invalid variable values</td>\\n<td>InvalidVariableError</td>\\n<td>INVALID_VALUE</td>\\n</tr>\\n<tr>\\n<td>Validation errors</td>\\n<td>derived from ValidationError</td>\\n<td><a href=\\\"#ValidationErrors\\\">(varies; see list below)</a></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Field resolvers can manually trigger an input error by throwing an <code class=\\\"language-text\\\">ExecutionError</code> or derived class.\\nAny other thrown error is treated as a processing error (see <a href=\\\"#ProcessingErrors\\\">Processing Errors</a> below).\\nHere is an example of typical validation within a field resolver that returns an input error:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>OrderGraph<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"order\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token named-parameter punctuation\\\">arguments</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>IntGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token punctuation\\\">{</span> Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"id\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> order <span class=\\\"token operator\\\">=</span> _orderService<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetById</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>order <span class=\\\"token operator\\\">==</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">ExecutionError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Invalid order id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>You can also add errors to the <code class=\\\"language-text\\\">IResolveFieldContext.Errors</code> property directly.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DroidType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">\\\"hero\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span> context<span class=\\\"token punctuation\\\">.</span>Errors<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">ExecutionError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Error Message\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"a-nameprocessingerrorsaprocessing-errors\\\"><a href=\\\"#a-nameprocessingerrorsaprocessing-errors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a name=\\\"ProcessingErrors\\\"></a>Processing Errors</h2>\\n<p>Processing errors should only occur if an exception is thrown from within a field resolver.\\nFor instance, if you execute <code class=\\\"language-text\\\">.Single()</code> on an empty array, causing an <code class=\\\"language-text\\\">InvalidOperationException</code>\\nto be thrown. These types of errors are most likely to be bugs or connection problems, such as a\\nconnection error when communicating to a database. There are also two other types of processing\\nerrors to be aware of:</p>\\n<ul>\\n<li>Calling <code class=\\\"language-text\\\">context.GetArgument&lt;></code> with a type that does not match the argument type, when the system\\ncannot perform the conversion – for instance, calling <code class=\\\"language-text\\\">context.GetArgument&lt;Guid>(\\\"arg\\\")</code> on an argument\\nof type <code class=\\\"language-text\\\">IntGraphType</code>, and</li>\\n<li>Returning data from a field resolver that does not match the graph type of field resolver, when the\\nsystem cannot perform the conversion.</li>\\n</ul>\\n<p>Processing errors can be thrown back to the caller of <code class=\\\"language-text\\\">DocumentExecuter.ExecuteAsync</code> by setting the\\n<code class=\\\"language-text\\\">ExecutionOptions.ThrowOnUnhandledExceptions</code> property to <code class=\\\"language-text\\\">true</code>. When this property is set to <code class=\\\"language-text\\\">false</code>,\\nthe default setting, unhandled exceptions are wrapped in an <code class=\\\"language-text\\\">UnhandledError</code> and added with a generic\\nerror message to the <code class=\\\"language-text\\\">ExecutionResult.Errors</code> property. Error codes are dynamically generated from the\\ninner exceptions of the wrapped exception and also returned along with data contained within the inner\\nexception's <code class=\\\"language-text\\\">Data</code> property.</p>\\n<p>You can also handle these processing exceptions by setting a delegate within the\\n<code class=\\\"language-text\\\">ExecutionOptions.UnhandledExceptionDelegate</code> property. Within the delegate you can log the error message\\nand stack trace for debugging needs. You can also override the generic error message with a more specific\\nmessage, wrap or replace the exception with your own <code class=\\\"language-text\\\">ExecutionError</code> class, and/or set the codes and data\\nas necessary. Note that if <code class=\\\"language-text\\\">ThrowOnUnhandledExceptions</code> is <code class=\\\"language-text\\\">true</code>, the <code class=\\\"language-text\\\">UnhandledExceptionDelegate</code> will not be called.</p>\\n<p>Here is a sample of a typical unhandled exception delegate which logs the error to a database.\\nIt also returns the log id along with the error message:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> executer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">DocumentExecuter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> result <span class=\\\"token operator\\\">=</span> executer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ExecuteAsync</span><span class=\\\"token punctuation\\\">(</span>options <span class=\\\"token operator\\\">=></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n\\n    <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span>\\n\\n    options<span class=\\\"token punctuation\\\">.</span>UnhandledExceptionDelegate <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">async</span> context <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">try</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">using</span> <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> db <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">MyDatabaseContext</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> errorLog <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">ErrorLog</span> <span class=\\\"token punctuation\\\">{</span>\\n                DateStamp <span class=\\\"token operator\\\">=</span> DateTime<span class=\\\"token punctuation\\\">.</span>UtcNow<span class=\\\"token punctuation\\\">,</span>\\n                Message <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span>Exception<span class=\\\"token punctuation\\\">.</span>Message<span class=\\\"token punctuation\\\">,</span>\\n                Details <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span>Exception<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n            db<span class=\\\"token punctuation\\\">.</span>ErrorLogs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Add</span><span class=\\\"token punctuation\\\">(</span>errorLog<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">await</span> db<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SaveChangesAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            context<span class=\\\"token punctuation\\\">.</span>Exception<span class=\\\"token punctuation\\\">.</span>Data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"errorLogId\\\"</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> errorLog<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">catch</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>You can also override the serialized exception by setting <code class=\\\"language-text\\\">context.Exception</code>, or simply replace\\nthe message by setting <code class=\\\"language-text\\\">context.ErrorMessage</code> such as in this example:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">options<span class=\\\"token punctuation\\\">.</span>UnhandledExecutionDelegate <span class=\\\"token operator\\\">=</span> ctx <span class=\\\"token operator\\\">=></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>Exception <span class=\\\"token keyword\\\">is</span> <span class=\\\"token class-name\\\">SqlException</span><span class=\\\"token punctuation\\\">)</span>\\n        ctx<span class=\\\"token punctuation\\\">.</span>ErrorMessage <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"A database error has occurred.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h2 id=\\\"error-serialization\\\"><a href=\\\"#error-serialization\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Error Serialization</h2>\\n<p>After the <code class=\\\"language-text\\\">DocumentExecuter</code> has returned a <code class=\\\"language-text\\\">ExecutionResult</code> containing the data and/or errors,\\ntypically you will pass this object to an implementation of <code class=\\\"language-text\\\">IGraphQLSerializer</code> to convert the\\nobject tree into json. The <code class=\\\"language-text\\\">IGraphQLSerializer</code> implementations provided by the <code class=\\\"language-text\\\">GraphQL.SystemTextJson</code>\\nand <code class=\\\"language-text\\\">GraphQL.NewtonsoftJson</code> packages allow you to configure error serialization by providing an\\n<code class=\\\"language-text\\\">IErrorInfoProvider</code> implementation. If you are using a dependency injection framework, you can register\\nthe <code class=\\\"language-text\\\">IErrorInfoProvider</code> instance and it will be consumed by the <code class=\\\"language-text\\\">IGraphQLSerializer</code> implementation\\nautomatically. Please review the <a href=\\\"../guides/serialization\\\">serialization</a> documentation for more details.</p>\\n<h2 id=\\\"a-namevalidationerrorsavalidation-error-reference-list\\\"><a href=\\\"#a-namevalidationerrorsavalidation-error-reference-list\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a name=\\\"ValidationErrors\\\"></a>Validation error reference list</h2>\\n<p>Here is a full list of validation errors produced by GraphQL.NET:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Rule</th>\\n<th>Code</th>\\n<th>Number</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>UniqueOperationNames</td>\\n<td><code class=\\\"language-text\\\">UNIQUE_OPERATION_NAMES</code></td>\\n<td>5.2.1.1</td>\\n</tr>\\n<tr>\\n<td>LoneAnonymousOperation</td>\\n<td><code class=\\\"language-text\\\">LONE_ANONYMOUS_OPERATION</code></td>\\n<td>5.2.2.1</td>\\n</tr>\\n<tr>\\n<td>SingleRootFieldSubscriptions</td>\\n<td><code class=\\\"language-text\\\">SINGLE_ROOT_FIELD_SUBSCRIPTIONS</code></td>\\n<td>5.2.3.1</td>\\n</tr>\\n<tr>\\n<td>FieldsOnCorrectType</td>\\n<td><code class=\\\"language-text\\\">FIELDS_ON_CORRECT_TYPE</code></td>\\n<td>5.3.1</td>\\n</tr>\\n<tr>\\n<td>OverlappingFieldsCanBeMerged</td>\\n<td><code class=\\\"language-text\\\">OVERLAPPING_FIELDS_CAN_BE_MERGED</code></td>\\n<td>5.3.2</td>\\n</tr>\\n<tr>\\n<td>ScalarLeafs</td>\\n<td><code class=\\\"language-text\\\">SCALAR_LEAFS</code></td>\\n<td>5.3.3</td>\\n</tr>\\n<tr>\\n<td>KnownArgumentNames</td>\\n<td><code class=\\\"language-text\\\">KNOWN_ARGUMENT_NAMES</code></td>\\n<td>5.4.1</td>\\n</tr>\\n<tr>\\n<td>UniqueArgumentNames</td>\\n<td><code class=\\\"language-text\\\">UNIQUE_ARGUMENT_NAMES</code></td>\\n<td>5.4.2</td>\\n</tr>\\n<tr>\\n<td>ProvidedNonNullArguments</td>\\n<td><code class=\\\"language-text\\\">PROVIDED_NON_NULL_ARGUMENTS</code></td>\\n<td>5.4.2.1</td>\\n</tr>\\n<tr>\\n<td>UniqueFragmentNames</td>\\n<td><code class=\\\"language-text\\\">UNIQUE_FRAGMENT_NAMES</code></td>\\n<td>5.5.1.1</td>\\n</tr>\\n<tr>\\n<td>KnownTypeNames</td>\\n<td><code class=\\\"language-text\\\">KNOWN_TYPE_NAMES</code></td>\\n<td>5.5.1.2</td>\\n</tr>\\n<tr>\\n<td>FragmentsOnCompositeTypes</td>\\n<td><code class=\\\"language-text\\\">FRAGMENTS_ON_COMPOSITE_TYPES</code></td>\\n<td>5.5.1.3</td>\\n</tr>\\n<tr>\\n<td>NoUnusedFragments</td>\\n<td><code class=\\\"language-text\\\">NO_UNUSED_FRAGMENTS</code></td>\\n<td>5.5.1.4</td>\\n</tr>\\n<tr>\\n<td>KnownFragmentNames</td>\\n<td><code class=\\\"language-text\\\">KNOWN_FRAGMENT_NAMES</code></td>\\n<td>5.5.2.1</td>\\n</tr>\\n<tr>\\n<td>NoFragmentCycles</td>\\n<td><code class=\\\"language-text\\\">NO_FRAGMENT_CYCLES</code></td>\\n<td>5.5.2.2</td>\\n</tr>\\n<tr>\\n<td>PossibleFragmentSpreads</td>\\n<td><code class=\\\"language-text\\\">POSSIBLE_FRAGMENT_SPREADS</code></td>\\n<td>5.5.2.3</td>\\n</tr>\\n<tr>\\n<td>ArgumentsOfCorrectType</td>\\n<td><code class=\\\"language-text\\\">ARGUMENTS_OF_CORRECT_TYPE</code></td>\\n<td>5.6.1</td>\\n</tr>\\n<tr>\\n<td>DefaultValuesOfCorrectType</td>\\n<td><code class=\\\"language-text\\\">DEFAULT_VALUES_OF_CORRECT_TYPE</code></td>\\n<td>5.6.1</td>\\n</tr>\\n<tr>\\n<td>UniqueInputFieldNames</td>\\n<td><code class=\\\"language-text\\\">UNIQUE_INPUT_FIELD_NAMES</code></td>\\n<td>5.6.3</td>\\n</tr>\\n<tr>\\n<td>KnownDirectivesInAllowedLocations</td>\\n<td><code class=\\\"language-text\\\">KNOWN_DIRECTIVES</code></td>\\n<td>5.7.1</td>\\n</tr>\\n<tr>\\n<td>KnownDirectivesInAllowedLocations</td>\\n<td><code class=\\\"language-text\\\">DIRECTIVES_IN_ALLOWED_LOCATIONS</code></td>\\n<td>5.7.2</td>\\n</tr>\\n<tr>\\n<td>UniqueDirectivesPerLocation</td>\\n<td><code class=\\\"language-text\\\">UNIQUE_DIRECTIVES_PER_LOCATION</code></td>\\n<td>5.7.3</td>\\n</tr>\\n<tr>\\n<td>UniqueVariableNames</td>\\n<td><code class=\\\"language-text\\\">UNIQUE_VARIABLE_NAMES</code></td>\\n<td>5.8.1</td>\\n</tr>\\n<tr>\\n<td>VariablesAreInputTypes</td>\\n<td><code class=\\\"language-text\\\">VARIABLES_ARE_INPUT_TYPES</code></td>\\n<td>5.8.2</td>\\n</tr>\\n<tr>\\n<td>NoUndefinedVariables</td>\\n<td><code class=\\\"language-text\\\">NO_UNDEFINED_VARIABLES</code></td>\\n<td>5.8.3</td>\\n</tr>\\n<tr>\\n<td>NoUnusedVariables</td>\\n<td><code class=\\\"language-text\\\">NO_UNUSED_VARIABLES</code></td>\\n<td>5.8.4</td>\\n</tr>\\n<tr>\\n<td>VariablesInAllowedPosition</td>\\n<td><code class=\\\"language-text\\\">VARIABLES_IN_ALLOWED_POSITION</code></td>\\n<td>5.8.5</td>\\n</tr>\\n</tbody>\\n</table>\",\"fields\":{\"relativePath\":\"docs/getting-started/errors.md\"}},\"site\":{\"siteMetadata\":{\"githubEditUrl\":\"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site\"}}},\"pathContext\":{\"relativePath\":\"docs/getting-started/errors.md\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-getting-started-errors.json\n// module id = 316\n// module chunks = 75494656540334"],"sourceRoot":""}