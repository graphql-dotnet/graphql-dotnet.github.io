webpackJsonp([0x99bd72fd83a1],{347:function(a,e){a.exports={data:{markdownRemark:{html:'<h1 id="migrating-from-v4x-to-v5x"><a href="#migrating-from-v4x-to-v5x" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Migrating from v4.x to v5.x</h1>\n<p>See <a href="https://github.com/graphql-dotnet/graphql-dotnet/issues?q=milestone%3A5.0+is%3Aissue+is%3Aclosed">issues</a> and <a href="https://github.com/graphql-dotnet/graphql-dotnet/pulls?q=is%3Apr+milestone%3A5.0+is%3Aclosed">pull requests</a> done in v5.</p>\n<h2 id="new-features"><a href="#new-features" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>New Features</h2>\n<h3 id="1-donotmapclrtype-attribute-can-now-be-placed-on-the-graph-type-or-the-clr-type"><a href="#1-donotmapclrtype-attribute-can-now-be-placed-on-the-graph-type-or-the-clr-type" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>1. DoNotMapClrType attribute can now be placed on the graph type or the CLR type</h3>\n<p>When using the <code class="language-text">.AddClrTypeMappings()</code> builder extension method, GraphQL.NET scans the\nspecified assembly for graph types that inherit from <code class="language-text">ObjectGraphType&lt;T></code> and adds a\nmapping for the CLR type represented by <code class="language-text">T</code> with the graph type it matched upon.\nIt skips adding a mapping for any graph type marked with the <code class="language-text">[DoNotMapClrType]</code> attribute.\nIn v5, it will also skip adding the mapping if the CLR type is marked with the\n<code class="language-text">[DoNotMapClrType]</code> attribute.</p>\n<h3 id="2-input-extensions-support"><a href="#2-input-extensions-support" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2. Input Extensions support</h3>\n<p><code class="language-text">Extensions</code> deserialized from GraphQL requests can now be set on the <code class="language-text">ExecutionOptions.Extensions</code> property\nand passed through to field resolvers via <code class="language-text">IResolveFieldContext.InputExtensions</code>. Note that standard .NET\ndictionaries (such as <code class="language-text">Dictionary&lt;TKey, TValue></code>) are thread-safe for read-only operations. Also you can\naccess these extensions from validation rules via <code class="language-text">ValidationContext.Extensions</code>.</p>\n<h3 id="3-improved-graphql-parser"><a href="#3-improved-graphql-parser" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3. Improved GraphQL-Parser</h3>\n<p>GraphQL.NET v5 uses GraphQL-Parser v8. This release brought numerous changes in the parser object model,\nwhich began to better fit the <a href="https://spec.graphql.org/October2021/">latest version</a> of the published\nofficial GraphQL specification. GraphQL-Parser v8 has a lot of backward incompatible changes, but you are\nunlikely to come across them if you do not use advanced features.</p>\n<h3 id="4-code-classlanguage-textigraphqlserializercode-interface-with-json-deserialization-support"><a href="#4-code-classlanguage-textigraphqlserializercode-interface-with-json-deserialization-support" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4. <code class="language-text">IGraphQLSerializer</code> interface with JSON deserialization support</h3>\n<p><code class="language-text">IGraphQLSerializer.ReadAsync</code> is implemented by the <code class="language-text">GraphQL.SystemTextJson</code> and\n<code class="language-text">GraphQL.NewtonsoftJson</code> libraries. It supports deserialization of any type, with\nspecial support for the <code class="language-text">GraphQLRequest</code> class. It also supports deserializing to\na <code class="language-text">IList&lt;GraphQLRequest></code>, which will deserialize multiple requests or\na single request (with or without the JSON array wrapper) into a list.</p>\n<p>When calling the <code class="language-text">AddSystemTextJson</code> or <code class="language-text">AddNewtonsoftJson</code> extension method to\nthe <code class="language-text">IGraphQLBuilder</code> interface, the method will register the <code class="language-text">IGraphQLSerializer</code>\nand <code class="language-text">IGraphQLTextSerializer</code> interfaces with the appropriate\nserialization engine. These interfaces handle both serialization and deserialization\nof objects.</p>\n<p>This makes it so that you can write JSON-based transport code independent of the\nJSON serialization engine used by your application, simplifying the most common use\ncase, while still being configurable through your DI framework.</p>\n<p>You can also use <code class="language-text">IGraphQLTextSerializer.ReadNode</code> to deserialize a framework-dependent\nJSON element node, stored within an <code class="language-text">object</code>, into a specific type. The specific\nserialization engine you are using may have additional <code class="language-text">Read</code> members as would be expected\nfor that library.</p>\n<p>Be aware that <code class="language-text">System.Text.Json</code> defaults to case-sensitive deserialization, while\n<code class="language-text">Newtonsoft.Json</code> defaults to case-insensitive deserialization. However, the supported\ndata models (such as <code class="language-text">GraphQLRequest</code> and <code class="language-text">OperationMessage</code>) will always deserialize\nwith case-sensitive camelCase deserialization. You can write your own data classes\nwhich will behave in the default manner of the serializer\'s configuration. You can\nconfigure the serializer to use camelCase for all properties by default. You can also\ntag properties with serializer-specific attributes to change deserialization behavior,\nsuch as adding a <code class="language-text">JsonPropertyName</code> attribute to a data member to override its\nserialized property name.</p>\n<p>Specific support is provided for serializing and deserializing to the following data models:</p>\n<table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class="language-text">ExecutionResult</code></td>\n<td>Only serialization is supported</td>\n</tr>\n<tr>\n<td><code class="language-text">ExecutionError</code></td>\n<td>Only serialization is supported</td>\n</tr>\n<tr>\n<td><code class="language-text">GraphQLRequest</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class="language-text">IList&lt;GraphQLRequest></code></td>\n<td>Other common collection variations, such as \n<code class="language-text">IEnumerable&lt;></code>\n or \n<code class="language-text">List&lt;></code>\n, are also supported</td>\n</tr>\n<tr>\n<td><code class="language-text">OperationMessage</code></td>\n<td><code class="language-text">Payload</code>\n is an \n<code class="language-text">object</code>\n and can be deserialized to \n<code class="language-text">GraphQLRequest</code>\n via \n<code class="language-text">ReadNode</code></td>\n</tr>\n<tr>\n<td><code class="language-text">ApolloTrace</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class="language-text">Inputs</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Note that when deserializing a <code class="language-text">IList&lt;GraphQLRequest></code>, and when the JSON data is a\nsingle request rather than a list of requests, the request will be deserialized into\na list or array of a single item. For example, <code class="language-text">{"query":"{ hero }"}</code> deserializes into\n<code class="language-text">new[] { new GraphQLRequest { Query = "{ hero }" }}</code>.</p>\n<h3 id="5-code-classlanguage-textigraphqltextserializercode-interface-to-support-serialization-tofrom-strings"><a href="#5-code-classlanguage-textigraphqltextserializercode-interface-to-support-serialization-tofrom-strings" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>5. <code class="language-text">IGraphQLTextSerializer</code> interface to support serialization to/from strings.</h3>\n<p><code class="language-text">IGraphQLTextSerializer.Serialize</code> and <code class="language-text">IGraphQLTextSerializer.Deserialize</code> support\nserializing objects to and from <code class="language-text">string</code> values. For the <code class="language-text">GraphQL.SystemTextJson</code>\nand <code class="language-text">GraphQL.NewtonsoftJson</code> libraries, these serialize and deserialize to JSON strings.</p>\n<h3 id="6-code-classlanguage-textautoregisteringobjectgraphtypecode-and-code-classlanguage-textautoregisteringinputobjectgraphtypecode-enhancements"><a href="#6-code-classlanguage-textautoregisteringobjectgraphtypecode-and-code-classlanguage-textautoregisteringinputobjectgraphtypecode-enhancements" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>6. <code class="language-text">AutoRegisteringObjectGraphType</code> and <code class="language-text">AutoRegisteringInputObjectGraphType</code> enhancements</h3>\n<p>These two classes now provide a range of customizable behavior for data models without the\nneed for creating individual graph types for each data model. New for v5, fields\' names\nand graph types can be customized by applying attributes to the respective property, such\nas is shown in the below example:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// graph type: AutoRegisteringObjectGraphType&lt;Person></span>\n\n<span class="token keyword">class</span> <span class="token class-name">Person</span>\n<span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Name</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Id"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OutputType</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IdGraphType</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> PersonId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">GraphQLAuthorize</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Administrators"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Employee\'s job position"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h4 id="nullable-reference-type-attribute-interpretation"><a href="#nullable-reference-type-attribute-interpretation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Nullable reference type attribute interpretation</h4>\n<p>When the CLR type has nullable reference type annotations, these annotations\nare read and interpreted by GraphQL.NET when constructing the graph type.\nFor instance, this is how the following CLR types are mapped to graph types\nafter schema initialization:</p>\n<table>\n<thead>\n<tr>\n<th>CLR type</th>\n<th>Graph type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class="language-text">string?</code></td>\n<td><code class="language-text">StringGraphType</code></td>\n</tr>\n<tr>\n<td><code class="language-text">string</code></td>\n<td><code class="language-text">NonNullGraphType&lt;StringGraphType></code></td>\n</tr>\n<tr>\n<td><code class="language-text">List&lt;int></code></td>\n<td><code class="language-text">NonNullGraphType&lt;ListGraphType&lt;NonNullGraphType&lt;IntGraphType>>></code></td>\n</tr>\n</tbody>\n</table>\n<p>CLR type mappings registered in the schema are supported as well.</p>\n<p>In addition to the above, if the <code class="language-text">[Id]</code> attribute is marked on the property,\nit will override the interpreted graph type such as in the following examples:</p>\n<table>\n<thead>\n<tr>\n<th>CLR type marked with \n<code class="language-text">[Id]</code></th>\n<th>Graph type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class="language-text">string?</code></td>\n<td><code class="language-text">IdGraphType</code></td>\n</tr>\n<tr>\n<td><code class="language-text">string</code></td>\n<td><code class="language-text">NonNullGraphType&lt;IdGraphType></code></td>\n</tr>\n<tr>\n<td><code class="language-text">List&lt;int></code></td>\n<td><code class="language-text">NonNullGraphType&lt;ListGraphType&lt;NonNullGraphType&lt;IdGraphType>>></code></td>\n</tr>\n</tbody>\n</table>\n<p>Custom attributes can also be added to perform the following behavior changes:</p>\n<ul>\n<li>Override detected underlying CLR type</li>\n<li>Override detected nullability or list nullability state</li>\n<li>Override chosen underlying graph type</li>\n</ul>\n<h4 id="method-and-argument-support-for-code-classlanguage-textautoregisteringobjectgraphtypelttcode-instances"><a href="#method-and-argument-support-for-code-classlanguage-textautoregisteringobjectgraphtypelttcode-instances" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Method and argument support for <code class="language-text">AutoRegisteringObjectGraphType&lt;T></code> instances</h4>\n<p>Methods will be detected and added to fields on the graph. Asynchronous methods\nand data loader methods are supported such as shown in the below example:</p>\n<table>\n<thead>\n<tr>\n<th>CLR type</th>\n<th>Graph type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class="language-text">Task&lt;string></code></td>\n<td><code class="language-text">NonNullGraphType&lt;StringGraphType></code></td>\n</tr>\n<tr>\n<td><code class="language-text">IDataLoaderResult&lt;Person?></code></td>\n<td><code class="language-text">PersonGraphType</code></td>\n</tr>\n</tbody>\n</table>\n<p>The above example assumes that the <code class="language-text">Person</code> CLR type was mapped to <code class="language-text">PersonGraphType</code>\nin the schema CLR type mappings.</p>\n<p>Arguments are also added as query arguments to the field, and recognize default values\nand other attributes set on the parameter. Certain argument types are recognized and\ntreated special; special fields do not add a query argument to the field:</p>\n<table>\n<thead>\n<tr>\n<th>Argument type</th>\n<th>Value passed to the method</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class="language-text">IResolveFieldContext</code></td>\n<td>The field resolver\'s context; useful in advanced scenarios</td>\n</tr>\n<tr>\n<td><code class="language-text">CancellationToken</code></td>\n<td>The cancellation token from the resolve context</td>\n</tr>\n<tr>\n<td>Any, tagged with \n<code class="language-text">[FromServices]</code></td>\n<td>Pulls the service of the argument type from the \n<code class="language-text">RequestServices</code>\n property of the resolve context</td>\n</tr>\n</tbody>\n</table>\n<p>Also note:</p>\n<ul>\n<li>Asynchronous methods that end in <code class="language-text">Async</code> have the "Async" suffix removed from the default field name.</li>\n<li>Methods tagged with <code class="language-text">[Scoped]</code> (when using <code class="language-text">GraphQL.MicrosoftDI</code>) create a service scope for the field resolver\'s execution.</li>\n</ul>\n<p>This allows for code such as the following:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Name</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Person"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Human</span>\n<span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Id</span></span><span class="token punctuation">]</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Name</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Orders"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Scoped</span></span><span class="token punctuation">]</span>\n    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IEnumerable<span class="token punctuation">&lt;</span>Order<span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">GetOrdersAsync</span><span class="token punctuation">(</span>\n        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromServices</span></span><span class="token punctuation">]</span> <span class="token class-name">MyDbContext</span> db<span class="token punctuation">,</span>\n        <span class="token class-name">CancellationToken</span> token<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Name</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Sort"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token class-name">SortOrder</span> sortOrder <span class="token operator">=</span> SortOrder<span class="token punctuation">.</span>Date<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> db<span class="token punctuation">.</span>Orders<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x<span class="token punctuation">.</span>HumanId <span class="token operator">==</span> Id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>sortOrder <span class="token operator">==</span> SortOrder<span class="token punctuation">.</span>Date<span class="token punctuation">)</span>\n            query <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">OrderByDesc</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x<span class="token punctuation">.</span>OrderDate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> query<span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SortOrder</span>\n<span class="token punctuation">{</span>\n    Date\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>The above code would generate a GraphQL schema like this:</p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token scalar">ID</span><span class="token operator">!</span>\n  <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span>\n  <span class="token attr-name">orders</span><span class="token punctuation">(</span><span class="token attr-name">sort</span><span class="token punctuation">:</span> <span class="token class-name">SortOrder</span><span class="token operator">!</span> <span class="token operator">=</span> <span class="token constant">DATE</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Order</span><span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h4 id="clr-field-support"><a href="#clr-field-support" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CLR field support</h4>\n<p>CLR fields are not automatically added to graph types, but can be added by overriding\nthe <code class="language-text">GetRegisteredMembers</code> method of a <code class="language-text">AutoRegisteringObjectGraphType&lt;T></code> or\n<code class="language-text">AutoRegisteringInputObjectGraphType&lt;T></code> instance.</p>\n<h4 id="overridable-base-functionality"><a href="#overridable-base-functionality" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overridable base functionality</h4>\n<p>The classes can be overridden, providing the ability to customize behavior of automatically\ngenerated graph types. For instance, to exclude properties of a certain type, you could write this:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">CustomAutoObjectType<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AutoRegisteringObjectGraphType<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>FieldType<span class="token punctuation">></span></span> <span class="token function">ProvideFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> props <span class="token operator">=</span> <span class="token function">GetRegisteredProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> prop <span class="token keyword">in</span> props<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span>PropertyType <span class="token operator">!=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyType</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token function">CreateField</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Similarly, by overriding <code class="language-text">CreateField</code> you can change the default name, description,\ngraph type, or other information applied to each generated field.</p>\n<p>Most of these changes can be performed declaratively by attributes, but by creating a derived class you can\nchange default behavior imperatively without needing to add attributes to all of your data models.</p>\n<p>These <code class="language-text">protected</code> methods can be overridden to provide the following customizations to\nautomatically-generated graph types:</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n<th>Typical use</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(constructor)</td>\n<td>Configures graph properties and adds fields</td>\n<td>Configuring graph after default initialization is complete</td>\n</tr>\n<tr>\n<td>ConfigureGraph</td>\n<td>Configures default graph properties prior to applying attributes</td>\n<td>Applying a different default naming convention, such as appending "Input" or "Model"</td>\n</tr>\n<tr>\n<td>GetRegisteredMembers</td>\n<td>Returns the set of properties, methods and fields to be automatically configured</td>\n<td>Filtering internal properties; sorting the property list; including fields; excluding methods</td>\n</tr>\n<tr>\n<td>ProvideFields</td>\n<td>Returns a set of generated fields</td>\n<td>Adding additional fields to the generated set</td>\n</tr>\n<tr>\n<td>CreateField</td>\n<td>Creates a \n<code class="language-text">FieldType</code>\n from a \n<code class="language-text">MemberInfo</code></td>\n<td>Applying custom behavior to field generation</td>\n</tr>\n<tr>\n<td>GetTypeInformation</td>\n<td>Parses a CLR type and NRT annotations to return a graph type</td>\n<td>Use a specific graph type for a certain CLR type</td>\n</tr>\n<tr>\n<td>GetArgumentInformation</td>\n<td>Parses a method argument to return a query argument or expression</td>\n<td>Return an expression for specific types, such as a user context</td>\n</tr>\n</tbody>\n</table>\n<p>Note that if you override <code class="language-text">GetRegisteredMembers</code> to include private properties or fields for\nan input graph, you may also need to override <code class="language-text">ParseDictionary</code> as well.</p>\n<p>If you utilize dependency injection within your schema, you can register your custom graph\ntype to be used instead of the built-in type as follows:</p>\n<div class="gatsby-highlight" data-language="cs">\n      <pre class="language-cs"><code class="language-cs">services<span class="token punctuation">.</span><span class="token function">AddSingleton</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">AutoRegisteringObjectGraphType<span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CustomAutoObjectType<span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Then any graph type defined as <code class="language-text">AutoRegisteringObjectGraphType&lt;...></code> will use your custom\ntype instead.</p>\n<h4 id="graphs-fields-and-arguments-recognize-attributes-to-control-initialization-behavior"><a href="#graphs-fields-and-arguments-recognize-attributes-to-control-initialization-behavior" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Graphs, fields and arguments recognize attributes to control initialization behavior</h4>\n<p>Any attribute that derives from <code class="language-text">GraphQLAttribute</code>, such as <code class="language-text">GraphQLAuthorizeAttribute</code>, can be set on a\nCLR class or one if its properties, fields, methods or method arguments and is configured for the graph,\nfield type or query argument. New attributes have been updated or added for convenience as follows:</p>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class="language-text">[Name]</code></td>\n<td>Specifies a GraphQL name for a CLR class, member or method parameter</td>\n</tr>\n<tr>\n<td><code class="language-text">[InputName]</code></td>\n<td>Specifies a GraphQL name for an input CLR class, member or method parameter</td>\n</tr>\n<tr>\n<td><code class="language-text">[OutputName]</code></td>\n<td>Specifies a GraphQL name for an output CLR class or member</td>\n</tr>\n<tr>\n<td><code class="language-text">[InputType]</code></td>\n<td>Specifies a graph type for a field on an input model, or for a query argument</td>\n</tr>\n<tr>\n<td><code class="language-text">[OutputType]</code></td>\n<td>Specifies a graph type for a field on an output model</td>\n</tr>\n<tr>\n<td><code class="language-text">[Ignore]</code></td>\n<td>Indicates that a CLR member should not be mapped to a field</td>\n</tr>\n<tr>\n<td><code class="language-text">[Metadata]</code></td>\n<td>Specifies custom metadata to be added to the graph type, field or query argument</td>\n</tr>\n<tr>\n<td><code class="language-text">[Scoped]</code></td>\n<td>For methods, specifies to create a DI service scope during resolver execution</td>\n</tr>\n<tr>\n<td><code class="language-text">[FromServices]</code></td>\n<td>For method parameters, specifies that the argument value should be pulled from DI</td>\n</tr>\n<tr>\n<td><code class="language-text">[FromSource]</code></td>\n<td>For method parameters, specifies that the argument value should be the context \'Source\'</td>\n</tr>\n<tr>\n<td><code class="language-text">[FromUserContext]</code></td>\n<td>For method parameters, specifies that the argument value should be the user context</td>\n</tr>\n<tr>\n<td><code class="language-text">[GraphQLAuthorize]</code></td>\n<td>Specifies an authorization policy for the graph type for field</td>\n</tr>\n<tr>\n<td><code class="language-text">[GraphQLMetadata]</code></td>\n<td>Specifies name, description, deprecation reason, or other properties for the graph type or field</td>\n</tr>\n</tbody>\n</table>\n<p>Note: <code class="language-text">[Scoped]</code> is provided through the GraphQL.MicrosoftDI NuGet package.</p>\n<p>Custom attributes can be easily added to control any other initialization of graphs, fields or query arguments.</p>\n<h3 id="7-more-strict-behavior-of-floatgraphtype-for-special-values"><a href="#7-more-strict-behavior-of-floatgraphtype-for-special-values" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>7. More strict behavior of FloatGraphType for special values</h3>\n<p>This is a spec-compliance issue (bug fix), that fixes parsing of Nan and -/+ Infinity values.\nThe spec says that:</p>\n<blockquote>\n<p>Non-finite floating-point internal values (NaN and Infinity) cannot be\ncoerced to Float and must raise a field error.</p>\n</blockquote>\n<h3 id="8-support-for-cancellation-at-validation-stage"><a href="#8-support-for-cancellation-at-validation-stage" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>8. Support for cancellation at validation stage</h3>\n<p>With new visitors design from GraphQL-Parser v8 it is possible now to cancel GraphQL request\nat validation stage before actual execution. <code class="language-text">DocumentExecuter</code> uses the same cancellation token\nspecified into <code class="language-text">ExecutionOptions</code> to pass into <code class="language-text">IDocumentValidator.ValidateAsync</code>.</p>\n<h3 id="9-code-classlanguage-textinputobjectgraphtypecode-supports-code-classlanguage-texttoastcodecode-classlanguage-textisvaliddefaultcode"><a href="#9-code-classlanguage-textinputobjectgraphtypecode-supports-code-classlanguage-texttoastcodecode-classlanguage-textisvaliddefaultcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>9. <code class="language-text">InputObjectGraphType</code> supports <code class="language-text">ToAST</code>/<code class="language-text">IsValidDefault</code></h3>\n<p><code class="language-text">ToAST</code> is supported for <code class="language-text">InputObjectGraphType</code> and enables printing a code-first schema that uses\n<code class="language-text">InputObjectGraphType</code> (<code class="language-text">ToAST</code> threw <code class="language-text">NotImplementedException</code> before), i.e. schemas with default\ninput objects can be printed out of the box now. <code class="language-text">InputObjectGraphType.IsValidDefault</code> now checks\nall fields on the provided input object value. To revert <code class="language-text">IsValidDefault</code> to v4 behavior use that snippet:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsValidDefault</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name">TSourceType</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="10-code-classlanguage-textenumerationgraphtypelttcode-enhancements"><a href="#10-code-classlanguage-textenumerationgraphtypelttcode-enhancements" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>10. <code class="language-text">EnumerationGraphType&lt;T></code> enhancements</h3>\n<p>The following new attributes are detected on auto-generated enum graph types:</p>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class="language-text">[Name]</code></td>\n<td>Specifies the name of the enum type or value</td>\n</tr>\n<tr>\n<td><code class="language-text">[Ignore]</code></td>\n<td>Does not add the enum value to the enum type</td>\n</tr>\n<tr>\n<td><code class="language-text">[Metadata]</code></td>\n<td>Adds the specified metadata to enum type or value</td>\n</tr>\n</tbody>\n</table>\n<p>As before, you can still use the <code class="language-text">[Description]</code> or <code class="language-text">[Obsolete]</code> attributes to add\ndescriptions or deprecation reasons to enum graph types or enum values.</p>\n<p>You can also derive from <code class="language-text">GraphQLAttribute</code> to create your own attributes to modify\nenum graph types or enum values as they are being built by <code class="language-text">EnumerationGraphType&lt;T></code>.</p>\n<h3 id="11-ability-to-get-directives-and-their-arguments-values"><a href="#11-ability-to-get-directives-and-their-arguments-values" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>11. Ability to get directives and their arguments values</h3>\n<p>Now you may get directives along with their arguments that have been provided in the GraphQL query request.\nNew APIs are similar to ones used for field arguments:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token generic-method"><span class="token function">Field</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>StringGraphType<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"myField"</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">resolve</span><span class="token punctuation">:</span> context <span class="token operator">=></span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> dir <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">GetDirective</span><span class="token punctuation">(</span><span class="token string">"myDirective"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> arg <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetArgument</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"arg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token range operator">..</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="12-the-code-classlanguage-textexecutionstrategycode-selected-for-an-operation-can-be-configured-through-code-classlanguage-textigraphqlbuildercode"><a href="#12-the-code-classlanguage-textexecutionstrategycode-selected-for-an-operation-can-be-configured-through-code-classlanguage-textigraphqlbuildercode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>12. The <code class="language-text">ExecutionStrategy</code> selected for an operation can be configured through <code class="language-text">IGraphQLBuilder</code></h3>\n<p>Previously, in order to change the execution strategy for a specific operation -- for instance,\nusing a serial execution strategy for \'query\' operation types -- required creating a custom\ndocument executer and overriding the <code class="language-text">SelectExecutionStrategy</code> method.</p>\n<p>Now, for DI configurations, you can call the <code class="language-text">.AddExecutionStrategy&lt;T>(OperationType)</code> method to\nprovide this configuration without overriding the method. See below for an example.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// === GraphQL.NET v4 ===</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerialDocumentExecuter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DocumentExecuter</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">SerialDocumentExecuter</span><span class="token punctuation">(</span><span class="token class-name">IDocumentBuilder</span> documentBuilder<span class="token punctuation">,</span> <span class="token class-name">IDocumentValidator</span> documentValidator<span class="token punctuation">,</span> <span class="token class-name">IComplexityAnalyzer</span> complexityAnalyzer<span class="token punctuation">,</span> <span class="token class-name">IDocumentCache</span> documentCache<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>IConfigureExecutionOptions<span class="token punctuation">></span></span> configurations<span class="token punctuation">)</span>\n        <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>documentBuilder<span class="token punctuation">,</span> documentValidator<span class="token punctuation">,</span> complexityAnalyzer<span class="token punctuation">,</span> documentCache<span class="token punctuation">,</span> configurations<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">IExecutionStrategy</span> <span class="token function">SelectExecutionStrategy</span><span class="token punctuation">(</span><span class="token class-name">ExecutionContext</span> context<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> context<span class="token punctuation">.</span>Operation<span class="token punctuation">.</span>Operation <span class="token keyword">switch</span>\n        <span class="token punctuation">{</span>\n            OperationType<span class="token punctuation">.</span>Query <span class="token operator">=></span> SerialExecutionStrategy<span class="token punctuation">.</span>Instance<span class="token punctuation">,</span>\n            _ <span class="token operator">=></span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">SelectExecutionStrategy</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// within Startup.cs</span>\nservices<span class="token punctuation">.</span><span class="token function">AddGraphQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">AddSystemTextJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSchema</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>StarWarsSchema<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDocumentExecuter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SerialDocumentExecuter<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// === GraphQL.NET v5 ===</span>\n\n<span class="token comment">// within Startup.cs</span>\nservices<span class="token punctuation">.</span><span class="token function">AddGraphQL</span><span class="token punctuation">(</span>builder <span class="token operator">=></span> builder\n    <span class="token punctuation">.</span><span class="token function">AddSystemTextJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSchema</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>StarWarsSchema<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddExecutionStrategy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SerialExecutionStrategy<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>OperationType<span class="token punctuation">.</span>Query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>You can also register your own implementation of <code class="language-text">IExecutionStrategySelector</code> which can inspect the\n<code class="language-text">ExecutionContext</code> to make additional decisions before selecting an execution strategy.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExecutionStrategySelector</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IExecutionStrategySelector</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">IExecutionStrategy</span> <span class="token function">Select</span><span class="token punctuation">(</span><span class="token class-name">ExecutionContext</span> context<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> context<span class="token punctuation">.</span>Operation<span class="token punctuation">.</span>Operation <span class="token keyword">switch</span>\n        <span class="token punctuation">{</span>\n            OperationType<span class="token punctuation">.</span>Query <span class="token operator">=></span> ParallelExecutionStrategy<span class="token punctuation">.</span>Instance<span class="token punctuation">,</span>\n            OperationType<span class="token punctuation">.</span>Mutation <span class="token operator">=></span> SerialExecutionStrategy<span class="token punctuation">.</span>Instance<span class="token punctuation">,</span>\n            OperationType<span class="token punctuation">.</span>Subscription <span class="token operator">=></span> SubscriptionExecutionStrategy<span class="token punctuation">.</span>Instance<span class="token punctuation">,</span>\n            _ <span class="token operator">=></span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// within Startup.cs</span>\nservcies<span class="token punctuation">.</span><span class="token function">AddGraphQL</span><span class="token punctuation">(</span>builder <span class="token operator">=></span> builder\n    <span class="token comment">// other configuration here</span>\n    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddExecutionStrategySelector</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyExecutionStrategySelector<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>The <code class="language-text">DocumentExecuter.SelectExecutionStrategy</code> method is still available to be overridden for\nbackwards compatibility but may be removed in the next major version.</p>\n<h3 id="13-schema-builder-and-code-classlanguage-textfielddelegatecode-improvements-for-reflected-methods"><a href="#13-schema-builder-and-code-classlanguage-textfielddelegatecode-improvements-for-reflected-methods" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>13. Schema builder and <code class="language-text">FieldDelegate</code> improvements for reflected methods</h3>\n<p>When configuring a CLR method for a field, the method arguments now allow the use of all of\nthe new attributes available to <code class="language-text">AutoRegisteringObjectGraphType</code>, such as <code class="language-text">[FromServices]</code>.\nField resolvers are now precompiled, resulting in faster performance.</p>\n<p>As always, when the CLR type is not the source type, the CLR type is pulled from DI.\nNow the CLR type will be pulled from <code class="language-text">context.RequestServices</code> to allow for scoped instances.\nIf <code class="language-text">RequestServices</code> is <code class="language-text">null</code>, the root DI provider will be used as it was before.</p>\n<p>Note that existing methods will require the use of <code class="language-text">[FromSource]</code> and <code class="language-text">[FromUserContext]</code> for\napplicable method arguments.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// v4</span>\n<span class="token punctuation">[</span><span class="token function">GraphQLMetadata</span><span class="token punctuation">(</span><span class="token string">"Droid"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token keyword">class</span> <span class="token class-name">DroidType</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// DI-injected services are always pulled from the root DI provider, so scoped services are not supported</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Repository</span> _repo<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token function">DroidType</span><span class="token punctuation">(</span><span class="token class-name">Repository</span> repo<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        _repo <span class="token operator">=</span> repo<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Id</span><span class="token punctuation">(</span><span class="token class-name">Droid</span> source<span class="token punctuation">)</span> <span class="token operator">=></span> source<span class="token punctuation">.</span>Id<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>Droid<span class="token punctuation">></span></span> <span class="token function">Friends</span><span class="token punctuation">(</span><span class="token class-name">Droid</span> source<span class="token punctuation">)</span> <span class="token operator">=></span> _repo<span class="token punctuation">.</span><span class="token function">FriendsOf</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// v5</span>\n<span class="token punctuation">[</span><span class="token function">GraphQLMetadata</span><span class="token punctuation">(</span><span class="token string">"Droid"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token keyword">class</span> <span class="token class-name">DroidType</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// scoped services are supported, so long as ExecutionOptions.RequestServices is set</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Repository</span> _repo<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token function">DroidType</span><span class="token punctuation">(</span><span class="token class-name">Repository</span> repo<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        _repo <span class="token operator">=</span> repo<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// requires use of [FromSource]</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Id</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromSource</span></span><span class="token punctuation">]</span> <span class="token class-name">Droid</span> source<span class="token punctuation">)</span> <span class="token operator">=></span> source<span class="token punctuation">.</span>Id<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>Droid<span class="token punctuation">></span></span> <span class="token function">Friends</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromSource</span></span><span class="token punctuation">]</span> <span class="token class-name">Droid</span> source<span class="token punctuation">)</span> <span class="token operator">=></span> _repo<span class="token punctuation">.</span><span class="token function">FriendsOf</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// v5 alternate</span>\n<span class="token punctuation">[</span><span class="token function">GraphQLMetadata</span><span class="token punctuation">(</span><span class="token string">"Droid"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token keyword">class</span> <span class="token class-name">DroidType</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Id</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromSource</span></span><span class="token punctuation">]</span> <span class="token class-name">Droid</span> source<span class="token punctuation">)</span> <span class="token operator">=></span> source<span class="token punctuation">.</span>Id<span class="token punctuation">;</span>\n\n    <span class="token comment">// only inject Repository where needed</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>Droid<span class="token punctuation">></span></span> <span class="token function">Friends</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromSource</span></span><span class="token punctuation">]</span> <span class="token class-name">Droid</span> source<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromServices</span></span><span class="token punctuation">]</span> <span class="token class-name">Repository</span> repo<span class="token punctuation">)</span> <span class="token operator">=></span> repo<span class="token punctuation">.</span><span class="token function">FriendsOf</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Similar changes may be necessary when using <code class="language-text">FieldDelegate</code> to assign a field resolver.</p>\n<h3 id="14-valuetask-support"><a href="#14-valuetask-support" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>14. ValueTask support</h3>\n<p>The execution pipeline has been changed to use <code class="language-text">ValueTask</code> throughout. To support this change, the following\ninterfaces have been slightly changed to have methods with <code class="language-text">ValueTask</code> signatures:</p>\n<ul>\n<li><code class="language-text">IFieldResolver</code></li>\n<li><code class="language-text">IEventStreamResolver</code> (renamed to <code class="language-text">ISourceStreamResolver</code>) (<code class="language-text">IAsyncEventStreamResolver</code> has been removed)</li>\n<li><code class="language-text">IFieldMiddleware</code></li>\n<li><code class="language-text">IValidationRule</code></li>\n</ul>\n<p>This will result in a substantial speed increase for schemas that use field middleware.</p>\n<p>In addition, <code class="language-text">ValueTask&lt;T></code> return types are supported for fields built on CLR methods via the schema builder,\nfields built on CLR methods via <code class="language-text">AutoRegisteringObjectGraphType</code>, and fields built on CLR methods via <code class="language-text">FieldDelegate</code>.</p>\n<p>When manually instantiating a field or subscription resolver, you may use a delegate that return a <code class="language-text">ValueTask</code> by\nusing new constructors available on the <code class="language-text">FuncFieldResolver</code> or <code class="language-text">SourceStreamResolver</code> classes.</p>\n<h3 id="15-code-classlanguage-textnamefieldresolvercode-enhanced-method-support"><a href="#15-code-classlanguage-textnamefieldresolvercode-enhanced-method-support" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>15. <code class="language-text">NameFieldResolver</code> enhanced method support</h3>\n<p>When adding a field by name only, such as <code class="language-text">Field&lt;StringGraphType>("Name");</code>, and the field matches a method\nrather than a property on the source object, the method parameters are parsed similarly to <code class="language-text">FieldDelegate</code>\nas noted above with support for query arguments, <code class="language-text">IResolveFieldContext</code>, <code class="language-text">[FromServices]</code> and so on.</p>\n<h3 id="16-schemas-can-be-entirely-constructed-from-clr-types"><a href="#16-schemas-can-be-entirely-constructed-from-clr-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>16. Schemas can be entirely constructed from CLR types</h3>\n<p>A new builder method <code class="language-text">AddAutoSchema</code> has been added to allow building a schema entirely from CLR types\nusing the new features within the auto-registering graph types to build the schema. Below is a sample:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// sample configuration of DI</span>\n<span class="token class-name"><span class="token keyword">var</span></span> services <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServiceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nservices<span class="token punctuation">.</span><span class="token function">AddGraphQL</span><span class="token punctuation">(</span>b <span class="token operator">=></span> b\n    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddAutoSchema</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Query<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>s <span class="token operator">=></span> s<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">WithMutation</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Mutation<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">AddSystemTextJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> provider <span class="token operator">=</span> services<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// sample execution from DI</span>\n<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> provider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDocumentExecuter<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>o <span class="token operator">=></span>\n<span class="token punctuation">{</span>\n    o<span class="token punctuation">.</span>RequestServices <span class="token operator">=</span> provider<span class="token punctuation">;</span>\n    o<span class="token punctuation">.</span>Schema <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ISchema<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    o<span class="token punctuation">.</span>Query <span class="token operator">=</span> <span class="token string">"{hero}"</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> resultString <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IGraphQLTextSerializer<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// resultString returns the following JSON: {"data":{"hero":"Luke Skywalker"}}</span>\n\n\n<span class="token comment">// sample schema</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Query</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Hero <span class="token operator">=></span> <span class="token string">"Luke Skywalker"</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>Droid<span class="token punctuation">></span></span> Droids <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Droid<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Droid</span><span class="token punctuation">(</span><span class="token string">"R2D2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Droid</span><span class="token punctuation">(</span><span class="token string">"C3PO"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mutation</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Hero</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span> <span class="token operator">=></span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Droid</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Subscriptions are supported; interface or union graph types are not currently supported. You may\nmix the documented "graphtype-first" approach with the CLR types to implement anything not supported\nby the auto-registering graph types.</p>\n<h3 id="17-code-classlanguage-textigraphqlserializercode-implementations-support-serialization-of-code-classlanguage-textexecutionerrorcode-instances"><a href="#17-code-classlanguage-textigraphqlserializercode-implementations-support-serialization-of-code-classlanguage-textexecutionerrorcode-instances" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>17. <code class="language-text">IGraphQLSerializer</code> implementations support serialization of <code class="language-text">ExecutionError</code> instances.</h3>\n<p>Previously, only when serializing an <code class="language-text">ExecutionResult</code> instance would <code class="language-text">ExecutionError</code> instances\nbe properly serialized. Now you may serialize a <code class="language-text">ExecutionError</code> instance directly and it will\nbe handled by the specified <code class="language-text">IErrorInfoProvider</code> and serialized correctly. This can be useful\nwhen implementing the newer <code class="language-text">graphql-transport-ws</code> WebSockets protocol.</p>\n<h3 id="18-code-classlanguage-textidocumentexecuterltcode-interface-added-to-better-support-multiple-schema-registrations"><a href="#18-code-classlanguage-textidocumentexecuterltcode-interface-added-to-better-support-multiple-schema-registrations" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>18. <code class="language-text">IDocumentExecuter&lt;></code> interface added to better support multiple schema registrations.</h3>\n<p>To better support user classes based on a specific schema, the <code class="language-text">IDocumentExecuter&lt;></code> interface\nand default implementation has been added which allows for executing a request without specifying\nthe schema in the <code class="language-text">ExecutionOptions</code>. The execution will pull the schema from dependency injection\nat run-time, supporting both singleton and scoped schemas. <code class="language-text">RequestServices</code> is required to be\nprovided.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// sample that executes a request against MySchema</span>\n<span class="token class-name"><span class="token keyword">var</span></span> executer <span class="token operator">=</span> serviceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDocumentExecuter<span class="token punctuation">&lt;</span>MySchema<span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExecutionOptions</span>\n<span class="token punctuation">{</span>\n    Query <span class="token operator">=</span> <span class="token string">"{hero}"</span><span class="token punctuation">,</span>\n    RequestServices <span class="token operator">=</span> serviceProvider<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> executer<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="19-subscription-support-improved"><a href="#19-subscription-support-improved" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>19. Subscription support improved</h3>\n<p>Support for subscriptions has been moved from the <code class="language-text">GraphQL.SystemReactive</code> nuget package directly into\nthe main <code class="language-text">GraphQL</code> package. There is no need to use <code class="language-text">SubscriptionDocumentExecuter</code> (removed), and the default\ndocument executer will support subscriptions without overriding <code class="language-text">SelectExecutionStrategy</code>.</p>\n<p>The new implementation of <code class="language-text">SubscriptionExecutionStrategy</code> supports some new features and bug fixes:</p>\n<ol>\n<li>\n<p>Serial execution of data events\' field resolvers is supported by passing an instance of\n<code class="language-text">SerialExecutionStrategy</code> to the constructor. As before, parallel execution is default.</p>\n</li>\n<li>\n<p>Errors and output extensions are returned along with data events.</p>\n</li>\n<li>\n<p>Memory leaks have been eliminated in the case of errors, output extensions, metrics being enabled,\nor the use of the context\'s array pool.</p>\n</li>\n<li>\n<p>The unhandled exception handler properly handles all error situations that it was designed to.</p>\n</li>\n<li>\n<p>The <code class="language-text">System.Reactive</code> nuget reference is not necessary for GraphQL. You may still choose to use\n<code class="language-text">System.Reactive</code> nuget package in your library if you wish.</p>\n</li>\n<li>\n<p>Derived implementations allow for a scoped DI provider during execution of data events. It will\nbe necessary to override <code class="language-text">ProcessDataAsync</code> and change the <code class="language-text">ExecutionContext.RequestServices</code> property to a scoped\ninstance before calling <code class="language-text">base.ProcessDataAsync</code>.</p>\n</li>\n</ol>\n<p>There are a number of other minor issues fixed; see these links for more details:</p>\n<ul>\n<li><a href="https://github.com/graphql-dotnet/graphql-dotnet/issues/3002">https://github.com/graphql-dotnet/graphql-dotnet/issues/3002</a></li>\n<li><a href="https://github.com/graphql-dotnet/graphql-dotnet/pull/3004">https://github.com/graphql-dotnet/graphql-dotnet/pull/3004</a></li>\n</ul>\n<h3 id="20-code-classlanguage-textauthorizecode-and-code-classlanguage-textauthorizewithrolescode-extension-methods-added-in-graphql-510-and-511"><a href="#20-code-classlanguage-textauthorizecode-and-code-classlanguage-textauthorizewithrolescode-extension-methods-added-in-graphql-510-and-511" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>20. <code class="language-text">Authorize</code> and <code class="language-text">AuthorizeWithRoles</code> extension methods added in GraphQL 5.1.0 and 5.1.1</h3>\n<p>This allows for specifying roles rather than just policies that can be used to validate a request.\n<code class="language-text">Authorize</code> can be used to specify that only authentication is required, without specifying any specific roles or policies.\nAs with <code class="language-text">AuthorizeWithPolicy</code> (renamed from <code class="language-text">AuthorizeWith</code>), it requires support by a third-party\nlibrary to perform the validation.</p>\n<p>Similar to the ASP.NET Core <code class="language-text">AuthorizeAttribute</code>, the new <code class="language-text">AuthorizeWithRoles</code> method accepts\na comma-separated list of role names that would allow access to the graph or field.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp">graph<span class="token punctuation">.</span><span class="token function">AuthorizeWithRoles</span><span class="token punctuation">(</span><span class="token string">"Administrators,Managers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>You may also supply a list of strings as in the following example:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp">graph<span class="token punctuation">.</span><span class="token function">AuthorizeWithRoles</span><span class="token punctuation">(</span><span class="token string">"Administrators"</span><span class="token punctuation">,</span> <span class="token string">"Managers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="21-code-classlanguage-textrequestservicescode-added-to-code-classlanguage-textvalidationcontextcode-in-graphql-510"><a href="#21-code-classlanguage-textrequestservicescode-added-to-code-classlanguage-textvalidationcontextcode-in-graphql-510" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>21. <code class="language-text">RequestServices</code> added to <code class="language-text">ValidationContext</code> in GraphQL 5.1.0</h3>\n<p>This allows for validation rules to access scoped services if necessary.</p>\n<h2 id="breaking-changes"><a href="#breaking-changes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Breaking Changes</h2>\n<h3 id="1-unhandledexceptiondelegate"><a href="#1-unhandledexceptiondelegate" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>1. UnhandledExceptionDelegate</h3>\n<p><code class="language-text">ExecutionOptions.UnhandledExceptionDelegate</code> and <code class="language-text">IExecutionContext.UnhandledExceptionDelegate</code>\nproperties type was changed from <code class="language-text">Action&lt;UnhandledExceptionContext></code> to <code class="language-text">Func&lt;UnhandledExceptionContext, Task></code>\nso now you may use async/await for exception handling. In this regard, some methods in <code class="language-text">ExecutionStrategy</code> were\nrenamed to have <code class="language-text">Async</code> suffix.</p>\n<h3 id="2-code-classlanguage-textidocumentcachecode-now-has-asynchronous-methods-instead-of-synchronous-methods"><a href="#2-code-classlanguage-textidocumentcachecode-now-has-asynchronous-methods-instead-of-synchronous-methods" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2. <code class="language-text">IDocumentCache</code> now has asynchronous methods instead of synchronous methods.</h3>\n<p>The default get/set property of the interface has been replaced with <code class="language-text">GetAsync</code> and <code class="language-text">SetAsync</code> methods.\nKeys cannot be removed by setting a null value as they could before.</p>\n<h3 id="3-code-classlanguage-textiresolvefieldcontextextensionscode-property-renamed-to-code-classlanguage-textoutputextensionscode-and-related-changes"><a href="#3-code-classlanguage-textiresolvefieldcontextextensionscode-property-renamed-to-code-classlanguage-textoutputextensionscode-and-related-changes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3. <code class="language-text">IResolveFieldContext.Extensions</code> property renamed to <code class="language-text">OutputExtensions</code> and related changes</h3>\n<p>To clarify and differ output extensions from input extensions, <code class="language-text">IResolveFieldContext.Extensions</code>\nhas now been renamed to <code class="language-text">OutputExtensions</code>. The <code class="language-text">GetExtension</code> and <code class="language-text">SetExtension</code> thread-safe\nextension methods have also been renamed to <code class="language-text">GetOutputExtension</code> and <code class="language-text">SetOutputExtension</code> respectively.</p>\n<h3 id="4-code-classlanguage-textexecutionoptionsinputscode-and-code-classlanguage-textvalidationcontextinputscode-properties-renamed-to-code-classlanguage-textvariablescode"><a href="#4-code-classlanguage-textexecutionoptionsinputscode-and-code-classlanguage-textvalidationcontextinputscode-properties-renamed-to-code-classlanguage-textvariablescode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4. <code class="language-text">ExecutionOptions.Inputs</code> and <code class="language-text">ValidationContext.Inputs</code> properties renamed to <code class="language-text">Variables</code></h3>\n<p>To better align the execution options and variable context with the specification, the <code class="language-text">Inputs</code>\nproperty containing the execution variables has now been renamed to <code class="language-text">Variables</code>.</p>\n<h3 id="5-code-classlanguage-textconfigureexecutioncode-graphql-builder-method-renamed-to-code-classlanguage-textconfigureexecutionoptionscode"><a href="#5-code-classlanguage-textconfigureexecutioncode-graphql-builder-method-renamed-to-code-classlanguage-textconfigureexecutionoptionscode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>5. <code class="language-text">ConfigureExecution</code> GraphQL builder method renamed to <code class="language-text">ConfigureExecutionOptions</code></h3>\n<p>Also, <code class="language-text">IConfigureExecution</code> renamed to <code class="language-text">IConfigureExecutionOptions</code>.</p>\n<h3 id="6-code-classlanguage-textaddgraphqlcode-now-accepts-a-configuration-delegate-instead-of-returning-code-classlanguage-textigraphqlbuildercode"><a href="#6-code-classlanguage-textaddgraphqlcode-now-accepts-a-configuration-delegate-instead-of-returning-code-classlanguage-textigraphqlbuildercode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>6. <code class="language-text">AddGraphQL</code> now accepts a configuration delegate instead of returning <code class="language-text">IGraphQLBuilder</code></h3>\n<p>In order to prevent default implementations from ever being registered in the DI engine,\nthe <code class="language-text">AddGraphQL</code> method now accepts a configuration delegate where you can configure the\nGraphQL.NET DI components. To support this change, the <code class="language-text">GraphQLBuilder</code> constructor now\nrequires a configuration delegate parameter and will execute the delegate before calling\n<code class="language-text">GraphQLBuilderBase.RegisterDefaultServices</code>.</p>\n<p>This requires a change similar to the following:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// v4</span>\nservices<span class="token punctuation">.</span><span class="token function">AddGraphQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">AddSystemTextJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSchema</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>StarWarsSchema<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// v5</span>\nservices<span class="token punctuation">.</span><span class="token function">AddGraphQL</span><span class="token punctuation">(</span>builder <span class="token operator">=></span> builder\n    <span class="token punctuation">.</span><span class="token function">AddSystemTextJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSchema</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>StarWarsSchema<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="7-code-classlanguage-textgraphqlextensionsbuildnamedtypecode-was-renamed-and-moved-to-code-classlanguage-textschematypesbuildgraphqltypecode"><a href="#7-code-classlanguage-textgraphqlextensionsbuildnamedtypecode-was-renamed-and-moved-to-code-classlanguage-textschematypesbuildgraphqltypecode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>7. <code class="language-text">GraphQLExtensions.BuildNamedType</code> was renamed and moved to <code class="language-text">SchemaTypes.BuildGraphQLType</code></h3>\n<h3 id="8-code-classlanguage-textgraphqlbuilderbaseinitializecode-was-renamed-to-code-classlanguage-textregisterdefaultservicescode"><a href="#8-code-classlanguage-textgraphqlbuilderbaseinitializecode-was-renamed-to-code-classlanguage-textregisterdefaultservicescode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>8. <code class="language-text">GraphQLBuilderBase.Initialize</code> was renamed to <code class="language-text">RegisterDefaultServices</code></h3>\n<h3 id="9-code-classlanguage-textexecutionhelpergetargumentvaluescode-was-renamed-to-code-classlanguage-textgetargumentscode"><a href="#9-code-classlanguage-textexecutionhelpergetargumentvaluescode-was-renamed-to-code-classlanguage-textgetargumentscode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>9. <code class="language-text">ExecutionHelper.GetArgumentValues</code> was renamed to <code class="language-text">GetArguments</code></h3>\n<h3 id="10-code-classlanguage-textdirectivegraphtypecode-was-renamed-to-code-classlanguage-textdirectivecode"><a href="#10-code-classlanguage-textdirectivegraphtypecode-was-renamed-to-code-classlanguage-textdirectivecode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>10. <code class="language-text">DirectiveGraphType</code> was renamed to <code class="language-text">Directive</code></h3>\n<h3 id="11-code-classlanguage-textschemacode-code-classlanguage-textvariabledefinitionscode-and-code-classlanguage-textvariablescode-arguments-were-removed-from-code-classlanguage-textvalidationcontextgetvariablevaluescode"><a href="#11-code-classlanguage-textschemacode-code-classlanguage-textvariabledefinitionscode-and-code-classlanguage-textvariablescode-arguments-were-removed-from-code-classlanguage-textvalidationcontextgetvariablevaluescode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>11. <code class="language-text">schema</code>, <code class="language-text">variableDefinitions</code> and <code class="language-text">variables</code> arguments were removed from <code class="language-text">ValidationContext.GetVariableValues</code></h3>\n<p>Use <code class="language-text">ValidationContext.Schema</code>, <code class="language-text">ValidationContext.Operation.Variables</code> and <code class="language-text">ValidationContext.Variables</code> properties</p>\n<h3 id="12-code-classlanguage-textvalidationcontextoperationnamecode-was-changed-to-code-classlanguage-textvalidationcontextoperationcode"><a href="#12-code-classlanguage-textvalidationcontextoperationnamecode-was-changed-to-code-classlanguage-textvalidationcontextoperationcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>12. <code class="language-text">ValidationContext.OperationName</code> was changed to <code class="language-text">ValidationContext.Operation</code></h3>\n<h3 id="13-all-arguments-from-code-classlanguage-textidocumentvalidatorvalidateasynccode-were-wrapped-into-code-classlanguage-textvalidationoptionscode-struct"><a href="#13-all-arguments-from-code-classlanguage-textidocumentvalidatorvalidateasynccode-were-wrapped-into-code-classlanguage-textvalidationoptionscode-struct" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>13. All arguments from <code class="language-text">IDocumentValidator.ValidateAsync</code> were wrapped into <code class="language-text">ValidationOptions</code> struct</h3>\n<h3 id="14-all-methods-from-code-classlanguage-textigraphqlbuildercode-were-moved-into-code-classlanguage-textiserviceregistercode-interface"><a href="#14-all-methods-from-code-classlanguage-textigraphqlbuildercode-were-moved-into-code-classlanguage-textiserviceregistercode-interface" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>14. All methods from <code class="language-text">IGraphQLBuilder</code> were moved into <code class="language-text">IServiceRegister</code> interface</h3>\n<p>Use <code class="language-text">IGraphQLBuilder.Services</code> property if you need to register services into DI container.\nIf you use provided extension methods upon <code class="language-text">IGraphQLBuilder</code> then your code does not require any changes.</p>\n<h3 id="15-changes-caused-by-graphql-parser-v8"><a href="#15-changes-caused-by-graphql-parser-v8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>15. Changes caused by GraphQL-Parser v8</h3>\n<ul>\n<li>\n<p>The <code class="language-text">GraphQL.Language.AST</code> namespace and all classes from it have been removed in favor of ones\nfrom <code class="language-text">GraphQLParser.AST</code> namespace in GraphQL-Parser project. Examples of changed usages:</p>\n<ul>\n<li><code class="language-text">GraphQL.Language.AST.Document</code> -> <code class="language-text">GraphQLParser.AST.GraphQLDocument</code></li>\n<li><code class="language-text">GraphQL.Language.AST.IValue</code> -> <code class="language-text">GraphQLParser.AST.GraphQLValue</code></li>\n<li><code class="language-text">GraphQL.Language.AST.Field</code> -> <code class="language-text">GraphQLParser.AST.GraphQLField</code></li>\n<li><code class="language-text">GraphQL.Language.AST.SelectionSet</code> -> <code class="language-text">GraphQLParser.AST.GraphQLSelectionSet</code></li>\n<li><code class="language-text">GraphQL.Language.AST.IHaveDirectives</code> -> <code class="language-text">GraphQLParser.AST.IHasDirectivesNode</code></li>\n<li><code class="language-text">GraphQL.Language.AST.IType</code> -> <code class="language-text">GraphQLParser.AST.GraphQLType</code></li>\n</ul>\n</li>\n<li>\n<p>Some APIs utilize <code class="language-text">GraphQLParser.ROM</code> struct instead of <code class="language-text">string</code>:</p>\n<ul>\n<li><code class="language-text">ExecutionResult.Query</code></li>\n<li><code class="language-text">Metrics.SetOperationName</code></li>\n<li><code class="language-text">IComplexGraphType.GetField</code></li>\n<li><code class="language-text">QueryArguments.Find</code></li>\n<li><code class="language-text">SchemaDirectives.Find</code></li>\n<li><code class="language-text">SchemaDirectives.this[]</code></li>\n<li><code class="language-text">SchemaDirectives.Dictionary</code></li>\n<li><code class="language-text">ValidationContext.GetFragment</code></li>\n<li>All <code class="language-text">ValidationError</code>\'s constructors take <em>originalQuery</em> as <code class="language-text">ROM</code></li>\n</ul>\n</li>\n<li><code class="language-text">OperationType</code> and <code class="language-text">DirectiveLocation</code> enums were removed, use enums from <code class="language-text">GraphQLParser.AST</code> namespace</li>\n<li><code class="language-text">SourceLocation</code> struct was removed, use <code class="language-text">GraphQLLocation</code> from <code class="language-text">GraphQLParser.AST</code> namespace</li>\n<li><code class="language-text">CoreToVanillaConverter</code> class was removed</li>\n<li><code class="language-text">ErrorLocation</code> struct was removed, use <code class="language-text">Location</code> from <code class="language-text">GraphQLParser</code> namespace</li>\n<li><code class="language-text">ValidationContext.GetFragment</code> method was removed, use <code class="language-text">ValidationContext.Document.FindFragmentDefinition</code></li>\n<li><code class="language-text">IResolveFieldContext.SubFields</code> and <code class="language-text">IExecutionStrategy.GetSubFields</code> returns dictionary with\nvalues of tuple of queried field and its field definition</li>\n<li>All scalars works with <code class="language-text">GraphQLParser.AST.GraphQLValue</code> instead of <code class="language-text">GraphQL.Language.AST.IValue</code></li>\n<li><code class="language-text">IInputObjectGraphType.ToAST</code> returns <code class="language-text">GraphQLParser.AST.GraphQLObjectValue</code> instead of <code class="language-text">GraphQL.Language.AST.IValue</code></li>\n</ul>\n<h3 id="16-classes-and-members-marked-as-obsolete-have-been-removed"><a href="#16-classes-and-members-marked-as-obsolete-have-been-removed" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>16. Classes and members marked as obsolete have been removed</h3>\n<p>The following classes and members that were marked with <code class="language-text">[Obsolete]</code> in v4 have been removed:</p>\n<table>\n<thead>\n<tr>\n<th>Class or member</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class="language-text">GraphQL.NewtonsoftJson.StringExtensions.GetValue</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class="language-text">GraphQL.NewtonsoftJson.StringExtensions.ToDictionary</code></td>\n<td>Use \n<code class="language-text">Read</code>\n or \n<code class="language-text">Deserialize</code>\n instead</td>\n</tr>\n<tr>\n<td><code class="language-text">GraphQL.SystemTextJson.ObjectDictionaryConverter</code></td>\n<td>Use \n<code class="language-text">InputsJsonConverter</code>\n instead</td>\n</tr>\n<tr>\n<td><code class="language-text">GraphQL.SystemTextJson.StringExtensions.ToDictionary</code></td>\n<td>Use \n<code class="language-text">Read</code>\n or \n<code class="language-text">Deserialize</code>\n instead</td>\n</tr>\n<tr>\n<td><code class="language-text">GraphQL.TypeExtensions.GetEnumerableElementType</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class="language-text">GraphQL.TypeExtensions.IsNullable</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class="language-text">GraphQL.Builders.ConnectionBuilder.Unidirectional</code></td>\n<td><code class="language-text">Unidirectional</code>\n is default and does not need to be called</td>\n</tr>\n<tr>\n<td><code class="language-text">GraphQL.IDocumentExecutionListener.BeforeExecutionAwaitedAsync</code></td>\n<td>Use \n<code class="language-text">IDataLoaderResult</code>\n interface instead</td>\n</tr>\n<tr>\n<td><code class="language-text">GraphQL.IDocumentExecutionListener.BeforeExecutionStepAwaitedAsync</code></td>\n<td>Use \n<code class="language-text">IDataLoaderResult</code>\n interface instead</td>\n</tr>\n<tr>\n<td><code class="language-text">GraphQL.Utilities.DeprecatedDirectiveVisitor</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Various classes\' properties in the <code class="language-text">GraphQL.Language.AST</code> namespace are now\nread-only instead of read-write, such as <code class="language-text">Field.Alias</code>.</p>\n<p>Various classes\' constructors in the <code class="language-text">GraphQL.Language.AST</code> namespace have been\nremoved in favor of other constructors.</p>\n<h3 id="17-code-classlanguage-textidocumentwritercode-has-been-renamed-to-code-classlanguage-textigraphqlserializercode-and-related-changes"><a href="#17-code-classlanguage-textidocumentwritercode-has-been-renamed-to-code-classlanguage-textigraphqlserializercode-and-related-changes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>17. <code class="language-text">IDocumentWriter</code> has been renamed to <code class="language-text">IGraphQLSerializer</code> and related changes.</h3>\n<p>As such, the <code class="language-text">DocumentWriter</code> classes have been renamed to <code class="language-text">GraphQLSerializer</code>, and the\n<code class="language-text">AddDocumentWriter</code> extension method for <code class="language-text">IGraphQLBuilder</code> has been renamed to <code class="language-text">AddSerializer</code>.\nThe <code class="language-text">WriteAsync</code> method\'s functionality has not changed.</p>\n<h3 id="18-extension-methods-for-parsing-variables-eg-code-classlanguage-texttoinputscode-have-been-removed"><a href="#18-extension-methods-for-parsing-variables-eg-code-classlanguage-texttoinputscode-have-been-removed" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>18. Extension methods for parsing variables (e.g. <code class="language-text">ToInputs</code>) have been removed.</h3>\n<p>Please use the <code class="language-text">Read&lt;Inputs>()</code> method of an <code class="language-text">IGraphQLSerializer</code> implementation, or the\n<code class="language-text">Deserialize&lt;Inputs>()</code> method of an <code class="language-text">IGraphQLTextSerializer</code> implementation. Note that\nthese methods will return <code class="language-text">null</code> if a null string or the string "null" is passed to them.\nThe <code class="language-text">ExecutionOptions.Variables</code> property does not require <code class="language-text">Inputs.Empty</code>, but if you have\ntests based on the <code class="language-text">.ToInputs()</code> extension method, you may want a direct replacement.\nEquivalent code to the previous functionality is as follows:</p>\n<div class="gatsby-highlight" data-language="cs">\n      <pre class="language-cs"><code class="language-cs"><span class="token keyword">using</span> <span class="token namespace">GraphQL</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">GraphQL<span class="token punctuation">.</span>SystemTextJson</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StringExtensions</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">GraphQLSerializer</span> _serializer <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Inputs</span> <span class="token function">ToInputs</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> json<span class="token punctuation">)</span>\n        <span class="token operator">=></span> json <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">?</span> Inputs<span class="token punctuation">.</span>Empty <span class="token punctuation">:</span> _serializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Inputs<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>json<span class="token punctuation">)</span> <span class="token operator">??</span> Inputs<span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Inputs</span> <span class="token function">ToInputs</span><span class="token punctuation">(</span><span class="token class-name">System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Json<span class="token punctuation">.</span>JsonElement</span> element<span class="token punctuation">)</span>\n        <span class="token operator">=></span> _serializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ReadNode</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Inputs<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">??</span> Inputs<span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">FromJson</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> json<span class="token punctuation">)</span>\n        <span class="token operator">=></span> _serializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks<span class="token punctuation">.</span>ValueTask<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">FromJsonAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>Stream</span> stream<span class="token punctuation">,</span> <span class="token class-name">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span>\n        <span class="token operator">=></span> _serializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ReadAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>The new <code class="language-text">Read</code> and <code class="language-text">Deserialize</code> methods of the <code class="language-text">Newtonsoft.Json</code> implementation\nwill default to reading dates as strings unless configured otherwise in the settings.</p>\n<h3 id="19-the-code-classlanguage-textwritetostringasynccode-extension-methods-have-been-removed"><a href="#19-the-code-classlanguage-textwritetostringasynccode-extension-methods-have-been-removed" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>19. The <code class="language-text">WriteToStringAsync</code> extension methods have been removed.</h3>\n<p>Please use the <code class="language-text">Serialize()</code> method of an <code class="language-text">IGraphQLTextSerializer</code> implementation.\nThe asynchronous text serialization methods have been removed as the underlying serialization\nproviders execute synchronously when serializing to a string.</p>\n<p>The <code class="language-text">WriteAsync()</code> method can be used to asynchronously serialize to a stream. However,\nthe <code class="language-text">Newtonsoft.Json</code> serializer does not support asynchronous serialization, so synchronous\ncalls are made to the underlying stream. Only <code class="language-text">System.Text.Json</code> supports asynchronous writing.</p>\n<h3 id="20-other-changes-to-the-serialization-infrastructure"><a href="#20-other-changes-to-the-serialization-infrastructure" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>20. Other changes to the serialization infrastructure</h3>\n<ul>\n<li><code class="language-text">InputsConverter</code> renamed to <code class="language-text">InputsJsonConverter</code></li>\n<li><code class="language-text">ExecutionResultContractResolver</code> renamed to <code class="language-text">GraphQLContractResolver</code></li>\n</ul>\n<h3 id="21-code-classlanguage-textgraphqlmetadataattributecode-cannot-be-applied-to-graph-type-classes"><a href="#21-code-classlanguage-textgraphqlmetadataattributecode-cannot-be-applied-to-graph-type-classes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>21. <code class="language-text">GraphQLMetadataAttribute</code> cannot be applied to graph type classes</h3>\n<p>The <code class="language-text">[GraphQLMetadata]</code> attribute is designed to be used for schema-first configurations\nand has not changed in this regard. For code-first graph definitions, please set the\nGraphQL type name within the constructor.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">//[GraphQLMetadata("Person")] //previously supported</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HumanType</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ObjectGraphType<span class="token punctuation">&lt;</span>Human<span class="token punctuation">></span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">HumanType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Name <span class="token operator">=</span> <span class="token string">"Person"</span><span class="token punctuation">;</span> <span class="token comment">//correct implementation</span>\n        <span class="token range operator">..</span><span class="token punctuation">.</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="22-code-classlanguage-textastprintercode-class-was-removed"><a href="#22-code-classlanguage-textastprintercode-class-was-removed" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>22. <code class="language-text">AstPrinter</code> class was removed</h3>\n<p><code class="language-text">AstPrinter</code> class was removed in favor of <code class="language-text">SDLPrinter</code> from GraphQL-Parser project.</p>\n<p>Code before changes:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token class-name">INode</span> node <span class="token operator">=</span> <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> AstPrinter<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Code after changes:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token class-name">ASTNode</span> node <span class="token operator">=</span> <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> printer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SDLPrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsdlPrinter<span class="token punctuation">.</span><span class="token function">PrintAsync</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> writer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetAwaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// actually is sync</span>\n<span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">SDLPrinter</code> is a highly optimized visitor for asynchronous non-blocking SDL output\ninto provided <code class="language-text">TextWriter</code>. In the majority of cases it does not allocate memory in\nthe managed heap at all.</p>\n<h3 id="23-possible-breaking-changes-in-code-classlanguage-textinputobjectgraphtypelttsourcetypecode"><a href="#23-possible-breaking-changes-in-code-classlanguage-textinputobjectgraphtypelttsourcetypecode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>23. Possible breaking changes in <code class="language-text">InputObjectGraphType&lt;TSourceType></code></h3>\n<p><code class="language-text">InputObjectGraphType&lt;TSourceType>.ToAST</code> and <code class="language-text">InputObjectGraphType&lt;TSourceType>.IsValidDefault</code>\nmethods were changed in such a way that now you may be required to also override <code class="language-text">ToAST</code> if you override\n<code class="language-text">ParseDictionary</code>. Changes in those methods are made for earlier error detection and schema printing.</p>\n<h3 id="24-code-classlanguage-textautoregisteringobjectgraphtypecode-changes"><a href="#24-code-classlanguage-textautoregisteringobjectgraphtypecode-changes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>24. <code class="language-text">AutoRegisteringObjectGraphType</code> changes</h3>\n<p>The protected method <code class="language-text">GetRegisteredProperties</code> has been renamed to <code class="language-text">GetRegisteredMembers</code>\nand now supports properties, methods and fields, although fields are not included\nwith the default implementation. Override the method in a derived class to include fields.</p>\n<p>New for v5, methods are included by default. To revert to v4 behavior, which does not\ninclude methods, create a derived class as follows:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoRegisteringObjectGraphTypeWithoutMethods<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AutoRegisteringObjectGraphType<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">AutoRegisteringObjectGraphTypeWithoutMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token function">AutoRegisteringObjectGraphTypeWithoutMethods</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">?</span><span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">?</span></span> excludedProperties<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>excludedProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>MemberInfo<span class="token punctuation">></span></span> <span class="token function">GetRegisteredMembers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">GetRegisteredMembers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x <span class="token keyword">is</span> <span class="token class-name">PropertyInfo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Register this class within your DI engine like this:</p>\n<div class="gatsby-highlight" data-language="cs">\n      <pre class="language-cs"><code class="language-cs">services<span class="token punctuation">.</span><span class="token function">AddTransient</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">AutoRegisteringObjectGraphType<span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">AutoRegisteringObjectGraphTypeWithoutMethods<span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="25-code-classlanguage-textautoregisteringinputobjectgraphtypecode-changes"><a href="#25-code-classlanguage-textautoregisteringinputobjectgraphtypecode-changes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>25. <code class="language-text">AutoRegisteringInputObjectGraphType</code> changes</h3>\n<p>The protected method <code class="language-text">GetRegisteredProperties</code> has been renamed to <code class="language-text">GetRegisteredMembers</code>\nand now supports returning both properties and fields, although fields are not included\nwith the default implementation. Override the method in a derived class to include fields.</p>\n<h3 id="26-code-classlanguage-textenumerationgraphtypecode-parses-exact-names"><a href="#26-code-classlanguage-textenumerationgraphtypecode-parses-exact-names" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>26. <code class="language-text">EnumerationGraphType</code> parses exact names</h3>\n<p>Consider GraphQL <code class="language-text">enum Color { RED GREEN BLUE }</code> and corresponding <code class="language-text">EnumerationGraphType</code>.\nIn v4 <code class="language-text">ParseValue("rED")</code> yields internal value for <code class="language-text">RED</code> name. In v5 this behavior was changed\nand <code class="language-text">ParseValue("rED")</code> throws error <code class="language-text">Unable to convert \'rED\' to the scalar type \'Color\'</code>.</p>\n<h3 id="27-code-classlanguage-textenumerationgraphtypeaddvaluecode-changes"><a href="#27-code-classlanguage-textenumerationgraphtypeaddvaluecode-changes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>27. <code class="language-text">EnumerationGraphType.AddValue</code> changes</h3>\n<p><code class="language-text">description</code> argument from <code class="language-text">EnumerationGraphType.AddValue</code> method was marked as optional\nand moved after <code class="language-text">value</code> argument. If you use this method and set descriptions, you will need\nto change the order of arguments. Since changing the order of arguments in some cases can remain\ninvisible to the caller and lead to hardly detected bugs, the method name has been changed from\n<code class="language-text">AddValue</code> to <code class="language-text">Add</code>.</p>\n<h3 id="28-the-settings-class-provided-to-code-classlanguage-textgraphqlnewtonsoftjsongraphqlserializercode-has-changed"><a href="#28-the-settings-class-provided-to-code-classlanguage-textgraphqlnewtonsoftjsongraphqlserializercode-has-changed" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>28. The settings class provided to <code class="language-text">GraphQL.NewtonsoftJson.GraphQLSerializer</code> has changed.</h3>\n<p>Previously the settings class used was <code class="language-text">Newtonsoft.Json.JsonSerializerSettings</code>. Now the class\nis <code class="language-text">GraphQL.NewtonsoftJson.JsonSerializerSettings</code>. The class inherits from the former class,\nbut sets the default date parsing behavior set to \'none\'.</p>\n<h3 id="29-schema-builder-clr-types-method-arguments-require-code-classlanguage-textfromsourcecode-and-code-classlanguage-textfromusercontextcode-where-applicable"><a href="#29-schema-builder-clr-types-method-arguments-require-code-classlanguage-textfromsourcecode-and-code-classlanguage-textfromusercontextcode-where-applicable" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>29. Schema builder CLR types\' method arguments require <code class="language-text">[FromSource]</code> and <code class="language-text">[FromUserContext]</code> where applicable</h3>\n<p>See New Features: \'Schema builder and <code class="language-text">FieldDelegate</code> improvements for reflected methods\' above.</p>\n<h3 id="30-fielddelegate-method-arguments-require-code-classlanguage-textfromsourcecode-and-code-classlanguage-textfromusercontextcode-where-applicable"><a href="#30-fielddelegate-method-arguments-require-code-classlanguage-textfromsourcecode-and-code-classlanguage-textfromusercontextcode-where-applicable" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>30. FieldDelegate method arguments require <code class="language-text">[FromSource]</code> and <code class="language-text">[FromUserContext]</code> where applicable</h3>\n<p>See New Features: \'Schema builder and <code class="language-text">FieldDelegate</code> improvements for reflected methods\' above.</p>\n<h3 id="31-code-removed-to-support-prior-implementation-of-fielddelegate-and-schema-builder"><a href="#31-code-removed-to-support-prior-implementation-of-fielddelegate-and-schema-builder" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>31. Code removed to support prior implementation of FieldDelegate and schema builder</h3>\n<p>The following classes and methods have been removed:</p>\n<ul>\n<li>The <code class="language-text">EventStreamResolver</code> implementation which accepted an <code class="language-text">IAccessor</code> as a construtor parameter.</li>\n<li>The <code class="language-text">AsyncEventStreamResolver</code> implementation which accepted an <code class="language-text">IAccessor</code> as a construtor parameter.</li>\n<li>The <code class="language-text">DelegateFieldModelBinderResolver</code> class.</li>\n<li>The <code class="language-text">ReflectionHelper.BuildArguments</code> method.</li>\n</ul>\n<p>You may use the following classes and methods as replacements:</p>\n<ul>\n<li>The <code class="language-text">MemberResolver</code> class is an <code class="language-text">IFieldResolver</code> implementation for a property, method or field. Expressions are passed\nto the constructor for the instance (and if applicable, method arguments), which is immediately compiled.</li>\n<li>The <code class="language-text">SourceStreamMethodResolver</code> class is an <code class="language-text">ISourceStreamResolver</code> (previously <code class="language-text">IEventStreamResolver</code>) implementation\nfor a method that returns an <code class="language-text">IObservable&lt;T></code> or <code class="language-text">Task&lt;IObservable&lt;T>></code>. It also provides a basic <code class="language-text">IFieldResolver</code>\nimplementation for subscription fields.</li>\n<li>The <code class="language-text">AutoRegisteringHelper.BuildFieldResolver</code> method builds a field resolver around a specifed property, method or field.</li>\n<li>The <code class="language-text">AutoRegisteringHelper.BuildEventStreamResolver</code> method builds an event stream resolver around a specified method.</li>\n</ul>\n<h3 id="32-valuetask-execution-pipeline-support-changes"><a href="#32-valuetask-execution-pipeline-support-changes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>32. ValueTask execution pipeline support changes</h3>\n<p>The following interfaces have been modified to support a <code class="language-text">ValueTask</code> pipeline:</p>\n<ul>\n<li><code class="language-text">IFieldResolver</code></li>\n<li><code class="language-text">ISourceStreamResolver</code> (previously <code class="language-text">IEventStreamResolver</code>)</li>\n<li><code class="language-text">IFieldMiddleware</code> and <code class="language-text">FieldMiddlewareDelegate</code></li>\n<li><code class="language-text">IValidationRule</code></li>\n</ul>\n<p>The following interfaces have been removed:</p>\n<ul>\n<li><code class="language-text">IAsyncEventStreamResolver</code></li>\n</ul>\n<p>All classes which implemented the above interfaces have been modified as necessary:</p>\n<ul>\n<li><code class="language-text">AsyncSourceStreamResolver</code> (previously <code class="language-text">AsyncEventStreamResolver</code>)</li>\n<li><code class="language-text">AsyncFieldResolver</code></li>\n<li><code class="language-text">ExpressionFieldResolver</code></li>\n<li><code class="language-text">FuncFieldResolver</code></li>\n<li><code class="language-text">InstrumentFieldsMiddleware</code></li>\n<li><code class="language-text">NameFieldResolver</code></li>\n<li><code class="language-text">SourceStreamResolver</code> (previously <code class="language-text">EventStreamResolver</code>)</li>\n<li>All built-in validation rules</li>\n</ul>\n<p>These properties have been removed:</p>\n<ul>\n<li><code class="language-text">EventStreamFieldType.AsyncSubscriber</code> (note: the <code class="language-text">EventStreamFieldType</code> class was removed and the <code class="language-text">Subscriber</code> property moved to the <code class="language-text">FieldType</code> class)</li>\n<li><code class="language-text">FieldConfig.AsyncSubscriber</code></li>\n</ul>\n<p>Any direct implementation of these interfaces or classes derived from the above list will need to be modified to fit the new design.</p>\n<p>In addition, it is required that any asynchronous fields must use an appropriate asynchronous field builder method or\nasynchronous field resolver, and inferred methods (built by the schema builder, <code class="language-text">FieldDelegate</code>, or <code class="language-text">AutoRegisteringObjectGraphType</code>)\nmust be strongly typed.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// works in v4, not in v5 (throws in runtime)</span>\n<span class="token generic-method"><span class="token function">Field</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterInterface<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"hero"</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">resolve</span><span class="token punctuation">:</span> context <span class="token operator">=></span> data<span class="token punctuation">.</span><span class="token function">GetDroidByIdAsync</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// works in v4 or v5</span>\n<span class="token generic-method"><span class="token function">FieldAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CharacterInterface<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"hero"</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">resolve</span><span class="token punctuation">:</span> <span class="token keyword">async</span> context <span class="token operator">=></span> <span class="token keyword">await</span> data<span class="token punctuation">.</span><span class="token function">GetDroidByIdAsync</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// works in v4, not in v5</span>\n<span class="token function">AddField</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">FieldType</span>\n<span class="token punctuation">{</span>\n    Name <span class="token operator">=</span> <span class="token string">"hero"</span><span class="token punctuation">,</span>\n    Resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FuncFieldResolver<span class="token punctuation">&lt;</span>Task<span class="token punctuation">&lt;</span>Droid<span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span>context <span class="token operator">=></span> data<span class="token punctuation">.</span><span class="token function">GetDroidByIdAsync</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// works in v4 or v5</span>\n<span class="token function">AddField</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">FieldType</span>\n<span class="token punctuation">{</span>\n    Name <span class="token operator">=</span> <span class="token string">"hero"</span><span class="token punctuation">,</span>\n    Resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncFieldResolver<span class="token punctuation">&lt;</span>Droid<span class="token punctuation">></span></span><span class="token punctuation">(</span>context <span class="token operator">=></span> data<span class="token punctuation">.</span><span class="token function">GetDroidByIdAsync</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// works in v4, not in v5</span>\n<span class="token class-name">Func<span class="token punctuation">&lt;</span>IResolveFieldContext<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">></span></span> func <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token operator">=></span> data<span class="token punctuation">.</span><span class="token function">GetDroidByIdAsync</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token generic-method"><span class="token function">FieldDelegate</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DroidType<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>\n    <span class="token string">"droid"</span><span class="token punctuation">,</span>\n    <span class="token named-parameter punctuation">arguments</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryArguments</span><span class="token punctuation">(</span>\n        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryArgument<span class="token punctuation">&lt;</span>NonNullGraphType<span class="token punctuation">&lt;</span>StringGraphType<span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> Description <span class="token operator">=</span> <span class="token string">"id of the droid"</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token named-parameter punctuation">resolve</span><span class="token punctuation">:</span> func\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// works in v4 or v5</span>\n<span class="token class-name">Func<span class="token punctuation">&lt;</span>IResolveFieldContext<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">,</span> Task<span class="token punctuation">&lt;</span>Droid<span class="token punctuation">></span><span class="token punctuation">></span></span> func <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token operator">=></span> data<span class="token punctuation">.</span><span class="token function">GetDroidByIdAsync</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token generic-method"><span class="token function">FieldDelegate</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DroidType<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>\n    <span class="token string">"droid"</span><span class="token punctuation">,</span>\n    <span class="token named-parameter punctuation">arguments</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryArguments</span><span class="token punctuation">(</span>\n        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryArgument<span class="token punctuation">&lt;</span>NonNullGraphType<span class="token punctuation">&lt;</span>StringGraphType<span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> Description <span class="token operator">=</span> <span class="token string">"id of the droid"</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token named-parameter punctuation">resolve</span><span class="token punctuation">:</span> func\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="33-code-classlanguage-textiresolveeventstreamcontextcode-interface-and-code-classlanguage-textresolveeventstreamcontextcode-class-removed"><a href="#33-code-classlanguage-textiresolveeventstreamcontextcode-interface-and-code-classlanguage-textresolveeventstreamcontextcode-class-removed" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>33. <code class="language-text">IResolveEventStreamContext</code> interface and <code class="language-text">ResolveEventStreamContext</code> class removed</h3>\n<p>Please use the <code class="language-text">IResolveFieldContext</code> interface and the <code class="language-text">ResolveFieldContext</code> class instead. No other changes are required.</p>\n<h3 id="34-code-classlanguage-texteventstreamfieldtypecode-class-removed"><a href="#34-code-classlanguage-texteventstreamfieldtypecode-class-removed" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>34. <code class="language-text">EventStreamFieldType</code> class removed</h3>\n<p>Please use <code class="language-text">FieldType</code> instead. The <code class="language-text">Subscriber</code> property has been moved to the <code class="language-text">FieldType</code> class so no other changes should be required.\nThe <code class="language-text">AsyncSubscriber</code> property has been removed as described above.</p>\n<h3 id="35-code-classlanguage-textieventstreamresolverlttcode-interface-removed"><a href="#35-code-classlanguage-textieventstreamresolverlttcode-interface-removed" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>35. <code class="language-text">IEventStreamResolver&lt;T></code> interface removed</h3>\n<p>For custom resolver implementations, please implement <code class="language-text">ISourceStreamResolver</code> (previously <code class="language-text">IEventStreamResolver</code>) interface instead.</p>\n<h3 id="36-asynchronous-field-resolver-classes-have-been-removed"><a href="#36-asynchronous-field-resolver-classes-have-been-removed" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>36. Asynchronous field resolver classes have been removed</h3>\n<p>These classes have been removed:</p>\n<ul>\n<li><code class="language-text">ScopedAsyncFieldResolver</code></li>\n<li><code class="language-text">AsyncFieldResolver</code></li>\n<li><code class="language-text">AsyncEventStreamResolver</code></li>\n</ul>\n<p>Please use the new <code class="language-text">ValueTask</code>-based constructors on <code class="language-text">ScopedFieldResolver</code>, <code class="language-text">FuncFieldResolver</code> and <code class="language-text">SourceStreamResolver</code>\n(previously <code class="language-text">EventStreamResolver</code>) instead.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// v4</span>\n<span class="token class-name"><span class="token keyword">var</span></span> resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncFieldResolver<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">async</span> context <span class="token operator">=></span> <span class="token keyword">await</span> <span class="token function">GetSomeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// v5</span>\n<span class="token class-name"><span class="token keyword">var</span></span> resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FuncFieldResolver<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">async</span> context <span class="token operator">=></span> <span class="token keyword">await</span> <span class="token function">GetSomeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// v4</span>\n<span class="token class-name">Func<span class="token punctuation">&lt;</span>IResolveFieldContext<span class="token punctuation">,</span> Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span><span class="token punctuation">></span></span> func <span class="token operator">=</span> <span class="token keyword">async</span> context <span class="token operator">=></span> <span class="token keyword">await</span> <span class="token function">GetSomeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncFieldResolver</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// v5 option 1</span>\n<span class="token class-name">Func<span class="token punctuation">&lt;</span>IResolveFieldContext<span class="token punctuation">,</span> ValueTask<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span><span class="token punctuation">></span></span> func <span class="token operator">=</span> <span class="token keyword">async</span> context <span class="token operator">=></span> <span class="token keyword">await</span> <span class="token function">GetSomeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FuncFieldResolver</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// v5 option 2</span>\n<span class="token class-name">Func<span class="token punctuation">&lt;</span>IResolveFieldContext<span class="token punctuation">,</span> Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span><span class="token punctuation">></span></span> func <span class="token operator">=</span> <span class="token keyword">async</span> context <span class="token operator">=></span> <span class="token keyword">await</span> <span class="token function">GetSomeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FuncFieldResolver</span><span class="token punctuation">(</span>context <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValueTask<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// v5 option 3</span>\n<span class="token class-name">Func<span class="token punctuation">&lt;</span>IResolveFieldContext<span class="token punctuation">,</span> Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span><span class="token punctuation">></span></span> func <span class="token operator">=</span> <span class="token keyword">async</span> context <span class="token operator">=></span> <span class="token keyword">await</span> <span class="token function">GetSomeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FuncFieldResolver</span><span class="token punctuation">(</span><span class="token keyword">async</span> context <span class="token operator">=></span> <span class="token keyword">await</span> <span class="token function">func</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Field builder methods have not changed and still require a <code class="language-text">Task&lt;T></code> return value for asynchronous field resolver delegates.</p>\n<h3 id="37-code-classlanguage-textnamefieldresolvercode-implementation-supports-methods-with-arguments-may-cause-code-classlanguage-textambigiousmatchexceptioncode"><a href="#37-code-classlanguage-textnamefieldresolvercode-implementation-supports-methods-with-arguments-may-cause-code-classlanguage-textambigiousmatchexceptioncode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>37. <code class="language-text">NameFieldResolver</code> implementation supports methods with arguments; may cause <code class="language-text">AmbigiousMatchException</code></h3>\n<p>The <code class="language-text">NameFieldResolver</code>, used when adding a field by name (e.g. <code class="language-text">Field&lt;StringGraphType>("Name");</code>),\nnow supports methods with arguments. During resolver execution, it first looks for a matching property\nwith the specified name, and if none is found, looks for a method with the matching name. Since it\nnow supports methods with arguments as well as methods without arguments, an <code class="language-text">AmbigiousMatchException</code>\ncan occur if the name refers to a public method with multiple overloads. Either specify a field\nresolver explicitly, or reduce the number of public methods with the same name to one.</p>\n<h3 id="38-code-classlanguage-textschematypescode-updated-to-support-di-injected-mapping-providers"><a href="#38-code-classlanguage-textschematypescode-updated-to-support-di-injected-mapping-providers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>38. <code class="language-text">SchemaTypes</code> updated to support DI-injected mapping providers</h3>\n<ul>\n<li>\n<p><code class="language-text">Initialize</code> method signature changed to include DI-injected mappings.</p>\n</li>\n<li>\n<p><code class="language-text">GetGraphTypeFromClrType</code> method signature changed to include DI-injected mappings.\nRather than a list of CLR to graph type tuples provided to the method, now a list of\n<code class="language-text">IGraphTypeMappingProvider</code> instances is provided.</p>\n</li>\n</ul>\n<h3 id="39-code-classlanguage-textexecutionresultjsonconvertercode-does-not-handle-code-classlanguage-textexecutionerrorcode"><a href="#39-code-classlanguage-textexecutionresultjsonconvertercode-does-not-handle-code-classlanguage-textexecutionerrorcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>39. <code class="language-text">ExecutionResultJsonConverter</code> does not handle <code class="language-text">ExecutionError</code>.</h3>\n<p>If you directly create an instance of <code class="language-text">ExecutionResultJsonConverter</code> and adding it to a set of\nserializer options, you will now need to also add <code class="language-text">ExecutionErrorJsonConverter</code> also. The\n<code class="language-text">IErrorInfoProvider</code> instance previously passed to the <code class="language-text">ExecutionResultJsonConverter</code> will\nneed to be passed to the <code class="language-text">ExecutionErrorJsonConverter</code> instead. Typically no changes are\nnecessary to user code for this API change.</p>\n<h3 id="40-subscription-document-executer-removed"><a href="#40-subscription-document-executer-removed" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>40. Subscription document executer removed</h3>\n<p>Subscription support is provided by the <code class="language-text">DocumentExecuter</code> implementation without the need to\nuse <code class="language-text">SubscriptionDocumentExecuter</code> or override <code class="language-text">DocumentExecuter.SelectExecutionStrategy</code>. You may\nalso remove references to the <code class="language-text">IGraphQLBuilder.AddSubscriptionDocumentExecuter</code> method.</p>\n<h3 id="41-subscription-nuget-package-removed"><a href="#41-subscription-nuget-package-removed" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>41. Subscription nuget package removed</h3>\n<p>Subscription support has been moved into the main project. If you have a need to reference\n<code class="language-text">SubscriptionExecutionStrategy</code>, it now exists within the <code class="language-text">GraphQL</code> nuget package. You\nwill need to remove references to the <code class="language-text">GraphQL.SystemReactive</code> nuget package.</p>\n<h3 id="42-code-classlanguage-textsubscriptionexecutionresultcode-class-removed"><a href="#42-code-classlanguage-textsubscriptionexecutionresultcode-class-removed" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>42. <code class="language-text">SubscriptionExecutionResult</code> class removed</h3>\n<p>The <code class="language-text">SubscriptionExecutionResult.Streams</code> property has been moved to the <code class="language-text">ExecutionResult</code> class.\nPlease use the <code class="language-text">ExecutionResult</code> class rather than the <code class="language-text">SubscriptionExecutionResult</code> class.</p>\n<h3 id="43-code-classlanguage-textdatetimeoffsetgraphtypecode-does-not-adjust-to-utc"><a href="#43-code-classlanguage-textdatetimeoffsetgraphtypecode-does-not-adjust-to-utc" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>43. <code class="language-text">DateTimeOffsetGraphType</code> does not adjust to UTC</h3>\n<p>Previously any ISO-8601 date/time values were converted to UTC before being returned in\na <code class="language-text">DateTimeOffset</code> value from the <code class="language-text">DateTimeOffsetGraphType</code>. This results in a loss of\ninformation that was provided to the GraphQL request. In v5, the time offset is preserved.</p>\n<p>Although typically <code class="language-text">DateTimeOffset</code> values are not assumed to be in any specific time zone,\nif your code does so, you may need to make changes to your code or implement a custom scalar\nto replace the default scalar.</p>\n<p>You may be affected by this change if you use certain versions of Npgsql.\nSee <a href="https://www.npgsql.org/doc/types/datetime.html">https://www.npgsql.org/doc/types/datetime.html</a></p>\n<h3 id="44-code-classlanguage-textoverlappingfieldscanbemergedcode-validation-rule-enabled-by-default"><a href="#44-code-classlanguage-textoverlappingfieldscanbemergedcode-validation-rule-enabled-by-default" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>44. <code class="language-text">OverlappingFieldsCanBeMerged</code> validation rule enabled by default</h3>\n<p>Previously this rule, part of the GraphQL specification, was not enabled by default; in\nGraphQL.NET v5 it is enabled by default as part of the <code class="language-text">DocumentValidator.CoreRules</code> list.</p>\n<h3 id="45-subscription-methods-classes-and-interfaces-renamed"><a href="#45-subscription-methods-classes-and-interfaces-renamed" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>45. Subscription methods, classes and interfaces renamed</h3>\n<ul>\n<li><code class="language-text">IEventStreamResolver</code> is now <code class="language-text">ISourceStreamResolver</code></li>\n<li><code class="language-text">EventStreamResolver</code> is now <code class="language-text">SourceStreamResolver</code></li>\n<li><code class="language-text">IAsyncEventStreamResolver</code> and <code class="language-text">AsyncEventStreamResolver</code> have been removed</li>\n<li><code class="language-text">IEventStreamResolver.Subscriber</code> is now <code class="language-text">ISourceStreamResolver.ResolveAsync</code></li>\n<li>Field builder <code class="language-text">Subscribe</code> and <code class="language-text">SubscribeAsync</code> methods are now <code class="language-text">ResolveStream</code> and <code class="language-text">ResolveStreamAsync</code></li>\n</ul>\n<h3 id="46-code-classlanguage-textvalidationcontextgetrecursivevariablescode-returns-null-instead-of-an-empty-list"><a href="#46-code-classlanguage-textvalidationcontextgetrecursivevariablescode-returns-null-instead-of-an-empty-list" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>46. <code class="language-text">ValidationContext.GetRecursiveVariables</code> returns null instead of an empty list</h3>\n<p>This was done for the purposes of the overall strategy for reducing memory consumption.</p>\n<h3 id="47-code-classlanguage-textauthorizewithcode-renamed-to-code-classlanguage-textauthorizewithpolicycode"><a href="#47-code-classlanguage-textauthorizewithcode-renamed-to-code-classlanguage-textauthorizewithpolicycode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>47. <code class="language-text">AuthorizeWith</code> renamed to <code class="language-text">AuthorizeWithPolicy</code></h3>\n<p>This change was made to clarify and differentiate between <code class="language-text">AuthorizeWithRoles</code>.</p>',
fields:{relativePath:"docs/migrations/migration5.md"}},site:{siteMetadata:{githubEditUrl:"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site"}}},pathContext:{relativePath:"docs/migrations/migration5.md"}}}});
//# sourceMappingURL=path---docs-migrations-migration-5-f3085174a59a3662df84.js.map