{"componentChunkName":"component---src-components-docs-page-js","path":"/docs/getting-started/field-middleware/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"field-middleware\" style=\"position:relative;\"><a href=\"#field-middleware\" aria-label=\"field middleware permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Field Middleware</h1>\n<p>Field Middleware provides additional behaviors during field resolution. GraphQL.NET supports two types:</p>\n<ol>\n<li><strong>Global Middleware</strong> - Applied to all fields across the entire schema</li>\n<li><strong>Field-Specific Middleware</strong> - Applied to individual fields (v8.7.0+)</li>\n</ol>\n<p>Both types work similarly to ASP.NET Core HTTP middleware, executing in a chain where each middleware can perform actions before and after the next middleware or resolver.</p>\n<h2 id=\"creating-middleware\" style=\"position:relative;\"><a href=\"#creating-middleware\" aria-label=\"creating middleware permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating Middleware</h2>\n<p>Middleware is created by implementing the <code class=\"language-text\">IFieldMiddleware</code> interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggingMiddleware</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IFieldMiddleware</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>LoggingMiddleware<span class=\"token punctuation\">></span></span> _logger<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">LoggingMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>LoggingMiddleware<span class=\"token punctuation\">></span></span> logger<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">ValueTask<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">ResolveAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IResolveFieldContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FieldMiddlewareDelegate</span> next<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Resolving {Field}\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>FieldName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Resolved {Field}\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>FieldName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The same middleware class can be used as either global or field-specific middleware depending on how you register it.</p>\n<h2 id=\"global-middleware\" style=\"position:relative;\"><a href=\"#global-middleware\" aria-label=\"global middleware permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Global Middleware</h2>\n<p>Global middleware applies to all fields in your schema. This is useful for cross-cutting concerns like logging, metrics, or authorization.</p>\n<h3 id=\"using-usemiddleware\" style=\"position:relative;\"><a href=\"#using-usemiddleware\" aria-label=\"using usemiddleware permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using UseMiddleware</h3>\n<p>The recommended approach is using <code class=\"language-text\">UseMiddleware&lt;T>()</code> on the GraphQL builder:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSchema</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MySchema<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UseMiddleware</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>InstrumentFieldsMiddleware<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UseMiddleware</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>LoggingMiddleware<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This automatically registers the middleware in DI as a singleton and applies it to the schema.</p>\n<h3 id=\"manual-registration\" style=\"position:relative;\"><a href=\"#manual-registration\" aria-label=\"manual registration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Manual Registration</h3>\n<p>You can also register middleware directly on the schema:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySchema</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Schema</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MySchema</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceProvider</span> services<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MyQuery</span> query<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LoggingMiddleware</span> middleware<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>services<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Query <span class=\"token operator\">=</span> query<span class=\"token punctuation\">;</span>\n        FieldMiddleware<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Or use a lambda:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">schema<span class=\"token punctuation\">.</span>FieldMiddleware<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>next <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span> context <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Code before resolver</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Code after resolver</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"field-specific-middleware\" style=\"position:relative;\"><a href=\"#field-specific-middleware\" aria-label=\"field specific middleware permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Field-Specific Middleware</h2>\n<p>Field-specific middleware applies only to designated fields, offering better performance and clearer intent than global middleware for field-level concerns. There are three ways to apply middleware to a field:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Register middleware in DI first if applicable</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>LoggingMiddleware<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyGraphType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectGraphType</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyGraphType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringGraphType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"field1\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Resolve</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">=></span> <span class=\"token string\">\"Data\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 1. Using a lambda</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ApplyMiddleware</span><span class=\"token punctuation\">(</span>next <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span> context <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Custom logic here</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringGraphType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"field2\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Resolve</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">=></span> <span class=\"token string\">\"Data\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 2. Using a middleware instance</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ApplyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">LoggingMiddleware</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringGraphType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"field3\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Resolve</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">=></span> <span class=\"token string\">\"Data\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 3. Using a type resolved from DI (recommended)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ApplyMiddleware</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>LoggingMiddleware<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"execution-order\" style=\"position:relative;\"><a href=\"#execution-order\" aria-label=\"execution order permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Execution Order</h2>\n<p>When both global and field-specific middleware are present:</p>\n<ol>\n<li>Global middleware (in registration order)</li>\n<li>Field-specific middleware (in application order)</li>\n<li>Field resolver</li>\n</ol>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Global middleware</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSchema</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MySchema<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UseMiddleware</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>GlobalMiddleware1<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UseMiddleware</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>GlobalMiddleware2<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Field-specific middleware</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyGraphType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectGraphType</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyGraphType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringGraphType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myField\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Resolve</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">=></span> <span class=\"token string\">\"Result\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ApplyMiddleware</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>FieldMiddleware1<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ApplyMiddleware</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>FieldMiddleware2<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Execution order:</span>\n<span class=\"token comment\">// 1. GlobalMiddleware1 (before)</span>\n<span class=\"token comment\">// 2. GlobalMiddleware2 (before)</span>\n<span class=\"token comment\">// 3. FieldMiddleware1 (before)</span>\n<span class=\"token comment\">// 4. FieldMiddleware2 (before)</span>\n<span class=\"token comment\">// 5. Field Resolver executes</span>\n<span class=\"token comment\">// 6. FieldMiddleware2 (after)</span>\n<span class=\"token comment\">// 7. FieldMiddleware1 (after)</span>\n<span class=\"token comment\">// 8. GlobalMiddleware2 (after)</span>\n<span class=\"token comment\">// 9. GlobalMiddleware1 (after)</span></code></pre></div>\n<h2 id=\"dependency-injection\" style=\"position:relative;\"><a href=\"#dependency-injection\" aria-label=\"dependency injection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependency Injection</h2>\n<h3 id=\"using-di-with-global-middleware\" style=\"position:relative;\"><a href=\"#using-di-with-global-middleware\" aria-label=\"using di with global middleware permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using DI with Global Middleware</h3>\n<p>When using <code class=\"language-text\">UseMiddleware&lt;T>()</code>, the middleware is automatically registered as a singleton. For manual registration:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>LoggingMiddleware<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySchema</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Schema</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MySchema</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceProvider</span> services<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MyQuery</span> query<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LoggingMiddleware</span> middleware<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>services<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Query <span class=\"token operator\">=</span> query<span class=\"token punctuation\">;</span>\n        FieldMiddleware<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"using-di-with-field-specific-middleware\" style=\"position:relative;\"><a href=\"#using-di-with-field-specific-middleware\" aria-label=\"using di with field specific middleware permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using DI with Field-Specific Middleware</h3>\n<p>When using <code class=\"language-text\">ApplyMiddleware&lt;T>()</code>, the middleware must be registered in the DI container:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Register middleware in DI</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AuthorizationMiddleware<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Apply to field - middleware is resolved from DI during schema initialization</span>\n<span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringGraphType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"protectedField\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Resolve</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">=></span> <span class=\"token string\">\"Protected data\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ApplyMiddleware</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AuthorizationMiddleware<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Note</strong>: The middleware is resolved from DI during schema initialization, not during each field resolution.</p>\n<h3 id=\"scoped-dependencies\" style=\"position:relative;\"><a href=\"#scoped-dependencies\" aria-label=\"scoped dependencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scoped Dependencies</h3>\n<p>For scoped dependencies, use a singleton middleware and resolve dependencies in <code class=\"language-text\">ResolveAsync</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMiddleware</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IFieldMiddleware</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">ValueTask<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">ResolveAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IResolveFieldContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FieldMiddlewareDelegate</span> next<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> scopedService <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>RequestServices<span class=\"token operator\">!</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IMyScopedService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// Use scoped service</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"lifetime-considerations\" style=\"position:relative;\"><a href=\"#lifetime-considerations\" aria-label=\"lifetime considerations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lifetime Considerations</h2>\n<p>Recommended lifetimes for optimal performance:</p>\n<table>\n<thead>\n<tr>\n<th>Schema</th>\n<th>Graph Type</th>\n<th>Middleware</th>\n<th>Recommendation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>singleton</td>\n<td>singleton</td>\n<td>singleton</td>\n<td>✅ Recommended</td>\n</tr>\n<tr>\n<td>scoped</td>\n<td>scoped</td>\n<td>singleton</td>\n<td>⚠️ Less performant</td>\n</tr>\n<tr>\n<td>scoped</td>\n<td>scoped</td>\n<td>scoped</td>\n<td>⚠️ Least performant</td>\n</tr>\n<tr>\n<td>scoped</td>\n<td>singleton</td>\n<td>scoped</td>\n<td>❌ Avoid - causes duplicate middleware application</td>\n</tr>\n<tr>\n<td>singleton</td>\n<td>singleton</td>\n<td>scoped</td>\n<td>❌ Avoid - throws InvalidOperationException</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Important</strong>: Middleware is applied during schema initialization. Using incompatible lifetimes can cause middleware to be applied multiple times or fail to resolve.</p>\n<h2 id=\"field-middleware-vs-directives\" style=\"position:relative;\"><a href=\"#field-middleware-vs-directives\" aria-label=\"field middleware vs directives permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Field Middleware vs Directives</h2>\n<p><strong>Use Field Middleware when:</strong></p>\n<ul>\n<li>You need programmatic control over field behavior</li>\n<li>The behavior is implementation-specific (not part of the schema contract)</li>\n<li>You want to apply logic to specific fields without schema changes</li>\n</ul>\n<p><strong>Use Directives when:</strong></p>\n<ul>\n<li>The behavior should be visible in schema introspection</li>\n<li>You want schema-first configuration</li>\n<li>The behavior applies to multiple schema elements (types, fields, arguments)</li>\n</ul>\n<p>For more information, see <a href=\"../directives\">Directives</a>.</p>\n<h2 id=\"interface-reference\" style=\"position:relative;\"><a href=\"#interface-reference\" aria-label=\"interface reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interface Reference</h2>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFieldMiddleware</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\">ValueTask<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">ResolveAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IResolveFieldContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FieldMiddlewareDelegate</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\">ValueTask<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">FieldMiddlewareDelegate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IResolveFieldContext</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","fields":{"relativePath":"docs/getting-started/field-middleware.md"}},"site":{"siteMetadata":{"githubEditUrl":"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site"}}},"pageContext":{"relativePath":"docs/getting-started/field-middleware.md"}},"staticQueryHashes":["3402777086"],"slicesMap":{}}