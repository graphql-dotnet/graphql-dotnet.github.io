{"componentChunkName":"component---src-components-docs-page-js","path":"/docs/getting-started/query-validation/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"query-validation\" style=\"position:relative;\"><a href=\"#query-validation\" aria-label=\"query validation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query Validation</h1>\n<p>There <a href=\"https://spec.graphql.org/October2021/#sec-Validation\">are a number of query validation rules</a>\nthat are ran when a query is executed. All of these are turned on by default. You can add custom validation\nrules by calling <code class=\"language-text\">.AddValidationRule&lt;T>()</code> within your DI configuration as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n  <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSchema</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MySchema<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddSystemTextJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddValidationRule</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>RequiresAuthValidationRule<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When not using the DI builder methods, you can set the <code class=\"language-text\">ExecutionOptions.ValidationRules</code> property when\ncalling <code class=\"language-text\">IDocumentExecuter.ExecuteAsync</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">await</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n  _<span class=\"token punctuation\">.</span>Query <span class=\"token operator\">=</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">;</span>\n  _<span class=\"token punctuation\">.</span>ValidationRules <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RequiresAuthValidationRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span>DocumentValidator<span class=\"token punctuation\">.</span>CoreRules<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"setting-validation-rules-on-input-arguments-or-input-object-fields\" style=\"position:relative;\"><a href=\"#setting-validation-rules-on-input-arguments-or-input-object-fields\" aria-label=\"setting validation rules on input arguments or input object fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting validation rules on input arguments or input object fields</h2>\n<p>When defining a schema, you can set validation rules on input arguments or input object fields.\nThis can be used to easily validate input values such as email addresses, phone numbers, or to\nvalidate a value is within a specific range. The <code class=\"language-text\">Validator</code> delegate is used to validate the\ninput value, and can be set via the <code class=\"language-text\">Validate</code> method on the <code class=\"language-text\">FieldBuilder</code> or <code class=\"language-text\">QueryArgument</code>.\nHere are some examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// for an input object graph type</span>\n\n<span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>FirstName<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Validate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Length <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Length must be less than 10 characters.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Age<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Validate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Age must be 18 or older.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Password<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Validate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">VerifyPasswordComplexity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">Validator</code> delegate is called during the validation stage, prior to execution of the request.\nNull values are not passed to the validation function. Throwing an exception from the <code class=\"language-text\">Validator</code>\ndelegate will produce a response similar to the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"errors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Invalid value for argument 'firstName' of field 'testMe'. Length must be less than 10 characters.\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"locations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span> <span class=\"token number\">14</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"INVALID_VALUE\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"codes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"INVALID_VALUE\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"ARGUMENT\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5.6\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For additional control over the error message, you can throw a <code class=\"language-text\">ValidationError</code> or derived\nexception class with a custom error message. The <code class=\"language-text\">locations</code> property will be automatically\nset to the location of the input field or argument, but the message will remain the same.</p>\n<p>For type-first schemas, you may define your own attributes to perform validation, either on input\nfields or on output field arguments. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// for AutoRegisteringObjectGraphType&lt;MyClass></span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">TestMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MyMaxLength</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMaxLength</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">GraphQLAttribute</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _maxLength<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> maxLength<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _maxLength <span class=\"token operator\">=</span> maxLength<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Modify</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArgumentInformation</span> argumentInformation<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argumentInformation<span class=\"token punctuation\">.</span>TypeInformation<span class=\"token punctuation\">.</span>Type <span class=\"token operator\">!=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">InvalidOperationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyMaxLength can only be used on string arguments.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Modify</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryArgument</span> queryArgument<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        queryArgument<span class=\"token punctuation\">.</span><span class=\"token function\">Validate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Length <span class=\"token operator\">></span> _maxLength<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Value is too long. Max length is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">_maxLength</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When using the <code class=\"language-text\">Validator</code> delegate, there is no need write or install a custom validation rule\nto handle the validation. The <code class=\"language-text\">Validator</code> delegate is called during the validation stage, and\nwill not unnecessarily trigger the unhandled exception handler due to client input errors.</p>\n<p>At this time GraphQL.NET does not directly support the <code class=\"language-text\">MaxLength</code> and similar attributes from\n<code class=\"language-text\">System.ComponentModel.DataAnnotations</code>, but this may be added in a future version. You can\nimplement your own attributes as shown above, or call the <code class=\"language-text\">Validate</code> method to set a validation\nfunction.</p>\n<h2 id=\"custom-validation-rules\" style=\"position:relative;\"><a href=\"#custom-validation-rules\" aria-label=\"custom validation rules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Validation Rules</h2>\n<p>Validation rules are built with the <code class=\"language-text\">IValidationRule</code> interface and can validate the document and variables\nat different stages of the validation process: before parsing arguments, during parsing of variables, and\nafter parsing arguments. The <code class=\"language-text\">INodeVisitor</code> interface is used to traverse the AST and report errors via\nthe <code class=\"language-text\">ValidationContext</code> class, while the <code class=\"language-text\">IVariableVisitor</code> interface is used to validate variables.\nAlso relevant is the <code class=\"language-text\">TypeInfo</code> class, which provides type information for the current position in the document,\nand the <code class=\"language-text\">MatchingNodeVisitor</code> and <code class=\"language-text\">NodeVisitors</code> helper classes for creating and combining node visitors.</p>\n<h3 id=\"code-classlanguage-textivalidationrulecode-interface\" style=\"position:relative;\"><a href=\"#code-classlanguage-textivalidationrulecode-interface\" aria-label=\"code classlanguage textivalidationrulecode interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">IValidationRule</code> interface</h3>\n<p><code class=\"language-text\">IValidationRule</code> represents a validation rule for a GraphQL document. It consists of three methods:</p>\n<ol>\n<li><code class=\"language-text\">GetPreNodeVisitorAsync</code>: Returns a node visitor for validating the document before parsing arguments.</li>\n<li><code class=\"language-text\">GetVariableVisitorAsync</code>: Returns a visitor used while parsing variables.</li>\n<li><code class=\"language-text\">GetPostNodeVisitorAsync</code>: Returns a node visitor for validating the document after parsing all arguments.</li>\n</ol>\n<h3 id=\"code-classlanguage-textinodevisitorcode-interface\" style=\"position:relative;\"><a href=\"#code-classlanguage-textinodevisitorcode-interface\" aria-label=\"code classlanguage textinodevisitorcode interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">INodeVisitor</code> interface</h3>\n<p><code class=\"language-text\">INodeVisitor</code> handles events raised by a node walker. It has two methods:</p>\n<ol>\n<li><code class=\"language-text\">EnterAsync(ASTNode node, ValidationContext context)</code>: Called when entering a node.</li>\n<li><code class=\"language-text\">LeaveAsync(ASTNode node, ValidationContext context)</code>: Called when leaving a node.</li>\n</ol>\n<h3 id=\"code-classlanguage-textivariablevisitorcode-interface\" style=\"position:relative;\"><a href=\"#code-classlanguage-textivariablevisitorcode-interface\" aria-label=\"code classlanguage textivariablevisitorcode interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">IVariableVisitor</code> interface</h3>\n<p><code class=\"language-text\">IVariableVisitor</code> is used to validate variables. It has four methods:</p>\n<ol>\n<li><code class=\"language-text\">VisitScalarAsync</code>: Called when parsing a scalar value.</li>\n<li><code class=\"language-text\">VisitListAsync</code>: Called when parsing a list value.</li>\n<li><code class=\"language-text\">VisitObjectAsync</code>: Called when parsing an input object value.</li>\n<li><code class=\"language-text\">VisitFieldAsync</code>: Called when parsing a field of an input object value.</li>\n</ol>\n<p>This interface mainly exists for legacy compatibility and is not recommended for new code. Rather, use the\n<code class=\"language-text\">Validate</code> method on <code class=\"language-text\">FieldBuilder</code> or <code class=\"language-text\">QueryArgument</code> to validate input values. See the schema node visitor\nsample at the bottom of this document for a technique to apply validation rules across the entire schema.</p>\n<p>For an example of a custom validation rule that implements <code class=\"language-text\">GetVariableVisitorAsync</code>, see the\n<a href=\"https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL/Validation/Rules.Custom/InputFieldsAndArgumentsOfCorrectLength.cs\"><code class=\"language-text\">InputFieldsAndArgumentsOfCorrectLength</code> class</a>.</p>\n<h3 id=\"code-classlanguage-textvalidationrulebasecode-class\" style=\"position:relative;\"><a href=\"#code-classlanguage-textvalidationrulebasecode-class\" aria-label=\"code classlanguage textvalidationrulebasecode class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">ValidationRuleBase</code> class</h3>\n<p><code class=\"language-text\">ValidationRuleBase</code> is an abstract class that provides a default implementation of <code class=\"language-text\">IValidationRule</code>. It can be\nextended to create custom validation rules.</p>\n<h3 id=\"code-classlanguage-textvalidationcontextcode-class\" style=\"position:relative;\"><a href=\"#code-classlanguage-textvalidationcontextcode-class\" aria-label=\"code classlanguage textvalidationcontextcode class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">ValidationContext</code> class</h3>\n<p><code class=\"language-text\">ValidationContext</code> is used to report errors and track the state of the validation process.\nMost of these mirror the same properties provided to the execution engine within <code class=\"language-text\">ExecutionOptions</code>.\nOther properties include the following:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">Document</code></td>\n<td>The parsed document AST being validated.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Operation</code></td>\n<td>The operation requested to be executed.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">TypeInfo</code></td>\n<td>The type information for the current position in the document.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ArgumentValues</code></td>\n<td>Within <code class=\"language-text\">GetPostNodeVisitorAsync</code>, contains the parsed argument values for the document.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">DirectiveValues</code></td>\n<td>Within <code class=\"language-text\">GetPostNodeVisitorAsync</code>, contains the parsed directive values for the document.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">ReportError</code></td>\n<td>Reports an error found during validation.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"code-classlanguage-textmatchingnodevisitorcode-class\" style=\"position:relative;\"><a href=\"#code-classlanguage-textmatchingnodevisitorcode-class\" aria-label=\"code classlanguage textmatchingnodevisitorcode class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">MatchingNodeVisitor</code> class</h3>\n<p><code class=\"language-text\">MatchingNodeVisitor</code> is a helper class that simplifies the process of creating node visitors.\nThe constructor takes a delegate that is called when a node matches the specified type.\nThe delegate can be synchronous or asynchronous, and a second delegate can be provided\nto be called when leaving the node. See the examples below for usage.</p>\n<h3 id=\"code-classlanguage-textnodevisitorscode-class\" style=\"position:relative;\"><a href=\"#code-classlanguage-textnodevisitorscode-class\" aria-label=\"code classlanguage textnodevisitorscode class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">NodeVisitors</code> class</h3>\n<p><code class=\"language-text\">NodeVisitors</code> is a helper class that provides methods for combining node visitors.\nThe constructor accepts an array of node visitors and calls them in order when entering and leaving nodes.</p>\n<h3 id=\"code-classlanguage-texttypeinfocode-class\" style=\"position:relative;\"><a href=\"#code-classlanguage-texttypeinfocode-class\" aria-label=\"code classlanguage texttypeinfocode class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">TypeInfo</code> class</h3>\n<p><code class=\"language-text\">TypeInfo</code> provides type information for the current node within the document. See xml comments\nfor exact details on each method.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">GetAncestor</code></td>\n<td>Returns the ancestor of the current node.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GetLastType</code></td>\n<td>Returns the last graph type matched.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GetInputType</code></td>\n<td>Returns the last input graph type matched.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GetParentType</code></td>\n<td>Returns the parent type of the current node.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GetFieldDef</code></td>\n<td>Returns the field definition for the current node.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GetDirective</code></td>\n<td>Returns the last directive matched.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GetArgument</code></td>\n<td>Returns the last argument matched.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example-1-disabling-introspection-requests\" style=\"position:relative;\"><a href=\"#example-1-disabling-introspection-requests\" aria-label=\"example 1 disabling introspection requests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example 1: Disabling Introspection Requests</h3>\n<p>This rule prevents introspection requests.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">/// &lt;summary></span>\n<span class=\"token comment\">/// Analyzes the document for any introspection fields and reports an error if any are found.</span>\n<span class=\"token comment\">/// &lt;/summary></span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NoIntrospectionValidationRule</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ValidationRuleBase</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">INodeVisitor</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">ValueTask<span class=\"token punctuation\">&lt;</span>INodeVisitor<span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetPreNodeVisitorAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ValidationContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\">ValueTask</span> INodeVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">EnterAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ASTNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ValidationContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token keyword\">is</span> <span class=\"token class-name\">GraphQLField</span> field<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">==</span> <span class=\"token string\">\"__schema\"</span> <span class=\"token operator\">||</span> field<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">==</span> <span class=\"token string\">\"__type\"</span><span class=\"token punctuation\">)</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">ReportError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NoIntrospectionError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Document<span class=\"token punctuation\">.</span>Source<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token return-type class-name\">ValueTask</span> INodeVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">LeaveAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ASTNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ValidationContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Or when using the <code class=\"language-text\">MatchingNodeVisitor</code> helper class:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NoIntrospectionValidationRule</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ValidationRuleBase</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">MatchingNodeVisitor<span class=\"token punctuation\">&lt;</span>GraphQLField<span class=\"token punctuation\">></span></span> _visitor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">==</span> <span class=\"token string\">\"__schema\"</span> <span class=\"token operator\">||</span> field<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">==</span> <span class=\"token string\">\"__type\"</span><span class=\"token punctuation\">)</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">ReportError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NoIntrospectionError</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Document<span class=\"token punctuation\">.</span>Source<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">ValueTask<span class=\"token punctuation\">&lt;</span>INodeVisitor<span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetPreNodeVisitorAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ValidationContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>_visitor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"example-2-limiting-connections-to-under-1000-rows\" style=\"position:relative;\"><a href=\"#example-2-limiting-connections-to-under-1000-rows\" aria-label=\"example 2 limiting connections to under 1000 rows permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example 2: Limiting Connections to Under 1000 Rows</h3>\n<p>This rule limits the number of rows returned in a connection to 1000.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSchema</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MySchema<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddValidationRule</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>NoConnectionOver1000ValidationRule<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NoConnectionOver1000ValidationRule</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ValidationRuleBase</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IVariableVisitorProvider</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">INodeVisitor</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">ValueTask<span class=\"token punctuation\">&lt;</span>INodeVisitor<span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetPostNodeVisitorAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ValidationContext</span> context<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> context<span class=\"token punctuation\">.</span>ArgumentValues <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">?</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\">ValueTask</span> INodeVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">EnterAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ASTNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ValidationContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token class-name\">GraphQLField</span> fieldNode<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> fieldDef <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>TypeInfo<span class=\"token punctuation\">.</span><span class=\"token function\">GetFieldDef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fieldDef <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> fieldDef<span class=\"token punctuation\">.</span>ResolvedType<span class=\"token punctuation\">?.</span><span class=\"token function\">GetNamedType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token class-name\">IObjectGraphType</span> connectionType <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>connectionType<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">.</span><span class=\"token function\">EndsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connection\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>ArgumentValues<span class=\"token punctuation\">?.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span>fieldNode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ArgumentValue</span> lastArg <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>args<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> firstArg<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>args<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"last\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> lastArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> rows <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">)</span>firstArg<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">??</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">)</span>lastArg<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rows <span class=\"token operator\">></span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n            context<span class=\"token punctuation\">.</span><span class=\"token function\">ReportError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ValidationError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot return more than 1000 rows\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token return-type class-name\">ValueTask</span> INodeVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">LeaveAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ASTNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ValidationContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"adding-validation-rules-via-schema-node-visitor\" style=\"position:relative;\"><a href=\"#adding-validation-rules-via-schema-node-visitor\" aria-label=\"adding validation rules via schema node visitor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding validation rules via schema node visitor</h2>\n<p>You may also add validation rules via a schema node visitor. The below sample performs the same\nvalidation as the previous example, but uses a schema node visitor. The schema node visitor is\ncalled when the schema is built, and adds the appropriate validation rules to the schema.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSchema</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MySchema<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSchemaVisitor</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>NoConnectionOver1000Visitor<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NoConnectionOver1000Visitor</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BaseSchemaNodeVisitor</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">VisitObjectFieldArgumentDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryArgument</span> argument<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FieldType</span> field<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IObjectGraphType</span> type<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ISchema</span> schema<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> argument<span class=\"token punctuation\">.</span>Validator <span class=\"token operator\">+=</span> <span class=\"token function\">GetValidator</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">VisitInterfaceFieldArgumentDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryArgument</span> argument<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FieldType</span> field<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IInterfaceGraphType</span> type<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ISchema</span> schema<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> field<span class=\"token punctuation\">.</span>Validator <span class=\"token operator\">+=</span> <span class=\"token function\">GetValidator</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Action<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">?</span></span> <span class=\"token function\">GetValidator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryArgument</span> argument<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FieldType</span> field<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// identify fields that return a connection type</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>field<span class=\"token punctuation\">.</span>ResolvedType<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetNamedType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">.</span><span class=\"token function\">EndsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connection\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// identify the first and last arguments</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">!=</span> <span class=\"token string\">\"first\"</span> <span class=\"token operator\">&amp;&amp;</span> argument<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">!=</span> <span class=\"token string\">\"last\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// apply the validation rule</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">value</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token keyword\">is</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> intValue <span class=\"token operator\">&amp;&amp;</span> intValue <span class=\"token operator\">></span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot return more than 1000 rows.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With the visitor approach, the validation is only evaluated at runtime when the applicable\nfield is requested, with no performance penalty otherwise. It is also considerably simpler\nto implement.</p>","fields":{"relativePath":"docs/getting-started/query-validation.md"}},"site":{"siteMetadata":{"githubEditUrl":"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site"}}},"pageContext":{"relativePath":"docs/getting-started/query-validation.md"}},"staticQueryHashes":["3402777086"],"slicesMap":{}}