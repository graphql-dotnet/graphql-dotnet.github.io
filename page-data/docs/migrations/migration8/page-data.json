{"componentChunkName":"component---src-components-docs-page-js","path":"/docs/migrations/migration8/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"migrating-from-v7x-to-v8x\" style=\"position:relative;\"><a href=\"#migrating-from-v7x-to-v8x\" aria-label=\"migrating from v7x to v8x permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Migrating from v7.x to v8.x</h1>\n<p>:warning: For the best upgrade experience, please upgrade to 7.9 and use the included analyzers\nto apply automatic code fixes to obsolete code patterns before upgrading to 8.0. :warning:</p>\n<p>See <a href=\"https://github.com/graphql-dotnet/graphql-dotnet/issues?q=milestone%3A8.0+is%3Aissue+is%3Aclosed\">issues</a> and\n<a href=\"https://github.com/graphql-dotnet/graphql-dotnet/pulls?q=is%3Apr+milestone%3A8.0+is%3Aclosed\">pull requests</a> done in v8.</p>\n<h2 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h2>\n<p>GraphQL.NET v8 is a major release that includes many new features, including:</p>\n<ul>\n<li>Argument parsing now occurs during validation</li>\n<li>Fields and arguments can have custom parsers applied, which will catch more coercion errors during validation rather than execution</li>\n<li>Fields can configure validation code for argument values which will run during the validation stage</li>\n<li>Validation rules can execute after arguments have been parsed</li>\n<li>Complexity analyzer rewritten; can examine arguments to facilitate analysis</li>\n<li>Federation support is simplified and Federation 2 is supported</li>\n<li>Federation is supported for schema-first, code-first and type-first</li>\n<li>Input object coercion via <code class=\"language-text\">ToObject</code> is dynamically compiled</li>\n<li><code class=\"language-text\">ComplexScalarGraphType</code> added, allowing flexible input/output types</li>\n<li><code class=\"language-text\">IMetadataWriter</code> and similar interfaces added to allow better intellisense</li>\n<li>List converter enhancements and AOT support</li>\n<li>OneOf Input Object support (based on draft spec)</li>\n<li>Infer nullability by default for <code class=\"language-text\">Field</code> methods</li>\n<li>Add Persisted Document support (based on draft spec)</li>\n<li>Better error handling of GraphQL.NET pipeline; add timeout support</li>\n<li>Optimize scalar lists (e.g. <code class=\"language-text\">ListGraphType&lt;IntGraphType></code>)</li>\n<li>Allow GraphQL interfaces to implement other GraphQL interfaces (based on spec)</li>\n</ul>\n<p>Some of these features require changes to the infrastructure, which can cause breaking changes during upgrades.\nMost notably, if your server uses any of the following features, you are likely to encounter migration issues:</p>\n<ul>\n<li>Custom validation rules, schema node visitors, or IResolveFieldContext implementations</li>\n<li>The complexity analyzer</li>\n<li>Apollo Federation subgraph support</li>\n<li>Custom implementations of GraphQL.NET infrastructure (e.g. custom <code class=\"language-text\">IGraphType</code> implementations not based on an included class)</li>\n<li>Manual registration of GraphQL.NET infrastructure types (vs. using <code class=\"language-text\">AddGraphQL</code> builder methods)</li>\n<li>Input object graph types having models utilizing private constructors or non-default init-only properties</li>\n<li>Generic graph types</li>\n<li>Methods previously marked as obsolete</li>\n<li>GraphQL types which improperly implement interfaces</li>\n<li>Calls to <code class=\"language-text\">ExecutionHelper.GetArguments</code></li>\n</ul>\n<p>Below we have documented each new feature and breaking change, outlining the steps you need to take to upgrade your\napplication to v8.0. When possible, we have provided code examples to help you understand the changes required, and\noptions to revert behavior to v7.x if necessary.</p>\n<p>Please keep in mind that methods and classes marked as obsolete in v8.x may be removed in v9.0. Each obsolete member\nwill include a message indicating the expected removal version.</p>\n<p>For best results through the migration, we recommend following these steps:</p>\n<ol>\n<li>Upgrade to GraphQL.NET v7.9</li>\n<li>Use the included analyzers to apply automatic code fixes to obsolete code patterns</li>\n<li>Implement a test that verifies the SDL of your schema matches the expected schema, as this will catch any changes\nthe generated schema between versions; a sample of this code is provided at the bottom of this document</li>\n<li>Set <code class=\"language-text\">GlobalSwitches.UseLegacyTypeNaming</code> to <code class=\"language-text\">false</code> and verify your type names have not changed (or override them),\nor set <code class=\"language-text\">GlobalSwitches.UseLegacyTypeNaming</code> to <code class=\"language-text\">true</code> to maintain v7.x behavior during the migration</li>\n<li>Set <code class=\"language-text\">GlobalSwitches.InferFieldNullabilityFromNRTAnnotations</code> to <code class=\"language-text\">true</code> and verify your inferred field types\nhave not changed, or set <code class=\"language-text\">GlobalSwitches.InferFieldNullabilityFromNRTAnnotations</code> to <code class=\"language-text\">false</code> to maintain v7.x behavior</li>\n<li>Upgrade to GraphQL.NET v8.0</li>\n</ol>\n<h2 id=\"new-features\" style=\"position:relative;\"><a href=\"#new-features\" aria-label=\"new features permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New Features</h2>\n<h3 id=\"1-code-classlanguage-textimetadatareadercode-code-classlanguage-textimetadatawritercode-and-code-classlanguage-textifieldmetadatawritercode-interfaces-added\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textimetadatareadercode-code-classlanguage-textimetadatawritercode-and-code-classlanguage-textifieldmetadatawritercode-interfaces-added\" aria-label=\"1 code classlanguage textimetadatareadercode code classlanguage textimetadatawritercode and code classlanguage textifieldmetadatawritercode interfaces added permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">IMetadataReader</code>, <code class=\"language-text\">IMetadataWriter</code> and <code class=\"language-text\">IFieldMetadataWriter</code> interfaces added</h3>\n<p>This makes it convenient to add extension methods to graph types or fields that can be used to read or write metadata\nsuch as authentication information. Methods for <code class=\"language-text\">IMetadataWriter</code> types will appear on both field builders and graph/field\ntypes, while methods for <code class=\"language-text\">IMetadataReader</code> types will only appear on graph and field types. You can also access the\n<code class=\"language-text\">IMetadataReader</code> reader from the <code class=\"language-text\">IMetadataWriter.MetadataReader</code> property. Here is an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">TMetadataBuilder</span> <span class=\"token generic-method\"><span class=\"token function\">RequireAdmin</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TMetadataBuilder<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">TMetadataBuilder</span> builder<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">where</span> <span class=\"token class-name\">TMetadataBuilder</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IMetadataWriter</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">.</span>MetadataReader<span class=\"token punctuation\">.</span>GetRoles<span class=\"token punctuation\">?.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Guests\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">InvalidOperationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot require admin and guest access at the same time.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">AuthorizeWithRoles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Administrators\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Both interfaces extend <code class=\"language-text\">IProvideMetadata</code> with read/write access to the metadata contained within the graph or field type.\nBe sure not to write metadata during the execution of a query, as the same graph/field type instance may be used for\nmultiple queries and you would run into concurrency issues.</p>\n<p>In addition, the <code class=\"language-text\">IFieldMetadataWriter</code> interface has been added to allow scoping extension methods to fields only.\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// adds the GraphQL Federation '@requires' directive to the field</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">TMetadataWriter</span> <span class=\"token generic-method\"><span class=\"token function\">Requires</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TMetadataWriter<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">TMetadataWriter</span> fieldType<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> fields<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">where</span> <span class=\"token class-name\">TMetadataWriter</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IFieldMetadataWriter</span></span>\n    <span class=\"token operator\">=></span> fieldType<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyDirective</span><span class=\"token punctuation\">(</span>PROVIDES_DIRECTIVE<span class=\"token punctuation\">,</span> d <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span><span class=\"token function\">AddArgument</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>FIELDS_ARGUMENT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Value <span class=\"token operator\">=</span> fields <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"2-built-in-scalars-may-be-overridden-via-di-registrations\" style=\"position:relative;\"><a href=\"#2-built-in-scalars-may-be-overridden-via-di-registrations\" aria-label=\"2 built in scalars may be overridden via di registrations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Built-in scalars may be overridden via DI registrations</h3>\n<p>For GraphQL.NET built-in scalars (such as <code class=\"language-text\">IntGraphType</code> or <code class=\"language-text\">GuidGraphType</code>), a dervied class may be registered\nwithin the DI engine to facilitate replacement of the graph type throughout the schema versus calling <code class=\"language-text\">RegisterType</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>BooleanGraphType<span class=\"token punctuation\">,</span> MyBooleanGraphType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>See <a href=\"https://graphql-dotnet.github.io/docs/getting-started/custom-scalars/#3-register-the-custom-scalar-within-your-schema\">https://graphql-dotnet.github.io/docs/getting-started/custom-scalars/#3-register-the-custom-scalar-within-your-schema</a>\nfor more details.</p>\n<h3 id=\"3-added-code-classlanguage-textcomplexscalargraphtypecode\" style=\"position:relative;\"><a href=\"#3-added-code-classlanguage-textcomplexscalargraphtypecode\" aria-label=\"3 added code classlanguage textcomplexscalargraphtypecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Added <code class=\"language-text\">ComplexScalarGraphType</code></h3>\n<p>This new scalar can be used to send or receive arbitrary objects or values to or from the server. It is functionally\nequivalent to the <code class=\"language-text\">AnyGraphType</code> used for GraphQL Federation, but defaults to the name of <code class=\"language-text\">Complex</code> rather than <code class=\"language-text\">_Any</code>.</p>\n<h3 id=\"4-code-classlanguage-textparsercode-delegates-added-to-input-field-and-argument-definitions\" style=\"position:relative;\"><a href=\"#4-code-classlanguage-textparsercode-delegates-added-to-input-field-and-argument-definitions\" aria-label=\"4 code classlanguage textparsercode delegates added to input field and argument definitions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. <code class=\"language-text\">Parser</code> delegates added to input field and argument definitions</h3>\n<p>This allows for custom parsing of input values. The <code class=\"language-text\">Parser</code> delegate is used to convert the input value\nto the expected type, and can be set via the <code class=\"language-text\">ParseValue</code> method on the <code class=\"language-text\">FieldBuilder</code> or <code class=\"language-text\">QueryArgument</code>.</p>\n<p>The auto-registering graph types will automatically configure the <code class=\"language-text\">Parser</code> delegate appropriately, and the\n<code class=\"language-text\">Field(x => x.Property)</code> and <code class=\"language-text\">Field(\"FieldName\", x => x.Property)</code> syntax will as well.</p>\n<p>The most common use case for this is when using the ID graph type (passed via a string) for a numeric or GUID identifier.\nFor example, consider the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// for input object graph type</span>\n<span class=\"token function\">Field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Id\"</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">type</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">NonNullGraphType<span class=\"token punctuation\">&lt;</span>IdGraphType<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyInputObject</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will now cause an error when the client sends a string value for the Id field that cannot be coerced to\nan <code class=\"language-text\">int</code> during the validation stage, rather than during the execution stage. Supplying an invalid value will\nproduce a response similar to the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"errors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Invalid value for argument 'id' of field 'testMe'. The input string 'abc' was not in a correct format.\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"locations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span> <span class=\"token number\">14</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"INVALID_VALUE\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"codes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"INVALID_VALUE\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"FORMAT\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5.6\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This now is a validation error and not passed to the unhandled exception handler. Previously, this would have been\nconsidered a server exception and processed by the unhandled exception handler, returning an error similar to the\nfollowing:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"errors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Error trying to resolve field 'testMe'.\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"locations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"testMe\"</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"FORMAT\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"codes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"FORMAT\"</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can also define a custom parser when appropriate to convert an input value to the expected type.\nThis is typically unnecessary when using the <code class=\"language-text\">Field(x => x.Property)</code> syntax, but when matching via\nproperty name, it may be desired to define a custom parser. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// for input object graph type</span>\n<span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringGraphType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"website\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// match by property name, perhaps for a constructor argument</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ParseValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Uri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyInputObject</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Uri<span class=\"token punctuation\">?</span></span> Website <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Without adding a parser the coercion will occur within the resolver during <code class=\"language-text\">GetArgument&lt;Uri>(\"abc\")</code>\nas occured in previous versions of GraphQL.NET. This will result in a server exception being thrown\nand processed by the unhandled exception handler if the value cannot be coerced to a <code class=\"language-text\">Uri</code>. Note that\nthe parser function need not check for null values.</p>\n<p>For type-first schemas in v8.1 and later, you may use the <code class=\"language-text\">[Parser]</code> attribute to define a custom parser\nas shown in the below example:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// sample for argument parsing</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OutputClass1</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// use local private static method</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Hello1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Parser</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>ParseHelloArgument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// use public static method from another class -- looks for ParserClass.Parse</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Hello2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Parser</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">ParserClass</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// use public static method from another class with a specific name</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Hello3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Parser</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">HelperClass</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>HelperClass<span class=\"token punctuation\">.</span>ParseHelloArgument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// example custom parser</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token function\">ParseHelloArgument</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"test1\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sample for input field parsing</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InputClass1</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Parser</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>ParseHelloArgument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> Field1 <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token function\">ParseHelloArgument</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"test1\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that this will replace the default parser configured by the auto-registering graph type.</p>\n<h3 id=\"5-code-classlanguage-textvalidatorcode-delegates-added-to-input-field-and-argument-definitions\" style=\"position:relative;\"><a href=\"#5-code-classlanguage-textvalidatorcode-delegates-added-to-input-field-and-argument-definitions\" aria-label=\"5 code classlanguage textvalidatorcode delegates added to input field and argument definitions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. <code class=\"language-text\">Validator</code> delegates added to input field and argument definitions</h3>\n<p>This allows for custom validation of input values. It can be used to easily validate input values\nsuch as email addresses, phone numbers, or to validate a value is within a specific range. The\n<code class=\"language-text\">Validator</code> delegate is used to validate the input value, and can be set via the <code class=\"language-text\">Validate</code> method\non the <code class=\"language-text\">FieldBuilder</code> or <code class=\"language-text\">QueryArgument</code>. Here are some examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// for an input object graph type</span>\n<span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>FirstName<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Validate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Length <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Length must be less than 10 characters.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Age<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Validate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Age must be 18 or older.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Password<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Validate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">VerifyPasswordComplexity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">Validator</code> delegate is called during the validation stage, prior to execution of the request.\nNull values are not passed to the validation function. Supplying an invalid value will produce\na response similar to the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"errors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Invalid value for argument 'firstName' of field 'testMe'. Length must be less than 10 characters.\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"locations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span> <span class=\"token number\">14</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"INVALID_VALUE\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"codes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"INVALID_VALUE\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"ARGUMENT\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5.6\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For type-first schemas, you may define your own attributes to perform validation, either on input\nfields or on output field arguments. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// for AutoRegisteringObjectGraphType&lt;MyClass></span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">TestMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MyMaxLength</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMaxLength</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">GraphQLAttribute</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _maxLength<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> maxLength<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _maxLength <span class=\"token operator\">=</span> maxLength<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Modify</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArgumentInformation</span> argumentInformation<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argumentInformation<span class=\"token punctuation\">.</span>TypeInformation<span class=\"token punctuation\">.</span>Type <span class=\"token operator\">!=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">InvalidOperationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyMaxLength can only be used on string arguments.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Modify</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryArgument</span> queryArgument<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        queryArgument<span class=\"token punctuation\">.</span><span class=\"token function\">Validate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Length <span class=\"token operator\">></span> _maxLength<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Value is too long. Max length is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">_maxLength</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In version 8.1 and newer, you can use the <code class=\"language-text\">[Validator]</code> attribute to define a custom validator\nas shown in the below example:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// sample for argument validation</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OutputClass2</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// use local private static method</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Hello1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Validator</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>ValidateHelloArgument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// use public static method from another class -- looks for ValidatorClass.Validate</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Hello2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Validator</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">ValidatorClass</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// use public static method from another class with a specific name</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Hello3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Validator</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">HelperClass</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>HelperClass<span class=\"token punctuation\">.</span>ValidateHelloArgument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// example custom validator</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ValidateHelloArgument</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value must be 'hello'.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sample for input field validation</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InputClass2</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Validator</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>ValidateHelloArgument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> Field1 <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ValidateHelloArgument</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value must be 'hello'.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Similar to the <code class=\"language-text\">Parser</code> delegate, the <code class=\"language-text\">Validator</code> delegate is called during the validation stage,\nand will not unnecessarily trigger the unhandled exception handler due to client input errors.</p>\n<p>At this time GraphQL.NET does not directly support the <code class=\"language-text\">MaxLength</code> and similar attributes from\n<code class=\"language-text\">System.ComponentModel.DataAnnotations</code>, but this may be added in a future version. You can\nimplement your own attributes as shown above, or call the <code class=\"language-text\">Validate</code> method to set a validation\nfunction.</p>\n<h3 id=\"6-code-classlanguage-textargumentvalidatorcode-delegate-added-to-input-objectinterface-field-definitions-since-81\" style=\"position:relative;\"><a href=\"#6-code-classlanguage-textargumentvalidatorcode-delegate-added-to-input-objectinterface-field-definitions-since-81\" aria-label=\"6 code classlanguage textargumentvalidatorcode delegate added to input objectinterface field definitions since 81 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. <code class=\"language-text\">ArgumentValidator</code> delegate added to input object/interface field definitions (since 8.1)</h3>\n<p>This allows for custom validation of the coerced argument values. It can be used when you must\nenforce certain relationships between arguments, such as ensuring that at least one of multiple\narguments are provided, or that a specific argument is provided when another argument is set to\na specific value. It can be set by configuring the <code class=\"language-text\">ValidateArguments</code> delegate on the <code class=\"language-text\">FieldType</code>\nclass or calling the <code class=\"language-text\">ValidateArguments</code> method on the field builder. Here is an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Argument</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Argument</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str2\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ValidateArguments</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> str1 <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetArgument</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> str2 <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetArgument</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> str2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ValidationError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Must provide str1 or str2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Please throw a <code class=\"language-text\">ValidationError</code> exception or call <code class=\"language-text\">ctx.ReportError</code> to return a validation error to\nthe client. Throwing <code class=\"language-text\">ExecutionError</code> will prevent further validation rules from being executed,\nand throwing other exceptions will be caught by the unhandled exception handler. This is different\nthan the <code class=\"language-text\">Parser</code> and <code class=\"language-text\">Validator</code> delegates, or scalar coercion methods, which will not trigger the\nunhandled exception handler.</p>\n<p>In version 8.1 and newer, you may use the <code class=\"language-text\">[ValidateArguments]</code> attribute to define a custom argument\nvalidator as shown in the below example:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// sample for argument validation</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OutputClass3</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Hello1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str1<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> str1 <span class=\"token operator\">+</span> str2<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">ValidateArguments</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>ValidateHelloArguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Hello2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str1<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> str1 <span class=\"token operator\">+</span> str2<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">ValueTask</span> <span class=\"token function\">ValidateHelloArguments</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FieldArgumentsValidationContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> str1 <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetArgument</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> str2 <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetArgument</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> str2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            context<span class=\"token punctuation\">.</span><span class=\"token function\">ReportError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Must provide str1 or str2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"7-code-classlanguage-textpatterncode-custom-directive-added-for-validating-input-values-against-a-regular-expression-pattern\" style=\"position:relative;\"><a href=\"#7-code-classlanguage-textpatterncode-custom-directive-added-for-validating-input-values-against-a-regular-expression-pattern\" aria-label=\"7 code classlanguage textpatterncode custom directive added for validating input values against a regular expression pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. <code class=\"language-text\">@pattern</code> custom directive added for validating input values against a regular expression pattern</h3>\n<p>This directive allows for specifying a regular expression pattern to validate the input value.\nIt can also be used as sample code for designing new custom directives, and is now the preferred\ndesign over the older <code class=\"language-text\">InputFieldsAndArgumentsOfCorrectLength</code> validation rule.\nThis directive is not enabled by default, and must be added to the schema as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSchema</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyQuery<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureSchema</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// add the directive to the schema</span>\n        s<span class=\"token punctuation\">.</span>Directives<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PatternMatchingDirective</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// add the visitor to the schema, which will apply validation rules to all field</span>\n        <span class=\"token comment\">// arguments and input fields that have the @pattern directive applied</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterVisitor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PatternMatchingVisitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can then apply the directive to any input field or argument as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>FirstName<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ApplyDirective</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pattern\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"regex\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"[A-Z]+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// uppercase only</span></code></pre></div>\n<h3 id=\"8-directiveattribute-added-to-support-applying-directives-to-type-first-graph-types-and-fields\" style=\"position:relative;\"><a href=\"#8-directiveattribute-added-to-support-applying-directives-to-type-first-graph-types-and-fields\" aria-label=\"8 directiveattribute added to support applying directives to type first graph types and fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. DirectiveAttribute added to support applying directives to type-first graph types and fields</h3>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Query</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Directive</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"pattern\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"regex\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"[A-Z]+\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// uppercase only</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> arg<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> arg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"9-validation-rules-can-read-or-validate-field-arguments-and-directive-arguments\" style=\"position:relative;\"><a href=\"#9-validation-rules-can-read-or-validate-field-arguments-and-directive-arguments\" aria-label=\"9 validation rules can read or validate field arguments and directive arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. Validation rules can read or validate field arguments and directive arguments</h3>\n<p>Validation rules can now execute validation code either before or after field arguments\nhave been read. This is useful for edge cases, such as when a complexity analyzer needs\nto read the value of a field argument to determine the complexity of the field.</p>\n<p>The <code class=\"language-text\">ValidateAsync</code> method on <code class=\"language-text\">IValidationRule</code> has been changed to <code class=\"language-text\">GetPreNodeVisitorAsync</code>,\nand a new method <code class=\"language-text\">GetPostNodeVisitorAsync</code> has been added. Also, the <code class=\"language-text\">IVariableVisitorProvider</code>\ninterface has been combined with <code class=\"language-text\">IValidationRule</code> and now has a new method <code class=\"language-text\">GetVariableVisitorAsync</code>.\nSo the new <code class=\"language-text\">IValidationRule</code> interface looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IValidationRule</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\">ValueTask<span class=\"token punctuation\">&lt;</span>INodeVisitor<span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetPreNodeVisitorAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ValidationContext</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">ValueTask<span class=\"token punctuation\">&lt;</span>IVariableVisitor<span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetVariableVisitorAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ValidationContext</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">ValueTask<span class=\"token punctuation\">&lt;</span>INodeVisitor<span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetPostNodeVisitorAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ValidationContext</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This allows for a single validation rule to validate AST structure, validate variable values,\nand/or validate coerced field and directive arguments.</p>\n<p>To simplify the creation of validation rules, the abstract <code class=\"language-text\">ValidationRuleBase</code> class has\nbeen added, which implements the <code class=\"language-text\">IValidationRule</code> interface and provides default implementations\nfor all three methods.</p>\n<p>Documentation has been added to the <a href=\"https://graphql-dotnet.github.io/docs/getting-started/query-validation/\">Query Validation</a>\nsection of the documentation to explain how to create custom validation rules using the\nrevised <code class=\"language-text\">IValidationRule</code> interface and related classes.</p>\n<h3 id=\"10-list-coercion-can-be-customized\" style=\"position:relative;\"><a href=\"#10-list-coercion-can-be-customized\" aria-label=\"10 list coercion can be customized permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>10. List coercion can be customized</h3>\n<p>Previously only specific list types were natively supported, such as <code class=\"language-text\">List&lt;T></code> and <code class=\"language-text\">IEnumerable&lt;T></code>,\nand list types that implemented <code class=\"language-text\">IList</code>. Now, any list-like type such as <code class=\"language-text\">HashSet&lt;T></code> or <code class=\"language-text\">Queue&lt;T></code>\nwhich has either a public parameterless constructor along with an <code class=\"language-text\">Add(T value)</code> method, or a constructor\nthat takes an <code class=\"language-text\">IEnumerable&lt;T></code> is supported. This allows for more flexibility in the types of lists\nthat can be used as CLR input types.</p>\n<p>You can also register a custom list coercion provider to handle custom list types. For instance, if you\nwish to use a case-insensitive comparer for <code class=\"language-text\">HashSet&lt;string></code> types, you can register a custom list coercion\nprovider as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// register for HashSet&lt;string></span>\nValueConverter<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">RegisterListConverter</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n    values <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> StringComparer<span class=\"token punctuation\">.</span>OrdinalIgnoreCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// also register for ISet&lt;string></span>\nValueConverter<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">RegisterListConverter</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ISet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n    values <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> StringComparer<span class=\"token punctuation\">.</span>OrdinalIgnoreCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">RegisterListProvider</code> method is also useful in AOT scenarios to provide ideal performance since dynamic\ncode generation is not possible, and to prevent trimming of necessary list types.</p>\n<p>You can also register a custom list coercion provider for an open generic type. For instance, if you wish to\nprovide a custom list coercion provider for <code class=\"language-text\">IImmutableList&lt;T></code>, you can register it as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImmutableListConverterFactory</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ListConverterFactoryBase</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">Create</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> list <span class=\"token operator\">=></span> ImmutableList<span class=\"token punctuation\">.</span><span class=\"token function\">CreateRange</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Cast</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nValueConverter<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterListConverterFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">IImmutableList<span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ImmutableListConverterFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Finally, if you simply need to map an interface list type to a concrete list type, you can do so as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">ValueConverter<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterListConverterFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">IList<span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// default mapping is T[]</span></code></pre></div>\n<h3 id=\"11-code-classlanguage-textigraphtypeisprivatecode-and-code-classlanguage-textifieldtypeisprivatecode-properties-added\" style=\"position:relative;\"><a href=\"#11-code-classlanguage-textigraphtypeisprivatecode-and-code-classlanguage-textifieldtypeisprivatecode-properties-added\" aria-label=\"11 code classlanguage textigraphtypeisprivatecode and code classlanguage textifieldtypeisprivatecode properties added permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11. <code class=\"language-text\">IGraphType.IsPrivate</code> and <code class=\"language-text\">IFieldType.IsPrivate</code> properties added</h3>\n<p>Allows to set a graph type or field as private within a schema visitor, effectively removing it from the schema.\nIntrospection queries will not be able to query the type/field, and queries will not be able to reference the type/field.\nExporting the schema as a SDL (or printing it) will not include the private types or fields.</p>\n<p>Private types are fully 'resolved' and validated; you can obtain references to these types or fields in a schema validation\nvisitor before they are removed from the schema. After initialization is complete, these types and fields will not be present\nwithin SchemaTypes or TypeFields. The only exception for validation is that private types are not required have any fields\nor, for interfaces and unions, possible types.</p>\n<p>This makes it possible to create a private type used within the schema but not exposed to the client. For instance,\nit is possible to dynamically create input object types to deserialize GraphQL Federation entity representations, which\nare normally sent via the <code class=\"language-text\">_Any</code> type.</p>\n<h3 id=\"12-code-classlanguage-textiobjectgraphtypeskiptypecheckcode-property-added\" style=\"position:relative;\"><a href=\"#12-code-classlanguage-textiobjectgraphtypeskiptypecheckcode-property-added\" aria-label=\"12 code classlanguage textiobjectgraphtypeskiptypecheckcode property added permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>12. <code class=\"language-text\">IObjectGraphType.SkipTypeCheck</code> property added</h3>\n<p>Allows to skip the type check for a specific object graph type during resolver execution. This is useful\nfor schema-first schemas where the CLR type is not defined while the resolver is built, while allowing\n<code class=\"language-text\">IsTypeOf</code> to be set automatically for other use cases. Schema-first schemas will automatically set this\nproperty to <code class=\"language-text\">true</code> for all object graph types to retain the existing behavior.</p>\n<h3 id=\"13-code-classlanguage-textischemanodevisitorpostvisitschemacode-method-added\" style=\"position:relative;\"><a href=\"#13-code-classlanguage-textischemanodevisitorpostvisitschemacode-method-added\" aria-label=\"13 code classlanguage textischemanodevisitorpostvisitschemacode method added permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>13. <code class=\"language-text\">ISchemaNodeVisitor.PostVisitSchema</code> method added</h3>\n<p>Allows to revisit the schema after all other methods (types/fields/etc) have been visited.</p>\n<h3 id=\"14-graphql-federation-v2-graph-types-added\" style=\"position:relative;\"><a href=\"#14-graphql-federation-v2-graph-types-added\" aria-label=\"14 graphql federation v2 graph types added permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>14. GraphQL Federation v2 graph types added</h3>\n<p>These graph types have been added to the <code class=\"language-text\">GraphQL.Federation.Types</code> namespace:</p>\n<ul>\n<li><code class=\"language-text\">AnyScalarType</code> (moved from <code class=\"language-text\">GraphQL.Utilities.Federation</code>)</li>\n<li><code class=\"language-text\">EntityGraphType</code></li>\n<li><code class=\"language-text\">FieldSetGraphType</code></li>\n<li><code class=\"language-text\">LinkImportGraphType</code></li>\n<li><code class=\"language-text\">LinkPurpose</code> enumeration</li>\n<li><code class=\"language-text\">LinkPurposeGraphType</code></li>\n<li><code class=\"language-text\">ServiceGraphType</code></li>\n</ul>\n<h3 id=\"15-extension-methods-and-attributes-added-to-simplify-applying-graphql-federation-directives-in-code-first-and-type-first-schemas\" style=\"position:relative;\"><a href=\"#15-extension-methods-and-attributes-added-to-simplify-applying-graphql-federation-directives-in-code-first-and-type-first-schemas\" aria-label=\"15 extension methods and attributes added to simplify applying graphql federation directives in code first and type first schemas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>15. Extension methods and attributes added to simplify applying GraphQL Federation directives in code-first and type-first schemas</h3>\n<p>These extension methods and attributes simplify the process of applying GraphQL Federation directives:</p>\n<table>\n<thead>\n<tr>\n<th>Directive</th>\n<th>Extension Method</th>\n<th>Attribute</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">@external</code></td>\n<td><code class=\"language-text\">External()</code></td>\n<td><code class=\"language-text\">[External]</code></td>\n<td>Indicates that this subgraph usually can't resolve a particular object field, but it still needs to define that field for other purposes.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@requires</code></td>\n<td><code class=\"language-text\">Requires(fields)</code></td>\n<td><code class=\"language-text\">[Requires(fields)]</code></td>\n<td>Indicates that the resolver for a particular entity field depends on the values of other entity fields that are resolved by other subgraphs. This tells the router that it needs to fetch the values of those externally defined fields first, even if the original client query didn't request them.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@provides</code></td>\n<td><code class=\"language-text\">Provides(fields)</code></td>\n<td><code class=\"language-text\">[Provides(fields)]</code></td>\n<td>Specifies a set of entity fields that a subgraph can resolve, but only at a particular schema path (at other paths, the subgraph can't resolve those fields).</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@key</code></td>\n<td><code class=\"language-text\">Key(fields)</code></td>\n<td><code class=\"language-text\">[Key(fields)]</code></td>\n<td>Designates an object type as an entity and specifies its key fields. Key fields are a set of fields that a subgraph can use to uniquely identify any instance of the entity.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@override</code></td>\n<td><code class=\"language-text\">Override(from)</code></td>\n<td><code class=\"language-text\">[Override(from)]</code></td>\n<td>Indicates that an object field is now resolved by this subgraph instead of another subgraph where it's also defined. This enables you to migrate a field from one subgraph to another.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@shareable</code></td>\n<td><code class=\"language-text\">Shareable()</code></td>\n<td><code class=\"language-text\">[Shareable]</code></td>\n<td>Indicates that an object type's field is allowed to be resolved by multiple subgraphs (by default in Federation 2, object fields can be resolved by only one subgraph).</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@inaccessible</code></td>\n<td><code class=\"language-text\">Inaccessible()</code></td>\n<td><code class=\"language-text\">[Inaccessible]</code></td>\n<td>Indicates that a definition in the subgraph schema should be omitted from the router's API schema, even if that definition is also present in other subgraphs. This means that the field is not exposed to clients at all.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"16-oneof-input-object-support-added\" style=\"position:relative;\"><a href=\"#16-oneof-input-object-support-added\" aria-label=\"16 oneof input object support added permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>16. OneOf Input Object support added</h3>\n<p>OneOf Input Objects are a special variant of Input Objects where the type system\nasserts that exactly one of the fields must be set and non-null, all others\nbeing omitted. This is useful for representing situations where an input may be\none of many different options.</p>\n<p>See: <a href=\"https://github.com/graphql/graphql-spec/pull/825\">https://github.com/graphql/graphql-spec/pull/825</a></p>\n<p>To use this feature:</p>\n<ul>\n<li><strong>Code-First</strong>: Set the <code class=\"language-text\">IsOneOf</code> property on your <code class=\"language-text\">InputObjectGraphType</code> to <code class=\"language-text\">true</code>.</li>\n<li><strong>Schema-First</strong>: Use the <code class=\"language-text\">@oneOf</code> directive on the input type in your schema definition.</li>\n<li><strong>Type-First</strong>: Use the <code class=\"language-text\">[OneOf]</code> directive on the CLR class.</li>\n</ul>\n<p>Note: the feature is still a draft and has not made it into the official GraphQL spec yet.\nIt is expected to be added once it has been implemented in multiple libraries and proven to be useful.\nIt is not expected to change from the current draft.</p>\n<h3 id=\"17-federation-entity-resolver-configuration-methods-and-attributes-added-for-code-first-and-type-first-schemas\" style=\"position:relative;\"><a href=\"#17-federation-entity-resolver-configuration-methods-and-attributes-added-for-code-first-and-type-first-schemas\" aria-label=\"17 federation entity resolver configuration methods and attributes added for code first and type first schemas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>17. Federation entity resolver configuration methods and attributes added for code-first and type-first schemas</h3>\n<p>Extension methods have been added for defining entity resolvers in code-first and type-first schemas\nfor GraphQL Federation.</p>\n<p>Code-first sample 1: (uses entity type for representation)</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WidgetType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectGraphType<span class=\"token punctuation\">&lt;</span>Widget<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">WidgetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// configure federation key fields</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Key</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// configure federation resolver</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ResolveReference</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> widget<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// pull the id from the representation</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> id <span class=\"token operator\">=</span> widget<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// resolve the entity reference</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> widgetData <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>RequestServices<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WidgetRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> widgetData<span class=\"token punctuation\">.</span><span class=\"token function\">GetWidgetByIdAsync</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>CancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// configure fields</span>\n        <span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">type</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">NonNullGraphType<span class=\"token punctuation\">&lt;</span>IdGraphType<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Widget</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Code-first sample 2: (uses custom type for representation)</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WidgetType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectGraphType<span class=\"token punctuation\">&lt;</span>Widget<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">WidgetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// configure federation key fields</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Key</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// configure federation resolver</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ResolveReference</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WidgetRepresentation<span class=\"token punctuation\">,</span> Widget<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> widget<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// pull the id from the representation</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> id <span class=\"token operator\">=</span> widget<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// resolve the entity reference</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> widgetData <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>RequestServices<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WidgetRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> widgetData<span class=\"token punctuation\">.</span><span class=\"token function\">GetWidgetByIdAsync</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>CancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// configure fields</span>\n        <span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">type</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">NonNullGraphType<span class=\"token punctuation\">&lt;</span>IdGraphType<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Widget</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WidgetRepresentation</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Type-first sample 1: (static method; uses method arguments for representation)</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// configure federation key fields</span>\n<span class=\"token punctuation\">[</span><span class=\"token function\">Key</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Widget</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// configure fields</span>\n    <span class=\"token punctuation\">[</span>Id<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// configure federation resolver</span>\n    <span class=\"token punctuation\">[</span>FederationResolver<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Widget<span class=\"token punctuation\">></span></span> <span class=\"token function\">ResolveReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromServices</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">WidgetRepository</span> widgetData<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Id</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> token<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// resolve the entity reference</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> widgetData<span class=\"token punctuation\">.</span><span class=\"token function\">GetWidgetByIdAsync</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Type-first sample 2: (instance method; uses instance for representation)</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// configure federation key fields</span>\n<span class=\"token punctuation\">[</span><span class=\"token function\">Key</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Widget</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// configure fields</span>\n    <span class=\"token punctuation\">[</span>Id<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// configure federation resolver</span>\n    <span class=\"token punctuation\">[</span>FederationResolver<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Widget<span class=\"token punctuation\">></span></span> <span class=\"token function\">ResolveReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromServices</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">WidgetRepository</span> widgetData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> token<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// pull the id from the representation</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> id <span class=\"token operator\">=</span> Id<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// resolve the entity reference</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> widgetData<span class=\"token punctuation\">.</span><span class=\"token function\">GetWidgetByIdAsync</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that you may apply the <code class=\"language-text\">[Key]</code> attribute multiple times to define multiple sets of key fields, pursuant to the\nGraphQL Federation specification. You may define multiple resolvers when using static methods in a type-first schema.\nOtherwise your method will need to decide which set of key fields to use for resolution, as demonstrated in the\ncode-first sample below:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WidgetType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectGraphType<span class=\"token punctuation\">&lt;</span>Widget<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">WidgetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// configure federation key fields</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Key</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Key</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sku\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// configure federation resolver</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ResolveReference</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> widget<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// pull the key values from the representation</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> id <span class=\"token operator\">=</span> widget<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sku <span class=\"token operator\">=</span> widget<span class=\"token punctuation\">.</span>Sku<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// resolve the entity reference</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> widgetData <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>RequestServices<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WidgetRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> widgetData<span class=\"token punctuation\">.</span><span class=\"token function\">GetWidgetByIdAsync</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>CancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> widgetData<span class=\"token punctuation\">.</span><span class=\"token function\">GetWidgetBySkuAsync</span><span class=\"token punctuation\">(</span>sku<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>CancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// configure fields</span>\n        <span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">type</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">NonNullGraphType<span class=\"token punctuation\">&lt;</span>IdGraphType<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Sku<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Widget</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Sku <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"18-applied-directives-may-contain-metadata\" style=\"position:relative;\"><a href=\"#18-applied-directives-may-contain-metadata\" aria-label=\"18 applied directives may contain metadata permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>18. Applied directives may contain metadata</h3>\n<p><code class=\"language-text\">AppliedDirective</code> now implements <code class=\"language-text\">IProvideMetadata</code>, <code class=\"language-text\">IMetadataReader</code> and <code class=\"language-text\">IMetadataWriter</code>\nto allow for reading and writing metadata to applied directives.</p>\n<h3 id=\"19-support-added-for-the-apollo-code-classlanguage-textlinkcode-directive\" style=\"position:relative;\"><a href=\"#19-support-added-for-the-apollo-code-classlanguage-textlinkcode-directive\" aria-label=\"19 support added for the apollo code classlanguage textlinkcode directive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>19. Support added for the Apollo <code class=\"language-text\">@link</code> directive</h3>\n<p>This directive indicates that some types and/or directives are to be imported from another schema.\nTypes and directives can be explicitly imported, either with their original name or with an alias.\nAny types or directives that are not explicitly imported will be assumed to be named with a specified\nnamespace, which is derived from the URL of the linked schema if not set explicitly.\nVisit <a href=\"https://specs.apollo.dev/link/v1.0/\">https://specs.apollo.dev/link/v1.0/</a> for more information.</p>\n<p>To link another schema, use code like this in your schema constructor or <code class=\"language-text\">ConfigureSchema</code> call:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">schema<span class=\"token punctuation\">.</span><span class=\"token function\">LinkSchema</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://specs.apollo.dev/federation/v2.3\"</span><span class=\"token punctuation\">,</span> o <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// override the default namespace of 'federation' with the alias 'fed'</span>\n    o<span class=\"token punctuation\">.</span>Namespace <span class=\"token operator\">=</span> <span class=\"token string\">\"fed\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// import the '@key' directive without an alias</span>\n    o<span class=\"token punctuation\">.</span>Imports<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"@key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// import the '@shareable' directive with an alias of '@share'</span>\n    o<span class=\"token punctuation\">.</span>Imports<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@shareable\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"@share\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// other directives such as '@requires' would be implicitly imported</span>\n    <span class=\"token comment\">// into the 'fed' namespace, so '@requires' becomes '@fed__requires'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In addition to applying a <code class=\"language-text\">@link</code> directive to the schema, it will also import the <code class=\"language-text\">@link</code> directive\nand configure the necessary types and directives to support the <code class=\"language-text\">@link</code> specification.\nYour schema will then look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">schema</span>\n  <span class=\"token directive function\">@link</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">url</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://specs.apollo.dev/link/v1.0\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">import</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@link\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token directive function\">@link</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">url</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://specs.apollo.dev/federation/v2.3\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">as</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"fed\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">import</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@key\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"@shareable\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">as</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"@share\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\"># etc</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">directive</span> <span class=\"token directive function\">@link</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">url</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">as</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">import</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token property\">link__Import</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">purpose</span><span class=\"token punctuation\">:</span> <span class=\"token property\">link__Purpose</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">repeatable</span> <span class=\"token keyword\">on</span> <span class=\"token constant\">SCHEMA</span>\n\n<span class=\"token keyword\">scalar</span> <span class=\"token property\">link__Import</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token object\">link__Purpose</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">EXECUTION</span>\n  <span class=\"token constant\">SECURITY</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You will still be required to add the imported schema definitions to your schema, such as <code class=\"language-text\">@key</code>, <code class=\"language-text\">@share</code>, and\n<code class=\"language-text\">@fed__requires</code> in the above example. You may also print the schema without imported definitions. To print the\nschema without imported definitions, set the <code class=\"language-text\">IncludeImportedDefinitions</code> option to <code class=\"language-text\">false</code> when printing:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sdl <span class=\"token operator\">=</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> IncludeImportedDefinitions <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The schema shown above would now print like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">schema</span>\n  <span class=\"token directive function\">@link</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">url</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://specs.apollo.dev/link/v1.0\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">import</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@link\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token directive function\">@link</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">url</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://specs.apollo.dev/federation/v2.3\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">as</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"fed\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">import</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@key\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"@shareable\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">as</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"@share\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\"># etc</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that you may call <code class=\"language-text\">LinkSchema</code> multiple times with the same URL to apply additional configuration\noptions to the same url, or with a separate URL to link multiple schemas.</p>\n<h3 id=\"20-code-classlanguage-textfromschemaurlcode-added-to-code-classlanguage-textapplieddirectivecode\" style=\"position:relative;\"><a href=\"#20-code-classlanguage-textfromschemaurlcode-added-to-code-classlanguage-textapplieddirectivecode\" aria-label=\"20 code classlanguage textfromschemaurlcode added to code classlanguage textapplieddirectivecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>20. <code class=\"language-text\">FromSchemaUrl</code> added to <code class=\"language-text\">AppliedDirective</code></h3>\n<p>This property supports using a directive that was separately imported via <code class=\"language-text\">@link</code>. After importing the schema as described\nabove, apply imported directives to your schema similar to the example below:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">graphType<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyDirective</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shareable\"</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span>FromSchemaUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"https://specs.apollo.dev/federation/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// applies to any version</span>\n<span class=\"token comment\">// or</span>\ngraphType<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyDirective</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shareable\"</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span>FromSchemaUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"https://specs.apollo.dev/federation/v2.3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// only version 2.3</span></code></pre></div>\n<p>During schema initialization, the name of the applied directive will be resolved to the fully-qualified name.\nIn the above example, if <code class=\"language-text\">@shareable</code> was imported, the directive will be applied as <code class=\"language-text\">@shareable</code>, but if not, it will\nbe applied as <code class=\"language-text\">@federation__shareable</code>. Aliases are also supported.</p>\n<h3 id=\"21-code-classlanguage-textaddfederationcode-graphql-builder-call-added-to-initialize-any-schema-for-federation-support\" style=\"position:relative;\"><a href=\"#21-code-classlanguage-textaddfederationcode-graphql-builder-call-added-to-initialize-any-schema-for-federation-support\" aria-label=\"21 code classlanguage textaddfederationcode graphql builder call added to initialize any schema for federation support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>21. <code class=\"language-text\">AddFederation</code> GraphQL builder call added to initialize any schema for federation support</h3>\n<p>This method will automatically add the necessary types and directives to support GraphQL Federation.\nSimply call <code class=\"language-text\">AddFederation</code> with the version number of the Federation specification that you wish to import\nwithin your DI configuration. See example below:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSchema</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MySchema<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddFederation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2.3\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This will do the following:</p>\n<ul>\n<li>Configure the Query type to include the <code class=\"language-text\">_service</code> field.</li>\n<li>Configure the <code class=\"language-text\">_Entity</code> type based on which of the schema's type definitions are marked with <code class=\"language-text\">@key</code>.</li>\n<li>Configure the Query type to include the <code class=\"language-text\">_entities</code> field if there are any resolvable entities.</li>\n<li>Link the schema to the Federation specification at <code class=\"language-text\">https://specs.apollo.dev/federation/v2.3</code>.</li>\n<li>Import the <code class=\"language-text\">@key</code>, <code class=\"language-text\">@requires</code>, <code class=\"language-text\">@provides</code>, <code class=\"language-text\">@external</code>, <code class=\"language-text\">@extends</code>, <code class=\"language-text\">@shareable</code>, <code class=\"language-text\">@inaccessible</code>, <code class=\"language-text\">@override</code> and <code class=\"language-text\">@tag</code> directives.</li>\n<li>Configure the remaining supported directives within the <code class=\"language-text\">federation</code> namespace - <code class=\"language-text\">@federation__interfaceObject</code> and <code class=\"language-text\">@federation__composeDirective</code>\nfor version 2.3.</li>\n</ul>\n<p>Currently supported are versions 1.0 through 2.8. Note that for version 1.0, you will be required to mark\nparts of your schema with <code class=\"language-text\">@extends</code>. This is not required for version 2.0 and later.</p>\n<p>You may add additional configuration to the <code class=\"language-text\">AddFederation</code> call to import additional directives or types, remove imports,\nchange import aliases, or change the namespace used for directives that are not explicitly imported.</p>\n<h3 id=\"22-infer-field-nullability-from-nrt-annotations-is-enabled-by-default\" style=\"position:relative;\"><a href=\"#22-infer-field-nullability-from-nrt-annotations-is-enabled-by-default\" aria-label=\"22 infer field nullability from nrt annotations is enabled by default permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>22. Infer field nullability from NRT annotations is enabled by default</h3>\n<p>When defining the field with expression, the graph type nullability will be inferred from\nNull Reference Types (NRT) by default. To disable the feature, set the\n<code class=\"language-text\">GlobalSwitches.InferFieldNullabilityFromNRTAnnotations</code> to <code class=\"language-text\">false</code>.</p>\n<p>For example, given the following code</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">public class Person\n{\n    public string FullName { get; set; }\n    public string? SpouseName { get; set; }\n    public IList&lt;string&gt;? Children { get; set; }\n}\n\npublic class PersonGraphType : ObjectGraphType&lt;Person&gt;\n{\n    public PersonGraphType()\n    {\n        Field(p =&gt; p.FullName);\n        Field(p =&gt; p.SpouseName);\n        Field(p =&gt; p.Children);\n    }\n}</code></pre></div>\n<p>When <code class=\"language-text\">InferFieldNullabilityFromNRTAnnotations</code> is <code class=\"language-text\">true</code> (default), the result is:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">fullName</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">spouseName</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">children</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When <code class=\"language-text\">InferFieldNullabilityFromNRTAnnotations</code> is <code class=\"language-text\">false</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">fullName</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">spouseName</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">children</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token scalar\">String</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"23-code-classlanguage-textvalidationcontextgetrecursivelyreferencedfragmentscode-updated-with-code-classlanguage-textskipcode-and-code-classlanguage-textincludecode-directive-support\" style=\"position:relative;\"><a href=\"#23-code-classlanguage-textvalidationcontextgetrecursivelyreferencedfragmentscode-updated-with-code-classlanguage-textskipcode-and-code-classlanguage-textincludecode-directive-support\" aria-label=\"23 code classlanguage textvalidationcontextgetrecursivelyreferencedfragmentscode updated with code classlanguage textskipcode and code classlanguage textincludecode directive support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>23. <code class=\"language-text\">ValidationContext.GetRecursivelyReferencedFragments</code> updated with <code class=\"language-text\">@skip</code> and <code class=\"language-text\">@include</code> directive support</h3>\n<p>When developing a custom validation rule, such as an authorization rule, you may need to determine which fragments are\nrecursively referenced by an operation by calling <code class=\"language-text\">GetRecursivelyReferencedFragments</code> with the <code class=\"language-text\">onlyUsed</code> argument\nset to <code class=\"language-text\">true</code>. The method will then ignore fragments that are conditionally skipped by the <code class=\"language-text\">@skip</code> or <code class=\"language-text\">@include</code>\ndirectives.</p>\n<h3 id=\"24-persisted-document-support\" style=\"position:relative;\"><a href=\"#24-persisted-document-support\" aria-label=\"24 persisted document support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>24. Persisted Document support</h3>\n<p>GraphQL.NET now supports persisted documents based on the draft spec <a href=\"https://github.com/graphql/graphql-over-http/pull/264\">listed here</a>.\nPersisted documents are a way to store a query string on the server and reference it by a unique identifier, typically\na SHA-256 hash. When enabled, the default configuration disables use of the <code class=\"language-text\">query</code> field in the request body and\nrequires the client to use the <code class=\"language-text\">documentId</code> field instead. This acts as a whitelist of allowed queries and mutations\nthat the client may execute, while also reducing the size of the request body.</p>\n<p>To configure persisted document support, you must implement the <code class=\"language-text\">IPersistedDocumentLoader</code> interface to retrieve the\nquery string based on the document identifier, or set the <code class=\"language-text\">GetQueryDelegate</code> property on the <code class=\"language-text\">PersistedDocumentOptions</code>\nclass. See typical examples below:</p>\n<h4 id=\"example-1---using-a-service-to-retrieve-persisted-documents\" style=\"position:relative;\"><a href=\"#example-1---using-a-service-to-retrieve-persisted-documents\" aria-label=\"example 1   using a service to retrieve persisted documents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example 1 - Using a service to retrieve persisted documents</h4>\n<p>In the below example, regular requests (via the query property) are disabled, and only document identifiers\nprefixed with <code class=\"language-text\">sha256:</code> are allowed where the id is a 64-character lowercase hexadecimal string.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// configure the execution to utilize persisted documents</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n    <span class=\"token comment\">// use default configuration, which disables the 'query' field and only allows SHA-256 hashes</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UsePeristedDocuments</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyLoader<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>GraphQL<span class=\"token punctuation\">.</span>DI<span class=\"token punctuation\">.</span>ServiceLifetime<span class=\"token punctuation\">.</span>Scoped<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// configure a service to retrieve persisted documents based on their hash</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyLoader</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IPersistedDocumentLoader</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// pull in dependencies via DI as needed</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">ValueTask<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetQueryAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> documentIdPrefix<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> documentIdPayload<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> _db<span class=\"token punctuation\">.</span>QueryDocuments\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Hash <span class=\"token operator\">==</span> documentIdPayload<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Query<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefaultAsync</span><span class=\"token punctuation\">(</span>cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sample request:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"documentId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sha256:0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"variables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"example-2---configuring-persisted-documents-with-the-options-class\" style=\"position:relative;\"><a href=\"#example-2---configuring-persisted-documents-with-the-options-class\" aria-label=\"example 2   configuring persisted documents with the options class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example 2 - Configuring persisted documents with the options class</h4>\n<p>In the below example, regular requests are allowed, and document identifiers are unprefixed GUIDs.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// configure the execution to utilize persisted documents</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n    <span class=\"token punctuation\">.</span><span class=\"token function\">UsePeristedDocuments</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// enable regular queries also</span>\n        options<span class=\"token punctuation\">.</span>AllowNonpersistedDocuments <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// use custom document identifiers and disable sha256 prefixed identifiers</span>\n        options<span class=\"token punctuation\">.</span>AllowedPrefixes<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        options<span class=\"token punctuation\">.</span>AllowedPrefixes<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// unprefixed document identifiers</span>\n        <span class=\"token comment\">// configure the service to retrieve persisted documents</span>\n        options<span class=\"token punctuation\">.</span>GetQueryDelegate <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>executionOptions<span class=\"token punctuation\">,</span> documentIdPrefix<span class=\"token punctuation\">,</span> documentIdPayload<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Guid<span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span>documentIdPayload<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> db <span class=\"token operator\">=</span> executionOptions<span class=\"token punctuation\">.</span>RequestServices<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyDbContext<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span>QueryDocuments\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Query<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefaultAsync</span><span class=\"token punctuation\">(</span>executionOptions<span class=\"token punctuation\">.</span>CancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sample persisted document request:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"documentId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"01234567-89ab-cdef-0123-456789abcdef\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"variables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"24-execution-timeout-support\" style=\"position:relative;\"><a href=\"#24-execution-timeout-support\" aria-label=\"24 execution timeout support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>24. Execution timeout support</h3>\n<p><code class=\"language-text\">ExecutionOptions.Timeout</code> has been added to allow a maximum time for the execution of a query. If the execution\nexceeds the timeout, the execution will be cancelled and a timeout error will be returned to the client. The default\nvalue is <code class=\"language-text\">Timeout.InfiniteTimeSpan</code>, which means no timeout is set. The timeout error is not an 'unhandled' exception\nand so is not passed through the <code class=\"language-text\">UnhandledExceptionDelegate</code>.</p>\n<p>Configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// via the GraphQL builder</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or via the options</span>\noptions<span class=\"token punctuation\">.</span>Timeout <span class=\"token operator\">=</span> TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Example response:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"errors\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The operation has timed out.\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"TIMEOUT\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"codes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"TIMEOUT\"</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that the timeout triggers immediate cancellation throughout the execution pipeline, including\nresolvers and middleware. This means that any pending response data will be discarded as the client\nwould otherwise receive an incomplete response.</p>\n<p>You may alternatively configure the timeout to throw a <code class=\"language-text\">TimeoutException</code> to the caller. Set the\n<code class=\"language-text\">TimeoutAction</code> property as shown here:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// via the GraphQL builder</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TimeoutAction<span class=\"token punctuation\">.</span>ThrowTimeoutException<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or via the options</span>\noptions<span class=\"token punctuation\">.</span>Timeout <span class=\"token operator\">=</span> TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noptions<span class=\"token punctuation\">.</span>TimeoutAction <span class=\"token operator\">=</span> TimeoutAction<span class=\"token punctuation\">.</span>ThrowTimeoutException<span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you wish to catch and handle timeout errors, use the delegate overload as demonstrated below:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// log the timeout error</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> logger <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>RequestServices<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ILogger<span class=\"token punctuation\">&lt;</span>MySchema<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The operation has timed out.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// return a custom error</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ExecutionResult</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TimeoutError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Please note that signaling the cancellation token passed to <code class=\"language-text\">ExecutionOptions.CancellationToken</code> will always\nrethrow the <code class=\"language-text\">OperationCanceledException</code> to the caller, regardless of the <code class=\"language-text\">TimeoutAction</code> setting.</p>\n<h3 id=\"25-the-complexity-analyzer-has-been-rewritten-to-support-more-complex-scenarios\" style=\"position:relative;\"><a href=\"#25-the-complexity-analyzer-has-been-rewritten-to-support-more-complex-scenarios\" aria-label=\"25 the complexity analyzer has been rewritten to support more complex scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>25. The complexity analyzer has been rewritten to support more complex scenarios</h3>\n<p>Please review the documentation for the new complexity analyzer to understand how to use it and how to configure it.\nSee the <a href=\"../../guides/complexity-analyzer\">Complexity Analzyer</a> document for more information.</p>\n<h3 id=\"26-optimization-when-returning-lists-of-scalars\" style=\"position:relative;\"><a href=\"#26-optimization-when-returning-lists-of-scalars\" aria-label=\"26 optimization when returning lists of scalars permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>26. Optimization when returning lists of scalars</h3>\n<p>When returning a list of scalars, specifically of intrinsic types such as <code class=\"language-text\">int</code>, <code class=\"language-text\">string</code>, and <code class=\"language-text\">bool</code>, the matching\nscalar type (e.g. <code class=\"language-text\">IntGraphType</code>, <code class=\"language-text\">StringGraphType</code>, <code class=\"language-text\">BooleanGraphType</code>) will be used to serialize the list as a whole\nrather than each individual item. This can result in a significant performance improvement when returning large lists\nof scalars. Be sure the returned list type (e.g. <code class=\"language-text\">IEnumerable&lt;int></code>) matches the scalar type (e.g. <code class=\"language-text\">IntGraphType</code>)\nto take advantage of this optimization. Scalar types that require conversion, such as <code class=\"language-text\">DateTimeGraphType</code> are not\ncurrently optimized in this way.</p>\n<h3 id=\"27-graphql-interfaces-may-implement-other-interfaces\" style=\"position:relative;\"><a href=\"#27-graphql-interfaces-may-implement-other-interfaces\" aria-label=\"27 graphql interfaces may implement other interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>27. GraphQL interfaces may implement other interfaces</h3>\n<p>Pursuant to the current GraphQL specification, interfaces may implement other interfaces. Add implemented interfaces\nto your interface type definition as done for object graph types, as shown below:</p>\n<p>Schema-first:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Character</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Code-first:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NodeGraphType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">InterfaceGraphType</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">NodeGraphType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>NonNullGraphType<span class=\"token punctuation\">&lt;</span>IdGraphType<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CharacterGraphType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">InterfaceGraphType</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CharacterGraphType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>NonNullGraphType<span class=\"token punctuation\">&lt;</span>IdGraphType<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>NonNullGraphType<span class=\"token punctuation\">&lt;</span>StringGraphType<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token generic-method\"><span class=\"token function\">Interface</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>NodeGraphType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Type-first:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Node</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Implements</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Character</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Node</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"28-code-classlanguage-textiresolvefieldcontextexecutioncontextcode-property-added\" style=\"position:relative;\"><a href=\"#28-code-classlanguage-textiresolvefieldcontextexecutioncontextcode-property-added\" aria-label=\"28 code classlanguage textiresolvefieldcontextexecutioncontextcode property added permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>28. <code class=\"language-text\">IResolveFieldContext.ExecutionContext</code> property added</h3>\n<p>The <code class=\"language-text\">ExecutionContext</code> property has been added to the <code class=\"language-text\">IResolveFieldContext</code> interface to allow access to the\nunderlying execution context. This is useful for accessing the parsed arguments and directives from the operation\nvia <code class=\"language-text\">IExecutionContext.GetArguments</code> and <code class=\"language-text\">GetDirectives</code>.</p>\n<h2 id=\"breaking-changes\" style=\"position:relative;\"><a href=\"#breaking-changes\" aria-label=\"breaking changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Breaking Changes</h2>\n<h3 id=\"1-query-type-is-required\" style=\"position:relative;\"><a href=\"#1-query-type-is-required\" aria-label=\"1 query type is required permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Query type is required</h3>\n<p>Pursuant to the GraphQL specification, a query type is required for any schema.\nThis is enforced during schema validation but may be bypassed as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">GlobalSwitches<span class=\"token punctuation\">.</span>RequireRootQueryType <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Future versions of GraphQL.NET will not contain this property and each schema will always be required to have a root Query type to comply with the GraphQL specification.</p>\n<h3 id=\"2-use-code-classlanguage-textapplydirectivecode-instead-of-code-classlanguage-textdirectivecode-on-field-builders\" style=\"position:relative;\"><a href=\"#2-use-code-classlanguage-textapplydirectivecode-instead-of-code-classlanguage-textdirectivecode-on-field-builders\" aria-label=\"2 use code classlanguage textapplydirectivecode instead of code classlanguage textdirectivecode on field builders permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Use <code class=\"language-text\">ApplyDirective</code> instead of <code class=\"language-text\">Directive</code> on field builders</h3>\n<p>The <code class=\"language-text\">Directive</code> method on field builders has been renamed to <code class=\"language-text\">ApplyDirective</code> to better fit with\nother field builder extension methods.</p>\n<h3 id=\"3-use-code-classlanguage-textwithcomplexityimpactcode-instead-of-code-classlanguage-textcomplexityimpactcode-on-field-builders\" style=\"position:relative;\"><a href=\"#3-use-code-classlanguage-textwithcomplexityimpactcode-instead-of-code-classlanguage-textcomplexityimpactcode-on-field-builders\" aria-label=\"3 use code classlanguage textwithcomplexityimpactcode instead of code classlanguage textcomplexityimpactcode on field builders permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Use <code class=\"language-text\">WithComplexityImpact</code> instead of <code class=\"language-text\">ComplexityImpact</code> on field builders</h3>\n<p>The <code class=\"language-text\">ComplexityImpact</code> method on field builders has been renamed to <code class=\"language-text\">WithComplexityImpact</code> to better fit with\nother field builder extension methods.</p>\n<h3 id=\"4-relay-types-must-be-registered-within-the-di-provider\" style=\"position:relative;\"><a href=\"#4-relay-types-must-be-registered-within-the-di-provider\" aria-label=\"4 relay types must be registered within the di provider permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Relay types must be registered within the DI provider</h3>\n<p>Previuosly the Relay graph types were instantiated directly by the <code class=\"language-text\">SchemaTypes</code> class. This has been changed so that\nthe types are now pulled from the DI container. No changes are required if you are using the provided DI builder methods,\nas they automatically register the relay types. Otherwise, you will need to manually register the Relay graph types.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// v7 and prior -- builder methods -- NO CHANGES REQUIRED</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  b<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSchema</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StarWarsSchema<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// v7 and prior -- manual registration</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StarWarsSchema<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// and other types</span>\n\n<span class=\"token comment\">// v8</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>PageInfoType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">EdgeType<span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">ConnectionType<span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">ConnectionType<span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"5-duplicate-graphql-configuration-calls-with-the-same-code-classlanguage-textusecode-command-is-ignored\" style=\"position:relative;\"><a href=\"#5-duplicate-graphql-configuration-calls-with-the-same-code-classlanguage-textusecode-command-is-ignored\" aria-label=\"5 duplicate graphql configuration calls with the same code classlanguage textusecode command is ignored permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Duplicate GraphQL configuration calls with the same <code class=\"language-text\">Use</code> command is ignored</h3>\n<p>Specifically, this relates to the following methods:</p>\n<ul>\n<li><code class=\"language-text\">UseMemoryCache()</code></li>\n<li><code class=\"language-text\">UseAutomaticPersistedQueries()</code></li>\n<li><code class=\"language-text\">UseConfiguration&lt;T>()</code> with the same <code class=\"language-text\">T</code> type</li>\n</ul>\n<p>This change was made to prevent duplicate registrations of the same service within the DI container.</p>\n<h3 id=\"6-code-classlanguage-textobjectextensionstoobjectcode-changes-impacts-code-classlanguage-textinputobjectgraphtypecode\" style=\"position:relative;\"><a href=\"#6-code-classlanguage-textobjectextensionstoobjectcode-changes-impacts-code-classlanguage-textinputobjectgraphtypecode\" aria-label=\"6 code classlanguage textobjectextensionstoobjectcode changes impacts code classlanguage textinputobjectgraphtypecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. <code class=\"language-text\">ObjectExtensions.ToObject</code> changes (impacts <code class=\"language-text\">InputObjectGraphType</code>)</h3>\n<ul>\n<li><code class=\"language-text\">ObjectExtensions.ToObject&lt;T></code> was removed; it was only used by internal tests.</li>\n<li><code class=\"language-text\">ObjectExtensions.ToObject</code> requires input object graph type for conversion.</li>\n<li>Only public constructors are eligible candidates while selecting a constructor.</li>\n<li>Constructor is selected based on the following rules:\n<ul>\n<li>If only a single public constructor is available, it is used.</li>\n<li>If a public constructor is marked with <code class=\"language-text\">[GraphQLConstructor]</code>, it is used.</li>\n<li>Otherwise the public parameterless constructor is used if available.</li>\n<li>Otherwise an exception is thrown during deserialization.</li>\n</ul>\n</li>\n<li>Only public properties are eligible candidates when matching a property.</li>\n<li>Any init-only or required properties not provided in the dictionary are set to their default values.</li>\n<li>Only public writable fields are eligible candidates when matching a field.</li>\n</ul>\n<p>The changes above allow for matching behavior with source-generated or dynamically-compiled functions.</p>\n<h3 id=\"7-code-classlanguage-textautoregisteringinputobjectgraphtypecode-changes\" style=\"position:relative;\"><a href=\"#7-code-classlanguage-textautoregisteringinputobjectgraphtypecode-changes\" aria-label=\"7 code classlanguage textautoregisteringinputobjectgraphtypecode changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. <code class=\"language-text\">AutoRegisteringInputObjectGraphType</code> changes</h3>\n<ul>\n<li>See above changes to <code class=\"language-text\">ObjectExtensions.ToObject</code> for deserialization notes.</li>\n<li>Registers read-only properties when the property name matches the name of a parameter in the\nchosen constructor. Comparison is case-insensitive, matching <code class=\"language-text\">ToObject</code> behavior.\nDoes not register constructor parameters that are not read-only properties.\nAny attributes such as <code class=\"language-text\">[Id]</code> must be applied to the property, not the constructor parameter.</li>\n</ul>\n<h3 id=\"8-default-naming-of-generic-graph-types-has-changed\" style=\"position:relative;\"><a href=\"#8-default-naming-of-generic-graph-types-has-changed\" aria-label=\"8 default naming of generic graph types has changed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. Default naming of generic graph types has changed</h3>\n<p>The default graph name of generic types has changed to include the generic type name.\nThis should reduce naming conflicts when generics are in use. To consolidate behavior\nacross different code paths, both <code class=\"language-text\">Type</code> and <code class=\"language-text\">GraphType</code> are stripped from the end\nof the class name. See below examples:</p>\n<table>\n<thead>\n<tr>\n<th>Graph type class name</th>\n<th>Old graph type name</th>\n<th>New graph type name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">PersonType</code></td>\n<td><code class=\"language-text\">PersonType</code></td>\n<td><code class=\"language-text\">Person</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">PersonGraphType</code></td>\n<td><code class=\"language-text\">Person</code></td>\n<td><code class=\"language-text\">Person</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">AutoRegisteringObjectGraphType&lt;SearchResults&lt;Person>></code></td>\n<td><code class=\"language-text\">SearchResults</code></td>\n<td><code class=\"language-text\">PersonSearchResults</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">LoggerGraphType&lt;Person, string></code></td>\n<td><code class=\"language-text\">Logger</code></td>\n<td><code class=\"language-text\">PersonStringLogger</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">InputObjectGraphType&lt;Person></code></td>\n<td><code class=\"language-text\">InputObject_1</code></td>\n<td><code class=\"language-text\">PersonInputObject</code></td>\n</tr>\n</tbody>\n</table>\n<p>To revert to the prior behavior, set the following global switch prior to creating your schema classes:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">GraphQL</span><span class=\"token punctuation\">;</span>\n\nGlobalSwitches<span class=\"token punctuation\">.</span>UseLegacyTypeNaming <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As usual, you are encouraged to set the name in the constructor of your class, or\nimmediately after construction, or for auto-registering types, via an attribute.\nYou can also set global attributes that will be applied to all auto-registering types\nif you wish to define your own naming logic.</p>\n<p>The <code class=\"language-text\">UseLegacyTypeNaming</code> option is deprecated and will be removed in GraphQL.NET v9.</p>\n<h3 id=\"9-dataloader-extension-methods-have-been-moved-to-the-graphql-namespace\" style=\"position:relative;\"><a href=\"#9-dataloader-extension-methods-have-been-moved-to-the-graphql-namespace\" aria-label=\"9 dataloader extension methods have been moved to the graphql namespace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. DataLoader extension methods have been moved to the GraphQL namespace</h3>\n<p>This change simplifies using extension methods for the data loaders. You may need to\nremove the <code class=\"language-text\">using GraphQL.DataLoader;</code> statement from your code to resolve any\ncompiler warnings, and/or add <code class=\"language-text\">using GraphQL;</code>.</p>\n<h3 id=\"10-the-schemaprinter-has-been-deprecated\" style=\"position:relative;\"><a href=\"#10-the-schemaprinter-has-been-deprecated\" aria-label=\"10 the schemaprinter has been deprecated permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>10. The SchemaPrinter has been deprecated</h3>\n<p>Please see the v7 migration document regarding the new <code class=\"language-text\">schema.ToAST()</code> and\n<code class=\"language-text\">schema.Print()</code> methods available for printing the schema (available since 7.6).</p>\n<p>For federated schemas, the <code class=\"language-text\">ServiceGraphType</code>'s <code class=\"language-text\">sdl</code> field will now use the\nnew implementation to print the schema. Please raise an issue if this causes\na problem for your federated schema.</p>\n<h3 id=\"11-removed-deprecated-methods\" style=\"position:relative;\"><a href=\"#11-removed-deprecated-methods\" aria-label=\"11 removed deprecated methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11. Removed deprecated methods.</h3>\n<p>The following GraphQL DI builder methods have been removed:</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Replacement</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">AddApolloTracing</code></td>\n<td><code class=\"language-text\">UseApolloTracing</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">AddMiddleware</code></td>\n<td><code class=\"language-text\">UseMiddleware</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">AddAutomaticPersistedQueries</code></td>\n<td><code class=\"language-text\">UseAutomaticPersistedQueries</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">AddMemoryCache</code></td>\n<td><code class=\"language-text\">UseMemoryCache</code></td>\n</tr>\n</tbody>\n</table>\n<p>The following methods have been removed:</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">TypeExtensions.IsConcrete</code></td>\n<td>Use <code class=\"language-text\">!type.IsAbstract</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GraphQLTelemetryProvider.StartActivityAsync</code></td>\n<td>Use <code class=\"language-text\">StartActivity</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">AutoRegisteringInterfaceGraphType.BuildMemberInstanceExpression</code></td>\n<td>Interfaces cannot contain resolvers so this method was unused</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ValidationContext.GetVariableValuesAsync</code></td>\n<td>Use <code class=\"language-text\">GetVariablesValuesAsync</code></td>\n</tr>\n</tbody>\n</table>\n<p>The following constructors have been removed:</p>\n<table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">Variable</code></td>\n<td>Use new constructor with <code class=\"language-text\">definition</code> argument</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">VariableUsage</code></td>\n<td>Use new constructor with <code class=\"language-text\">hasDefault</code> argument</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"12-code-classlanguage-textivariablevisitorprovidercode-removed-and-code-classlanguage-textivalidationrulecode-changed\" style=\"position:relative;\"><a href=\"#12-code-classlanguage-textivariablevisitorprovidercode-removed-and-code-classlanguage-textivalidationrulecode-changed\" aria-label=\"12 code classlanguage textivariablevisitorprovidercode removed and code classlanguage textivalidationrulecode changed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>12. <code class=\"language-text\">IVariableVisitorProvider</code> removed and <code class=\"language-text\">IValidationRule</code> changed</h3>\n<p>The <code class=\"language-text\">ValidateAsync</code> method on <code class=\"language-text\">IValidationRule</code> has been changed to <code class=\"language-text\">GetPreNodeVisitorAsync</code>,\nand a new method <code class=\"language-text\">GetPostNodeVisitorAsync</code> has been added. Also, the <code class=\"language-text\">IVariableVisitorProvider</code>\ninterface has been combined with <code class=\"language-text\">IValidationRule</code> and now has a new method <code class=\"language-text\">GetVariableVisitorAsync</code>.\nSo the new <code class=\"language-text\">IValidationRule</code> interface looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IValidationRule</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\">ValueTask<span class=\"token punctuation\">&lt;</span>INodeVisitor<span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetPreNodeVisitorAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ValidationContext</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">ValueTask<span class=\"token punctuation\">&lt;</span>IVariableVisitor<span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetVariableVisitorAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ValidationContext</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">ValueTask<span class=\"token punctuation\">&lt;</span>INodeVisitor<span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetPostNodeVisitorAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ValidationContext</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is recommended to inherit from <code class=\"language-text\">ValidationRuleBase</code> for custom validation rules\nand override only the methods you need to implement.</p>\n<h3 id=\"13-new-properties-added-to-code-classlanguage-textigraphtypecode-code-classlanguage-textifieldtypecode-and-code-classlanguage-textiobjectgraphtypecode\" style=\"position:relative;\"><a href=\"#13-new-properties-added-to-code-classlanguage-textigraphtypecode-code-classlanguage-textifieldtypecode-and-code-classlanguage-textiobjectgraphtypecode\" aria-label=\"13 new properties added to code classlanguage textigraphtypecode code classlanguage textifieldtypecode and code classlanguage textiobjectgraphtypecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>13. New properties added to <code class=\"language-text\">IGraphType</code>, <code class=\"language-text\">IFieldType</code> and <code class=\"language-text\">IObjectGraphType</code></h3>\n<p>See the new features section for details on the new properties added to these interfaces.\nUnless you directly implement these interfaces, you should not be impacted by these changes.</p>\n<h3 id=\"14-code-classlanguage-textischemanodevisitorpostvisitschemacode-method-added\" style=\"position:relative;\"><a href=\"#14-code-classlanguage-textischemanodevisitorpostvisitschemacode-method-added\" aria-label=\"14 code classlanguage textischemanodevisitorpostvisitschemacode method added permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>14. <code class=\"language-text\">ISchemaNodeVisitor.PostVisitSchema</code> method added</h3>\n<p>See the new features section for details on the new method added to this interface.\nUnless you directly implement this interface, you should not be impacted by this change.</p>\n<h3 id=\"15-code-classlanguage-textanyscalartypecode-and-code-classlanguage-textservicegraphtypecode-moved-to-code-classlanguage-textgraphqlfederationtypescode\" style=\"position:relative;\"><a href=\"#15-code-classlanguage-textanyscalartypecode-and-code-classlanguage-textservicegraphtypecode-moved-to-code-classlanguage-textgraphqlfederationtypescode\" aria-label=\"15 code classlanguage textanyscalartypecode and code classlanguage textservicegraphtypecode moved to code classlanguage textgraphqlfederationtypescode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>15. <code class=\"language-text\">AnyScalarType</code> and <code class=\"language-text\">ServiceGraphType</code> moved to <code class=\"language-text\">GraphQL.Federation.Types</code></h3>\n<p>These graph types, previously located within the <code class=\"language-text\">GraphQL.Utilities.Federation</code> namespace,\nhave been moved to the <code class=\"language-text\">GraphQL.Federation.Types</code> namespace alongside all other federation types.</p>\n<h3 id=\"16-code-classlanguage-textifederatedresolvercode-code-classlanguage-textfuncfederatedresolvercode-and-code-classlanguage-textresolvereferenceasynccode-replaced\" style=\"position:relative;\"><a href=\"#16-code-classlanguage-textifederatedresolvercode-code-classlanguage-textfuncfederatedresolvercode-and-code-classlanguage-textresolvereferenceasynccode-replaced\" aria-label=\"16 code classlanguage textifederatedresolvercode code classlanguage textfuncfederatedresolvercode and code classlanguage textresolvereferenceasynccode replaced permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>16. <code class=\"language-text\">IFederatedResolver</code>, <code class=\"language-text\">FuncFederatedResolver</code> and <code class=\"language-text\">ResolveReferenceAsync</code> replaced</h3>\n<ul>\n<li><code class=\"language-text\">IFederatedResolver</code> has been replaced with <code class=\"language-text\">IFederationResolver</code>.</li>\n<li><code class=\"language-text\">FuncFederatedResolver</code> has been replaced with <code class=\"language-text\">FederationResolver</code>.</li>\n<li><code class=\"language-text\">ResolveReferenceAsync</code> has been replaced with <code class=\"language-text\">ResolveReference</code>.</li>\n</ul>\n<p>Please note that the new members are now located in the <code class=\"language-text\">GraphQL.Federation</code> namespace and may\nrequire slight changes to your code to accommodate the new signatures. The old members have been\nmarked as obsolete and will continue to work in v8, but will be removed in v9.</p>\n<h3 id=\"17-graphql-federation-entity-resolvers-do-not-automatically-inject-code-classlanguage-text__typenamecode-into-requests\" style=\"position:relative;\"><a href=\"#17-graphql-federation-entity-resolvers-do-not-automatically-inject-code-classlanguage-text__typenamecode-into-requests\" aria-label=\"17 graphql federation entity resolvers do not automatically inject code classlanguage text__typenamecode into requests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>17. GraphQL Federation entity resolvers do not automatically inject <code class=\"language-text\">__typename</code> into requests.</h3>\n<p>Previously, the <code class=\"language-text\">__typename</code> field was automatically injected into the request for entity resolvers.\nThis behavior has been removed as it is not required to meet the GraphQL Federation specification.</p>\n<p>For instance, the following sample request:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">_entities</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">representations</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token attr-name\">__typename</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"User\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">id</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Should now be written as:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">_entities</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">representations</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token attr-name\">__typename</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"User\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">__typename</span>\n    <span class=\"token operator\">...</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">id</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Please ensure that your client requests are updated to include the <code class=\"language-text\">__typename</code> field in the response.\nAlternatively, you can install the provided <code class=\"language-text\">InjectTypenameValidationRule</code> validation rule to automatically\ninject the <code class=\"language-text\">__typename</code> field into the request.</p>\n<h3 id=\"18-code-classlanguage-textiinputobjectgraphtypeisoneofcode-property-added\" style=\"position:relative;\"><a href=\"#18-code-classlanguage-textiinputobjectgraphtypeisoneofcode-property-added\" aria-label=\"18 code classlanguage textiinputobjectgraphtypeisoneofcode property added permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>18. <code class=\"language-text\">IInputObjectGraphType.IsOneOf</code> property added</h3>\n<p>See the new features section for details on the new property added to this interface.\nUnless you directly implement this interface, you should not be impacted by this change.</p>\n<h3 id=\"19-code-classlanguage-textvariableusageisrequiredcode-property-added-and-code-classlanguage-textvariableusagecode-constructor-changed\" style=\"position:relative;\"><a href=\"#19-code-classlanguage-textvariableusageisrequiredcode-property-added-and-code-classlanguage-textvariableusagecode-constructor-changed\" aria-label=\"19 code classlanguage textvariableusageisrequiredcode property added and code classlanguage textvariableusagecode constructor changed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>19. <code class=\"language-text\">VariableUsage.IsRequired</code> property added and <code class=\"language-text\">VariableUsage</code> constructor changed</h3>\n<p>This is required for OneOf Input Object support and is used to determine if a variable is required.\nUnless you have a custom validation rule that uses <code class=\"language-text\">VariableUsage</code>, you should not be impacted\nby this change.</p>\n<h3 id=\"20-infer-field-nullability-from-nrt-annotations-is-enabled-by-default\" style=\"position:relative;\"><a href=\"#20-infer-field-nullability-from-nrt-annotations-is-enabled-by-default\" aria-label=\"20 infer field nullability from nrt annotations is enabled by default permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>20. Infer field nullability from NRT annotations is enabled by default</h3>\n<p>When defining the field with expression, the graph type nullability will be inferred from\nNull Reference Types (NRT) by default. See the new features section for more details.<br>\nTo revert to old behavior set the global switch before initializing the schema</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">GlobalSwitches<span class=\"token punctuation\">.</span>InferFieldNullabilityFromNRTAnnotations <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"21-the-complexity-analyzer-has-been-rewritten-and-functions-differently\" style=\"position:relative;\"><a href=\"#21-the-complexity-analyzer-has-been-rewritten-and-functions-differently\" aria-label=\"21 the complexity analyzer has been rewritten and functions differently permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>21. The complexity analyzer has been rewritten and functions differently</h3>\n<p>The complexity analyzer has been rewritten to be more efficient and to support more complex\nscenarios. Please read the documentation on the new complexity analyzer to understand how it\nworks and how to configure it. To revert to the old behavior, use the <code class=\"language-text\">LegacyComplexityValidationRule</code>\nor GraphQL builder method as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSchema</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyQuery<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddLegacyComplexityAnalyzer</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>MaxComplexity <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// use the v7 complexity analyzer</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The legacy complexity analyzer will be removed in v9.</p>\n<h3 id=\"22-unhandled-exceptions-within-execution-configuration-delegates-are-now-handled-and-wrapped\" style=\"position:relative;\"><a href=\"#22-unhandled-exceptions-within-execution-configuration-delegates-are-now-handled-and-wrapped\" aria-label=\"22 unhandled exceptions within execution configuration delegates are now handled and wrapped permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>22. Unhandled exceptions within execution configuration delegates are now handled and wrapped</h3>\n<p>Previously, unhandled exceptions within execution configuration delegates were not handled and\nwould be thrown directly to the caller. For instance, if a database exception occurred within\nthe delegate used to pull persisted documents, the exception would be thrown directly to the\ncaller. Now, these exceptions are caught and processed through the unhandled exception handler\ndelegate, which allows for logging and other processing of the exception.</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSchema</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyQuery<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddUnhandledExceptionHandler</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// this now runs when the below exception is thrown</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureExecution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// sample exception thrown while logging the query being executed to a database</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Database exception occurred\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For this to work properly, be sure that any code liable to throw an exception is located inside\na <code class=\"language-text\">Use...</code> or <code class=\"language-text\">ConfigureExecution</code> method, not an <code class=\"language-text\">Add...</code> or <code class=\"language-text\">ConfigureExecutionOptions</code> method,\nor else ensure that the call to <code class=\"language-text\">AddUnhandledExceptionHandler</code> is first in the chain.</p>\n<h3 id=\"23-code-classlanguage-textiexecutioncontextexecutionoptionscode-property-added\" style=\"position:relative;\"><a href=\"#23-code-classlanguage-textiexecutioncontextexecutionoptionscode-property-added\" aria-label=\"23 code classlanguage textiexecutioncontextexecutionoptionscode property added permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>23. <code class=\"language-text\">IExecutionContext.ExecutionOptions</code> property added</h3>\n<p>Custom <code class=\"language-text\">IExecutionContext</code> implementations must now implement the <code class=\"language-text\">ExecutionOptions</code> property.\nIn addition, the <code class=\"language-text\">AddUnhandledExceptionHandler</code> methods that have an <code class=\"language-text\">ExecutionOptions</code> parameter\nwithin the delegate have been deprecated in favor of using the <code class=\"language-text\">IExecutionContext.ExecutionOptions</code>\nproperty.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// v7</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSchema</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyQuery<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddUnhandledExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// code</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// v8</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> b\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSchema</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyQuery<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddUnhandledExceptionHandler</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> options <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>ExecutionOptions<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// code</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"24-id-graph-type-serialization-is-culture-invariant\" style=\"position:relative;\"><a href=\"#24-id-graph-type-serialization-is-culture-invariant\" aria-label=\"24 id graph type serialization is culture invariant permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>24. ID graph type serialization is culture-invariant</h3>\n<p>The <code class=\"language-text\">IdGraphType</code> now serializes values using the invariant culture.</p>\n<h3 id=\"25-directiveattribute-moved-to-graphql-namespace\" style=\"position:relative;\"><a href=\"#25-directiveattribute-moved-to-graphql-namespace\" aria-label=\"25 directiveattribute moved to graphql namespace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>25. DirectiveAttribute moved to GraphQL namespace</h3>\n<p>The <code class=\"language-text\">DirectiveAttribute</code> has been moved to the <code class=\"language-text\">GraphQL</code> namespace.</p>\n<h3 id=\"26-changes-to-support-interface-inheritance\" style=\"position:relative;\"><a href=\"#26-changes-to-support-interface-inheritance\" aria-label=\"26 changes to support interface inheritance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>26. Changes to support interface inheritance</h3>\n<p>Small changes were made to <code class=\"language-text\">IInterfaceGraphType</code> and <code class=\"language-text\">IImplementInterfaces</code> to support interface inheritance.\nIf you have custom implementations of these interfaces, you may need to update them.</p>\n<h3 id=\"27-stricter-type-checking-when-implementing-interfaces\" style=\"position:relative;\"><a href=\"#27-stricter-type-checking-when-implementing-interfaces\" aria-label=\"27 stricter type checking when implementing interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>27. Stricter type checking when implementing interfaces</h3>\n<p>Verfies that the arguments defined on fields of interfaces are also defined on fields of implementing types,\npursuant to GraphQL specifications.</p>\n<h3 id=\"28-apis-marked-obsolete-since-v5-have-been-removed\" style=\"position:relative;\"><a href=\"#28-apis-marked-obsolete-since-v5-have-been-removed\" aria-label=\"28 apis marked obsolete since v5 have been removed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>28. APIs marked obsolete since v5 have been removed</h3>\n<ul>\n<li><code class=\"language-text\">GraphQLMetadataAttribute.InputType</code> has been replaced with <code class=\"language-text\">InputTypeAttribute</code>.</li>\n<li><code class=\"language-text\">GraphQLMetadataAttribute.OutputType</code> has been replaced with <code class=\"language-text\">OutputTypeAttribute</code>.</li>\n<li><code class=\"language-text\">ErrorInfoProviderOptions.ExposeExceptionStackTrace</code> has been replaced with <code class=\"language-text\">ExposeExceptionDetails</code> and <code class=\"language-text\">ExposeExceptionDetailsMode</code>.</li>\n</ul>\n<p>See prior migration documents for more details concerning these changes.</p>\n<h3 id=\"29-code-classlanguage-textiresolvefieldcontextexecutioncontextcode-added-and-code-classlanguage-textexecutioncontextgetargumentscode-signature-has-changed\" style=\"position:relative;\"><a href=\"#29-code-classlanguage-textiresolvefieldcontextexecutioncontextcode-added-and-code-classlanguage-textexecutioncontextgetargumentscode-signature-has-changed\" aria-label=\"29 code classlanguage textiresolvefieldcontextexecutioncontextcode added and code classlanguage textexecutioncontextgetargumentscode signature has changed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>29. <code class=\"language-text\">IResolveFieldContext.ExecutionContext</code> added and <code class=\"language-text\">ExecutionContext.GetArguments</code> signature has changed</h3>\n<p>If you are using the <code class=\"language-text\">ExecutionContext.GetArguments</code> method to parse arguments directly, for example to retrieve\nthe arguments of child fields in a resolver, we suggest using the new <code class=\"language-text\">IExecutionContext.GetArguments</code> and\n<code class=\"language-text\">IExecutionContext.GetDirectives</code> methods instead. These take advantage of the fact that all arguments\nare parsed during the validation phase and need not be parsed again. See example below:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// v7</span>\n<span class=\"token class-name\">IResolveFieldContext</span> context<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// parent context</span>\n<span class=\"token class-name\">FieldType</span> fieldDefinition<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// field definition from which to get arguments</span>\n<span class=\"token class-name\">GraphQLField</span> fieldAst<span class=\"token punctuation\">;</span>              <span class=\"token comment\">// field AST from which to get arguments</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> arguments <span class=\"token operator\">=</span> ExecutionHelper<span class=\"token punctuation\">.</span><span class=\"token function\">GetArguments</span><span class=\"token punctuation\">(</span>fieldDefinition<span class=\"token punctuation\">.</span>Arguments<span class=\"token punctuation\">,</span> fieldAst<span class=\"token punctuation\">.</span>Arguments<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>Variables<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// v8</span>\n<span class=\"token class-name\">IResolveFieldContext</span> context<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// parent context</span>\n<span class=\"token class-name\">FieldType</span> fieldDefinition<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// field definition from which to get arguments</span>\n<span class=\"token class-name\">GraphQLField</span> fieldAst<span class=\"token punctuation\">;</span>              <span class=\"token comment\">// field AST from which to get arguments</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> arguments <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>ExecutionContext<span class=\"token punctuation\">.</span><span class=\"token function\">GetArguments</span><span class=\"token punctuation\">(</span>fieldDefinition<span class=\"token punctuation\">,</span> fieldAst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To continue to use the <code class=\"language-text\">ExecutionHelper.GetArguments</code> method, you may need to refer to the GraphQL.NET source\nfor reference.</p>\n<p>If you directly implement <code class=\"language-text\">IResolveFieldContext</code>, you must now also implement the <code class=\"language-text\">ExecutionContext</code> property.</p>\n<h2 id=\"appendix\" style=\"position:relative;\"><a href=\"#appendix\" aria-label=\"appendix permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Appendix</h2>\n<h3 id=\"schema-verification-test-example\" style=\"position:relative;\"><a href=\"#schema-verification-test-example\" aria-label=\"schema verification test example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Schema verification test example</h3>\n<p>The below example demonstrates how to write a test to verify that the schema does not change during\nmigration.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">VerifyIntrospection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> services <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ServiceCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> startup <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Startup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConfigurationBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    startup<span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span>services<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> provider <span class=\"token operator\">=</span> services<span class=\"token punctuation\">.</span><span class=\"token function\">BuildServiceProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> schema <span class=\"token operator\">=</span> provider<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ISchema<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    schema<span class=\"token punctuation\">.</span><span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sdl <span class=\"token operator\">=</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> StringComparison <span class=\"token operator\">=</span> StringComparison<span class=\"token punctuation\">.</span>OrdinalIgnoreCase <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    sdl<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldMatchApproved</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">=></span> o<span class=\"token punctuation\">.</span><span class=\"token function\">NoDiff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">WithFileExtension</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"graphql\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This test uses the <code class=\"language-text\">ShouldMatchApproved</code> method from the <code class=\"language-text\">Shouldly</code> NuGet package to compare the schema\ngenerated by the application to the approved schema. If the schema changes, the test will fail, and you\nwill need to update the approved schema file or fix the code that caused the schema to change.</p>","fields":{"relativePath":"docs/migrations/migration8.md"}},"site":{"siteMetadata":{"githubEditUrl":"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site"}}},"pageContext":{"relativePath":"docs/migrations/migration8.md"}},"staticQueryHashes":["3402777086"],"slicesMap":{}}