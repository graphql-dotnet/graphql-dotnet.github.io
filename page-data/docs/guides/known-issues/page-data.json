{"componentChunkName":"component---src-components-docs-page-js","path":"/docs/guides/known-issues/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"known-issues--faq\" style=\"position:relative;\"><a href=\"#known-issues--faq\" aria-label=\"known issues  faq permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Known Issues / FAQ</h1>\n<h2 id=\"faq\" style=\"position:relative;\"><a href=\"#faq\" aria-label=\"faq permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FAQ</h2>\n<h3 id=\"is-it-possible-to-auto-generate-classes-from-a-schema\" style=\"position:relative;\"><a href=\"#is-it-possible-to-auto-generate-classes-from-a-schema\" aria-label=\"is it possible to auto generate classes from a schema permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Is it possible to auto-generate classes from a schema?</h3>\n<p>This functionality is not provided by GraphQL.NET. See <a href=\"https://github.com/graphql-dotnet/graphql-dotnet/issues/576\">issue #576</a>.</p>\n<h3 id=\"is-it-possible-to-auto-generate-a-graph-type-from-a-class\" style=\"position:relative;\"><a href=\"#is-it-possible-to-auto-generate-a-graph-type-from-a-class\" aria-label=\"is it possible to auto generate a graph type from a class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Is it possible to auto-generate a graph type from a class?</h3>\n<p>Yes, via the <code class=\"language-text\">AutoRegisteringObjectGraphType</code>/<code class=\"language-text\">AutoRegisteringInputObjectGraphType</code> classes.\nYou can also configure auto-generated fields and auto-create enum types via the <code class=\"language-text\">EnumerationGraphType&lt;></code>\ngeneric class.</p>\n<p>Here is a sample of using an enumeration graph type:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ListGraphType<span class=\"token punctuation\">&lt;</span>EnumerationGraphType<span class=\"token punctuation\">&lt;</span>Episodes<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"appearsIn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Which movie they appear in.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here is a sample of an auto registering input graph type:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Age <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringGraphType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addPerson\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Arguments</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AutoRegisteringInputObjectGraphType<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Resolve</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> person <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetArgument</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        db<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here is a sample of an auto registering object graph type that modifies some of the fields:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DateTime</span> LastUpdated <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductGraphType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">AutoRegisteringObjectGraphType<span class=\"token punctuation\">&lt;</span>Product<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ProductGraphType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>LastUpdated<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">GetField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Description <span class=\"token operator\">=</span> <span class=\"token string\">\"A short name of the product\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ListGraphType<span class=\"token punctuation\">&lt;</span>ProductGraphType<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"products\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Resolve</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">=></span> db<span class=\"token punctuation\">.</span>Products<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that you may need to register the classes within your dependency injection framework:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>EnumerationGraphType<span class=\"token punctuation\">&lt;</span>Episodes<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AutoRegisteringInputGraphType<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ProductGraphType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Alternatively, you can register open generic classes:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">AutoRegisteringInputGraphType<span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">AutoRegisteringObjectGraphType<span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">EnumerationGraphType<span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the above sample, you would still need to register <code class=\"language-text\">ProductGraphType</code> separately.</p>\n<h3 id=\"is-it-possible-to-downloadupload-a-file-with-graphql\" style=\"position:relative;\"><a href=\"#is-it-possible-to-downloadupload-a-file-with-graphql\" aria-label=\"is it possible to downloadupload a file with graphql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Is it possible to download/upload a file with GraphQL?</h3>\n<p>Files would need to be encoded in some form that is transmissible via JSON (e.g. Base64). If the file isn't part of some other\nstructured data result, it may not be a good candidate for a GraphQL API.</p>\n<p>Note that Base64 is significantly less efficient bandwidth-wise than binary transfer, and you won't get an automatic browser\ndownload prompt from receiving it.</p>\n<p>If you are attempting to return pictures to be directly consumed in a web front-end, you can encode the picture as Base64 and\nprepend a data URL tag (e.g. \"<code class=\"language-text\">data:image/jpg;base64,</code>\") which can be interpreted by common web browsers.</p>\n<p>Similarly, if you are attempting a mutation to allow file uploading from a web browser, you can have a field resolver\naccept a <code class=\"language-text\">StringGraphType</code> argument consisting of a data url with base64 encoded data.</p>\n<p>Note that automatic conversion from Base64 string to byte array (but not byte array to Base64 string) is provided by\nGraphQL.NET. This means you can use <code class=\"language-text\">GetArgument&lt;byte[]>()</code> to retrieve a byte array from a field argument, provided that\nthe argument was a Base64 string.</p>\n<h3 id=\"can-you-use-flag-enumerations---enumerations-marked-with-the-code-classlanguage-textflagsattributecode\" style=\"position:relative;\"><a href=\"#can-you-use-flag-enumerations---enumerations-marked-with-the-code-classlanguage-textflagsattributecode\" aria-label=\"can you use flag enumerations   enumerations marked with the code classlanguage textflagsattributecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Can you use flag enumerations - enumerations marked with the <code class=\"language-text\">FlagsAttribute</code>?</h3>\n<p>Flag enumerations are not natively supported by the GraphQL specification. However,\nyou can provide a similar behavior by converting your enumeration values to and from\na list of enums. Here is a sample of some extension methods to facilitate this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">FromFlags</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">T</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">struct</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Enum</span></span>\n        <span class=\"token operator\">=></span> Enum<span class=\"token punctuation\">.</span><span class=\"token function\">GetValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Cast</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">FromFlags</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">T<span class=\"token punctuation\">?</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">struct</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Enum</span></span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span>HasValue <span class=\"token punctuation\">?</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">FromFlags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">T</span> <span class=\"token generic-method\"><span class=\"token function\">CombineFlags</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> values<span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">struct</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Enum</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>values <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> enumType <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumUnderlyingType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enumType <span class=\"token operator\">==</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>Enum<span class=\"token punctuation\">.</span><span class=\"token function\">ToObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Cast</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Aggregate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">|</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// add support for uint/long/etc here</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enum type not supported\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Flags</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">MyFlags</span>\n<span class=\"token punctuation\">{</span>\n    Grumpy <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    Happy <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    Sleepy <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// this returns the list [\"GRUMPY\", \"HAPPY\"]</span>\n<span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ListGraphType<span class=\"token punctuation\">&lt;</span>EnumerationGraphType<span class=\"token punctuation\">&lt;</span>MyFlags<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getFlagEnum\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Resolve</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> myFlags <span class=\"token operator\">=</span> MyFlags<span class=\"token punctuation\">.</span>Grumpy <span class=\"token operator\">|</span> MyFlags<span class=\"token punctuation\">.</span>Happy<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> myFlags<span class=\"token punctuation\">.</span><span class=\"token function\">FromFlags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// when calling convertEnumListToString(arg: [GRUMPY, HAPPY]), it returns the string \"Grumpy, Happy\"</span>\n<span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringGraphType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"convertEnumListToString\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Argument</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ListGraphType<span class=\"token punctuation\">&lt;</span>EnumerationGraphType<span class=\"token punctuation\">&lt;</span>MyFlags<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arg\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Resolve</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetArgument</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>MyFlags<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">CombineFlags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"can-custom-scalars-serialize-non-null-data-to-a-null-value-and-vice-versa\" style=\"position:relative;\"><a href=\"#can-custom-scalars-serialize-non-null-data-to-a-null-value-and-vice-versa\" aria-label=\"can custom scalars serialize non null data to a null value and vice versa permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Can custom scalars serialize non-null data to a null value and vice versa?</h3>\n<p>Yes; let's say you want to write a custom serializer for date/time data types where it changes\nstrings of the format \"MM-dd-yyyy\" into <code class=\"language-text\">DateTime</code> values, and empty strings into null values. That\nfunctionality is possible with a custom scalar.</p>\n<p>Custom scalars transform external representations into internal representations and vice versa.\nSo an external representation might be <code class=\"language-text\">null</code> while the internal representation might be an\nempty string. The reverse is also possible; an external representation of an empty string having\nan internal representation of <code class=\"language-text\">null</code>.</p>\n<p>However, field arguments' default values are stored in their local representation, with the exception\nof a value of <code class=\"language-text\">null</code> indicates that the default value is not specified. So you cannot have a specified\ndefault value with a non-null external representation and a null internal representation. This is a\nlimitation of GraphQL.NET.</p>\n<h3 id=\"should-i-use-code-classlanguage-textauthorizeattributecode-or-the-code-classlanguage-textauthorizewithcode-method\" style=\"position:relative;\"><a href=\"#should-i-use-code-classlanguage-textauthorizeattributecode-or-the-code-classlanguage-textauthorizewithcode-method\" aria-label=\"should i use code classlanguage textauthorizeattributecode or the code classlanguage textauthorizewithcode method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Should I use <code class=\"language-text\">AuthorizeAttribute</code> or the <code class=\"language-text\">AuthorizeWith</code> method?</h3>\n<p><code class=\"language-text\">AuthorizeAttribute</code> is only for use with the schema-first or type-first syntax. <code class=\"language-text\">AuthorizeWith</code> is for use\nwith the code-first approach.</p>\n<p>See <a href=\"https://github.com/graphql-dotnet/authorization/issues/68\">issue #68</a> and <a href=\"https://github.com/graphql-dotnet/authorization/issues/74\">issue #74</a>\nwithin the <a href=\"https://github.com/graphql-dotnet/authorization\">authorization</a> package.</p>\n<h3 id=\"can-descriptions-be-inherited-if-a-graph-type-implements-an-graphql-interface\" style=\"position:relative;\"><a href=\"#can-descriptions-be-inherited-if-a-graph-type-implements-an-graphql-interface\" aria-label=\"can descriptions be inherited if a graph type implements an graphql interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Can descriptions be inherited if a graph type implements an GraphQL interface?</h3>\n<p>Yes; although descriptions directly set on the graph type take precedence.</p>\n<h3 id=\"how-can-i-use-the-data-loader-for-a-many-to-many-relationship\" style=\"position:relative;\"><a href=\"#how-can-i-use-the-data-loader-for-a-many-to-many-relationship\" aria-label=\"how can i use the data loader for a many to many relationship permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How can I use the data loader for a many-to-many relationship?</h3>\n<p>This is done within your database queries; it is not a function of the dataloader. Use the same\n<code class=\"language-text\">CollectionBatchDataLoader</code> as you would for a one-to-many relationship; then when you are loading\ndata from your database within the fetch delegate, use an inner join to retrieve the proper data.</p>\n<h3 id=\"why-does-my-saved-code-classlanguage-textiresolvefieldcontextcode-instance-change-after-the-field-resolver-executes\" style=\"position:relative;\"><a href=\"#why-does-my-saved-code-classlanguage-textiresolvefieldcontextcode-instance-change-after-the-field-resolver-executes\" aria-label=\"why does my saved code classlanguage textiresolvefieldcontextcode instance change after the field resolver executes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why does my saved <code class=\"language-text\">IResolveFieldContext</code> instance \"change\" after the field resolver executes?</h3>\n<p>The <code class=\"language-text\">IResolveFieldContext</code> instance passed to field resolvers is re-used at the completion of the resolver. Be sure not to\nuse this instance once the resolver finishes executing. To preserve a copy of the context, call <code class=\"language-text\">.Copy()</code> on the context\nto create a copy that is not re-used. Note that it is safe to use the field context within asynchronous field resolvers,\ndata loaders and list fields. Once the asynchronous field resolver or data loader returns its final result, the context may be re-used.\nAlso, any calls to the configured <code class=\"language-text\">UnhandledExceptionDelegate</code> will receive a field context copy that will not be re-used,\nso it is safe to preserve these instances without calling <code class=\"language-text\">.Copy()</code>.</p>\n<h2 id=\"known-issues\" style=\"position:relative;\"><a href=\"#known-issues\" aria-label=\"known issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Known Issues</h2>\n<h3 id=\"iresolvefieldcontexthasargument-issue\" style=\"position:relative;\"><a href=\"#iresolvefieldcontexthasargument-issue\" aria-label=\"iresolvefieldcontexthasargument issue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IResolveFieldContext.HasArgument issue</h3>\n<p><code class=\"language-text\">IResolveFieldContext.HasArgument</code> will return <code class=\"language-text\">true</code> for all arguments where <code class=\"language-text\">GetArgument</code> does not return <code class=\"language-text\">null</code>.\nIt cannot identify which arguments have been provided a <code class=\"language-text\">null</code> value compared to arguments which were not provided.\nThis issue should supposedly be resolved in version 4.</p>\n<h3 id=\"serialization-of-decimals-does-not-respect-precision\" style=\"position:relative;\"><a href=\"#serialization-of-decimals-does-not-respect-precision\" aria-label=\"serialization of decimals does not respect precision permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Serialization of decimals does not respect precision</h3>\n<p>This one is <code class=\"language-text\">Newtonsoft.Json</code> specific issue. For more information see:</p>\n<ul>\n<li><a href=\"https://github.com/JamesNK/Newtonsoft.Json/issues/1726\">https://github.com/JamesNK/Newtonsoft.Json/issues/1726</a></li>\n<li><a href=\"https://stackoverflow.com/questions/21153381/json-net-serializing-float-double-with-minimal-decimal-places-i-e-no-redundant\">https://stackoverflow.com/questions/21153381/json-net-serializing-float-double-with-minimal-decimal-places-i-e-no-redundant</a></li>\n</ul>\n<p>As a workaround you may add <code class=\"language-text\">FixPrecisionConverter</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NewtonsoftJson<span class=\"token punctuation\">.</span>DocumentWriter</span><span class=\"token punctuation\">(</span>settings <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    settings<span class=\"token punctuation\">.</span>Converters<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NewtonsoftJson<span class=\"token punctuation\">.</span>FixPrecisionConverter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"common-errors\" style=\"position:relative;\"><a href=\"#common-errors\" aria-label=\"common errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Common Errors</h2>\n<h3 id=\"synchronous-operations-are-disallowed\" style=\"position:relative;\"><a href=\"#synchronous-operations-are-disallowed\" aria-label=\"synchronous operations are disallowed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Synchronous operations are disallowed.</h3>\n<blockquote>\n<p>InvalidOperationException: Synchronous operations are disallowed. Call ReadAsync or set AllowSynchronousIO to true instead</p>\n</blockquote>\n<p>ASP.NET Core 3 does not by default allow synchronous reading/writing of input/output streams. When using the <code class=\"language-text\">Newtonsoft.Json</code> package,\nyou will need to set the <code class=\"language-text\">AllowSynchronousIO</code> property to <code class=\"language-text\">true</code>. The <code class=\"language-text\">System.Text.Json</code> package fully supports\nasynchronous reading of json data streams and should not be a problem.</p>\n<p>Here is the workaround for <code class=\"language-text\">Newtonsoft.Json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// kestrel</span>\nservices<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Configure</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>KestrelServerOptions<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">.</span>AllowSynchronousIO <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// IIS</span>\n services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Configure</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IISServerOptions<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">.</span>AllowSynchronousIO <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"cannot-resolve-scoped-service-within-graph-type\" style=\"position:relative;\"><a href=\"#cannot-resolve-scoped-service-within-graph-type\" aria-label=\"cannot resolve scoped service within graph type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cannot resolve scoped service within graph type</h3>\n<blockquote>\n<p>InvalidOperationException: Cannot resolve scoped service from root provider</p>\n</blockquote>\n<p>The recommended lifetime for the schema and its graph types within a dependency injection\nframework is the 'singleton' lifetime. This prevents the schema from having to be built\nfor every GraphQL request. Since the graph types are constructed at the same time as the\nschema, it is not possible to register the graph types as scoped services while leaving\nthe schema as a singleton. Instead, you will need to pull your scoped services from within\nthe field resolver via the <code class=\"language-text\">IResolveFieldContext.RequestServices</code> property. Detailed\ninformation on this technique, its configuration requirements, and alternatives are outlined\nin the <a href=\"../getting-started/dependency-injection.md\">Dependency Injection</a> documentation.</p>\n<p>It is also possible to register the schema and all its graph types as scoped services.\nThis is not recommended due to the overhead of building the schema for each request.</p>\n<p>Note that concurrency issues typically arise when using scoped services with a parallel\nexecution strategy. Please read the section on this in the\n<a href=\"../getting-started/dependency-injection.md#scoped-services-with-a-singleton-schema-lifetime\">documentation</a>.</p>\n<h3 id=\"entity-framework-concurrency-issues\" style=\"position:relative;\"><a href=\"#entity-framework-concurrency-issues\" aria-label=\"entity framework concurrency issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entity Framework concurrency issues</h3>\n<blockquote>\n<p>InvalidOperationException: A second operation started on this context before a previous\noperation completed. This is usually caused by different threads using the same instance\nof DbContext. For more information on how to avoid threading issues with DbContext,\nsee <a href=\"https://go.microsoft.com/fwlink/?linkid=2097913\">https://go.microsoft.com/fwlink/?linkid=2097913</a>.</p>\n</blockquote>\n<p>This problem is due to the fact that the default execution strategy for a query operation\nis the <code class=\"language-text\">ParallelExecutionStrategy</code>, per the <a href=\"https://spec.graphql.org/October2021/#sec-Normal-and-Serial-Execution\">spec</a>,\ncombined with the fact that you are using a shared instance of the Entity Framework\n<code class=\"language-text\">DbContext</code>.</p>\n<p>For instance, let's say the database context is registered as a scoped service (typical for EF),\nand if you request the database context via the <code class=\"language-text\">IResolveFieldContext.RequestServices</code> property,\nyou will retrieve an instance of the database context that, although unique\nto this request, is shared between all field resolvers within this request.</p>\n<p>The easiest option is to change the execution strategy to <code class=\"language-text\">SerialExecutionStrategy</code>. Although\nthis would solve concurrency issues in this case, there may be an objectionable performance\ndegradation, since only a single field resolver can execute at a time.</p>\n<p>A second option would be to change the database context lifetime to 'transient'. This means\nthat each time the database context was requested, it would receive a different copy, solving\nthe concurrency problems with GraphQL.NET's parallel execution strategy. However, if your\nbusiness logic layer passes EF-tracked entities through different services, this will not\nwork for you as each of the different services will not know about the tracked entities\npassed from another service. Therefore, the database context must remain scoped.</p>\n<p>Finally, you can create a scope within each field resolver that relies on Entity Framework\nor your other scoped services. Please see the section on this in the\n<a href=\"../getting-started/dependency-injection.md#scoped-services-with-a-singleton-schema-lifetime\">dependency injection documentation</a>.</p>\n<p>Also see discussion in <a href=\"https://github.com/graphql-dotnet/graphql-dotnet/issues/1310\">#1310</a> with related issues.</p>\n<h3 id=\"enumeration-members-case-sensitivity\" style=\"position:relative;\"><a href=\"#enumeration-members-case-sensitivity\" aria-label=\"enumeration members case sensitivity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enumeration members' case sensitivity</h3>\n<p>Prior to GraphQL.NET version 5, enumeration values were case insensitive matches, which\ndid not meet the GraphQL specification. This has been updated to match the spec; to revert to the prior\nbehavior, please see <a href=\"https://github.com/graphql-dotnet/graphql-dotnet/issues/3105#issuecomment-1109991628\">issue #3105</a>.</p>\n<h3 id=\"multiple-instances-of-same-graph-type-error\" style=\"position:relative;\"><a href=\"#multiple-instances-of-same-graph-type-error\" aria-label=\"multiple instances of same graph type error permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multiple instances of same graph type error</h3>\n<p>You may encounter errors of the following nature:</p>\n<blockquote>\n<p>A different instance of the GraphType 'WidgetGraphType' with the name 'Widget' has already been registered within the\nschema. Please use the same instance for all references within the schema, or use GraphQLTypeReference to reference a\ntype instantiated elsewhere.</p>\n</blockquote>\n<p>This is caused when the same graph type class has multiple distinct instances used within the schema. This is a change\nin GraphQL.NET v7, and exists as protection to ensure that the schema is initialized properly. Note that this restriction\ndoes not apply to scalars.</p>\n<p>Below are some samples of what does not work in GraphQL.NET v7, along with solutions:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// sample 1: manually creating instances without providing the same instance for each use</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyGraphType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectGraphType</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyGraphType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// creates an instance of WidgetGraphType</span>\n        <span class=\"token function\">Field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"field1\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WidgetGraphType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// creates another instance of the same class</span>\n        <span class=\"token function\">Field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"field2\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WidgetGraphType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// solution:</span>\n        <span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WidgetGraphType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"field1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WidgetGraphType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"field2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sample 2: adding an instance to a union graph type</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyUnionGraphType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">UnionGraphType</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyUnionGraphType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// creates an instance, which will be different than the one used elsewhere</span>\n        <span class=\"token function\">AddPossibleType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WidgetGraphType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// solution:</span>\n        <span class=\"token generic-method\"><span class=\"token function\">Type</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WidgetGraphType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sample 3: pulling an instance from DI</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyUnionGraphType</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">UnionGraphType</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyUnionGraphType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WidgetGraphType</span> widgetType<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Since graph types are typically registered as transients, this reference to</span>\n        <span class=\"token comment\">// WidgetGraphType will be different than other instances throughout the schema</span>\n        <span class=\"token comment\">// and the following code does not work.</span>\n        <span class=\"token function\">AddPossibleType</span><span class=\"token punctuation\">(</span>widgetType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ResolveType <span class=\"token operator\">=</span> obj <span class=\"token operator\">=></span> obj <span class=\"token keyword\">switch</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">string</span> <span class=\"token operator\">=></span> widgetType<span class=\"token punctuation\">,</span>\n            _ <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// solution 1: register WidgetGraphType as a singleton manually within the DI provider</span>\n\n        <span class=\"token comment\">// solution 2: remove WidgetGraphType from the constructor and use the following code:</span>\n        <span class=\"token generic-method\"><span class=\"token function\">Type</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WidgetGraphType<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ResolveType <span class=\"token operator\">=</span> obj <span class=\"token operator\">=></span> obj <span class=\"token keyword\">switch</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">string</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GraphQLTypeReference</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Widget\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// reference by name (newing each time is not nessessary)</span>\n            _ <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// solution 3: remove ResolveType and rely on IObjectGraphType.IsTypeOf of each union member type</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, within your schema, you may pull the query, mutation and/or subscription types from DI.\nThis is normal as those types are not typically referenced anywhere else in the schema.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySchema</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Schema</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// correct implementation for the schema class</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MySchema</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceProvider</span> serviceProvider<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MyQueryGraphType</span> queryGraphType<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>serviceProvider<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Query <span class=\"token operator\">=</span> queryGraphType<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Similar restrictions apply if creating a dynamic schema. You will need to maintain a list of\ngraph type instances created by your schema and use those instances where necessary while\nbuilding the other graph types. You may also use <code class=\"language-text\">GraphQLTypeReference</code> as desired to reference\ngraph types by name.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// create the graph types</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> queryType <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ObjectGraphType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Query\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> widgetType <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ObjectGraphType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Widget\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> manufacturerType <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ObjectGraphType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Manufacturer\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// define the fields</span>\nwidgetType<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Manufacturer\"</span><span class=\"token punctuation\">,</span> manufacturerType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmanufacturerType<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Widgets\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ListGraphType</span><span class=\"token punctuation\">(</span>widgetType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nqueryType<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Widgets\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ListGraphType</span><span class=\"token punctuation\">(</span>widgetType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nqueryType<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Manufacturers\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ListGraphType</span><span class=\"token punctuation\">(</span>manufactuerType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create the schema</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> schema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nschema<span class=\"token punctuation\">.</span>Query <span class=\"token operator\">=</span> queryType<span class=\"token punctuation\">;</span></code></pre></div>","fields":{"relativePath":"docs/guides/known-issues.md"}},"site":{"siteMetadata":{"githubEditUrl":"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site"}}},"pageContext":{"relativePath":"docs/guides/known-issues.md"}},"staticQueryHashes":["3402777086"],"slicesMap":{}}