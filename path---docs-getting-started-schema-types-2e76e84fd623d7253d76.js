webpackJsonp([0xb80a3c40d65c],{329:function(n,a){n.exports={data:{markdownRemark:{html:'<h1 id="schema-types"><a href="#schema-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Schema Types</h1>\n<h2 id="scalars"><a href="#scalars" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Scalars</h2>\n<p>A GraphQL object type has a name and fields, but at some point those fields have to resolve\nto some concrete data. That\'s where the scalar types come in: they represent the leaves of the query.</p>\n<p>These are the scalars provided by the <a href="https://graphql.github.io/graphql-spec/June2018/#sec-Scalars">GraphQL Specification</a>.</p>\n<table>\n<thead>\n<tr>\n<th>GraphQL</th>\n<th>GraphQL.NET</th>\n<th>.NET</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class="language-text">String</code></td>\n<td><code class="language-text">StringGraphType</code></td>\n<td><code class="language-text">string</code></td>\n</tr>\n<tr>\n<td><code class="language-text">Int</code></td>\n<td><code class="language-text">IntGraphType</code></td>\n<td><code class="language-text">int</code></td>\n</tr>\n<tr>\n<td><code class="language-text">Float</code></td>\n<td><code class="language-text">FloatGraphType</code></td>\n<td><code class="language-text">double</code></td>\n</tr>\n<tr>\n<td><code class="language-text">Boolean</code></td>\n<td><code class="language-text">BooleanGraphType</code></td>\n<td><code class="language-text">bool</code></td>\n</tr>\n<tr>\n<td><code class="language-text">ID</code></td>\n<td><code class="language-text">IdGraphType</code></td>\n<td><code class="language-text">int</code>\n, \n<code class="language-text">long</code>\n, \n<code class="language-text">string</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Note that you can use a <code class="language-text">Guid</code> with <code class="language-text">ID</code>.  It will just be serialized to a <code class="language-text">string</code> and\nshould be sent to your GraphQL Server as a <code class="language-text">string</code>.</p>\n</blockquote>\n<p>These are additional scalars provided by this project.</p>\n<table>\n<thead>\n<tr>\n<th>GraphQL</th>\n<th>GraphQL.NET</th>\n<th>.NET</th>\n<th>Format</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class="language-text">Date</code></td>\n<td><code class="language-text">DateGraphType</code></td>\n<td><code class="language-text">DateTime</code></td>\n<td>ISO-8601: yyyy-MM-dd</td>\n</tr>\n<tr>\n<td><code class="language-text">DateTime</code></td>\n<td><code class="language-text">DateTimeGraphType</code></td>\n<td><code class="language-text">DateTime</code></td>\n<td>ISO-8601, assume UTC</td>\n</tr>\n<tr>\n<td><code class="language-text">DateTimeOffset</code></td>\n<td><code class="language-text">DateTimeOffsetGraphType</code></td>\n<td><code class="language-text">DateTimeOffset</code></td>\n<td>ISO-8601</td>\n</tr>\n<tr>\n<td><code class="language-text">Seconds</code></td>\n<td><code class="language-text">TimeSpanSecondsGraphType</code></td>\n<td><code class="language-text">TimeSpan</code></td>\n<td>number</td>\n</tr>\n<tr>\n<td><code class="language-text">Milliseconds</code></td>\n<td><code class="language-text">TimeSpanMillisecondsGraphType</code></td>\n<td><code class="language-text">TimeSpan</code></td>\n<td>number</td>\n</tr>\n<tr>\n<td><code class="language-text">Decimal</code></td>\n<td><code class="language-text">DecimalGraphType</code></td>\n<td><code class="language-text">decimal</code></td>\n<td>number</td>\n</tr>\n<tr>\n<td><code class="language-text">Uri</code></td>\n<td><code class="language-text">UriGraphType</code></td>\n<td><code class="language-text">Uri</code></td>\n<td>RFC 2396/2732/3986/3987</td>\n</tr>\n<tr>\n<td><code class="language-text">Guid</code></td>\n<td><code class="language-text">GuidGraphType</code></td>\n<td><code class="language-text">Guid</code></td>\n<td>string</td>\n</tr>\n<tr>\n<td><code class="language-text">Short</code></td>\n<td><code class="language-text">ShortGraphType</code></td>\n<td><code class="language-text">short</code></td>\n<td>number</td>\n</tr>\n<tr>\n<td><code class="language-text">UShort</code></td>\n<td><code class="language-text">UShortGraphType</code></td>\n<td><code class="language-text">ushort</code></td>\n<td>number</td>\n</tr>\n<tr>\n<td><code class="language-text">UInt</code></td>\n<td><code class="language-text">UIntGraphType</code></td>\n<td><code class="language-text">uint</code></td>\n<td>number</td>\n</tr>\n<tr>\n<td><code class="language-text">Long</code></td>\n<td><code class="language-text">LongGraphType</code></td>\n<td><code class="language-text">long</code></td>\n<td>number</td>\n</tr>\n<tr>\n<td><code class="language-text">ULong</code></td>\n<td><code class="language-text">ULongGraphType</code></td>\n<td><code class="language-text">ulong</code></td>\n<td>number</td>\n</tr>\n<tr>\n<td><code class="language-text">Byte</code></td>\n<td><code class="language-text">ByteGraphType</code></td>\n<td><code class="language-text">byte</code></td>\n<td>number</td>\n</tr>\n<tr>\n<td><code class="language-text">SByte</code></td>\n<td><code class="language-text">SByteGraphType</code></td>\n<td><code class="language-text">sbyte</code></td>\n<td>number</td>\n</tr>\n<tr>\n<td><code class="language-text">BigInt</code></td>\n<td><code class="language-text">BigIntGraphType</code></td>\n<td><code class="language-text">BigInteger</code></td>\n<td>number</td>\n</tr>\n</tbody>\n</table>\n<p>Lists of data are also supported with any Scalar or Object types.</p>\n<table>\n<thead>\n<tr>\n<th>GraphQL</th>\n<th>GraphQL.NET</th>\n<th>.NET</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class="language-text">[String]</code></td>\n<td><code class="language-text">ListGraphType&lt;StringGraphType&gt;</code></td>\n<td><code class="language-text">List&lt;string&gt;</code></td>\n</tr>\n<tr>\n<td><code class="language-text">[Boolean]</code></td>\n<td><code class="language-text">ListGraphType&lt;BooleanGraphType&gt;</code></td>\n<td><code class="language-text">List&lt;bool&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id="objects"><a href="#objects" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Objects</h2>\n<p>Objects are composed of scalar types and other objects.</p>\n<p><strong>GraphQL</strong></p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token keyword">type</span> <span class="token class-name">Droid</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">name</span><span class="token punctuation">:</span> String\n  <span class="token attr-name">appearsIn</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Episode<span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>GraphQL.NET</strong></p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DroidType</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ObjectGraphType<span class="token punctuation">&lt;</span>Droid<span class="token punctuation">></span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">DroidType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Name <span class="token operator">=</span> <span class="token string">"Droid"</span><span class="token punctuation">;</span>\n        Description <span class="token operator">=</span> <span class="token string">"A mechanical creature in the Star Wars universe."</span><span class="token punctuation">;</span>\n        <span class="token function">Field</span><span class="token punctuation">(</span>d <span class="token operator">=></span> d<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token named-parameter punctuation">nullable</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Description</span><span class="token punctuation">(</span><span class="token string">"The name of the droid."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token generic-method"><span class="token function">Field</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ListGraphType<span class="token punctuation">&lt;</span>EpisodeEnum<span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"appearsIn"</span><span class="token punctuation">,</span> <span class="token string">"Which movie they appear in."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>.NET</strong></p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Droid</span>\n<span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Episode<span class="token punctuation">></span></span> AppearsIn <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="enumerations"><a href="#enumerations" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Enumerations</h2>\n<p>Enumerations, or enums, define a finite set of discrete values. Like scalars, they represent a leaf in the query.</p>\n<p><strong>GraphQL</strong></p>\n<p>This enum defines the first three Star Wars films using GraphQL schema language:</p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token keyword">enum</span> <span class="token class-name">Episode</span> <span class="token punctuation">{</span>\n  <span class="token constant">NEWHOPE</span>\n  <span class="token constant">EMPIRE</span>\n  <span class="token constant">JEDI</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>.NET</strong></p>\n<p>Consider the equivalent <code class="language-text">enum</code> in .NET:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Episodes</span>\n<span class="token punctuation">{</span>\n    NEWHOPE <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    EMPIRE <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>\n    JEDI <span class="token operator">=</span> <span class="token number">6</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Compare the two implementations. GraphQL does not specify backing values for members of its enums.\nThe name of each member <em>is</em> the value.</p>\n<p><strong>GraphQL.NET</strong></p>\n<p>GraphQL.NET provides two methods of defining GraphQL enums.</p>\n<p>You can use <code class="language-text">EnumerationGraphType&lt;TEnum&gt;</code> to automatically generate values by providing a .NET\n<code class="language-text">enum</code> for <code class="language-text">TEnum</code>. The <code class="language-text">Name</code> will default to the .NET Type name, which you can override in\nthe constructor. The <code class="language-text">Description</code> will default to any <code class="language-text">System.ComponentModel.DescriptionAttribute</code>\napplied to the enum type. The <code class="language-text">DeprecationReason</code> will default to any <code class="language-text">System.ObsoleteAttribute</code>\napplied to the enum type. By default, the name of each enum member will be converted to CONSTANT_CASE.\nOverride <code class="language-text">ChangeEnumCase</code> to change this behavior. Apply a <code class="language-text">DescriptionAttribute</code> to an enum member\nto set the GraphQL <code class="language-text">Description</code>. Apply an <code class="language-text">ObsoleteAttribute</code> to an enum member to set the GraphQL\n<code class="language-text">DeprecationReason</code>.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"The Star Wars movies."</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Obsolete</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Optional. Sets the GraphQL DeprecationReason for the whole enum."</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Episodes</span>\n<span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Episode 1: The Phantom Menace"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Obsolete</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Optional. Sets the GraphQL DeprecationReason for this member."</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n    PHANTOMMENACE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n\n    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Episode 4: A New Hope"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n    NEWHOPE  <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>\n\n    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Episode 5: The Empire Strikes Back"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n    EMPIRE  <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>\n\n    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Episode 6: Return of the Jedi"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n    JEDI  <span class="token operator">=</span> <span class="token number">6</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EpisodeEnum</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EnumerationGraphType<span class="token punctuation">&lt;</span>Episodes<span class="token punctuation">></span></span></span>\n<span class="token punctuation">{</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>When defining a field via an expression syntax as in the following example, GraphQL.NET\nwill automatically map enumeration types to <code class="language-text">EnumerationGraphType&lt;TEnum&gt;</code>, unless otherwise\nmapped via <code class="language-text">Schema.RegisterTypeMapping</code>:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token function">Field</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x<span class="token punctuation">.</span>MyEnum<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>You can also manually create the <code class="language-text">EnumerationGraphType</code>. Advantages of this method:</p>\n<ul>\n<li>The GraphQL enum need not map to a specific .NET <code class="language-text">enum</code>. You could, for instance, build the enum from one of the alternate methods of defining discrete sets of values in .NET, such as classes of constants or static properties.</li>\n<li>You can manually add descriptions and deprecation reasons. This may be useful if you do not control the source code for the enum.</li>\n<li>Backing enum values may be of any type, primitive or not.</li>\n</ul>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EpisodeEnum</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EnumerationGraphType</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">EpisodeEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Name <span class="token operator">=</span> <span class="token string">"Episode"</span><span class="token punctuation">;</span>\n        Description <span class="token operator">=</span> <span class="token string">"One of the films in the Star Wars Trilogy."</span><span class="token punctuation">;</span>\n        <span class="token function">AddValue</span><span class="token punctuation">(</span><span class="token string">"NEWHOPE"</span><span class="token punctuation">,</span> <span class="token string">"Released in 1977."</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">AddValue</span><span class="token punctuation">(</span><span class="token string">"EMPIRE"</span><span class="token punctuation">,</span> <span class="token string">"Released in 1980."</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">AddValue</span><span class="token punctuation">(</span><span class="token string">"JEDI"</span><span class="token punctuation">,</span> <span class="token string">"Released in 1983."</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Note that although GraphQL has no use for backing values for enum members, GraphQL.NET uses\nthem anyway. This allows for a more natural mapping to .NET <code class="language-text">enum</code>s or other collections of\nconstants, and avoids coupling your business logic to GraphQL semantics. The backing values\nare strictly for use on the back end - the client will never see them.</p>\n<p><strong>Resolving Enumerations</strong></p>\n<p>Fields typed as enumerations are resolved by returning the backing value of\none of the enum members. Lists of enumerations are resolved by returning collections of enum\nmembers. In the below examples, notice the identical implementations of the <code class="language-text">appearsIn</code> field\nfor both human graph types. In both implementations, the client receives the GraphQL enum member\nnames in response to queries on the <code class="language-text">appearsIn</code> field.</p>\n<p>If the field resolves a value which cannot be mapped to one of the enum\'s legal values,\nGraphQL.NET will trigger a <a href="errors#ProcessingErrors">Processing Error</a>.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HumanString</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">//i.e. "NEWHOPE", "EMPIRE", "JEDI"</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> AppearsIn <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HumanStringType</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ObjectGraphType<span class="token punctuation">&lt;</span>HumanString<span class="token punctuation">></span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">HumanStringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Name <span class="token operator">=</span> <span class="token string">"HumanString"</span><span class="token punctuation">;</span>\n        <span class="token generic-method"><span class="token function">Field</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ListGraphType<span class="token punctuation">&lt;</span>EpisodeEnum<span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"appearsIn"</span><span class="token punctuation">,</span> <span class="token string">"Which movie they appear in."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HumanInt</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">//i.e. 4, 5, 6</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> AppearsIn <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HumanIntType</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ObjectGraphType<span class="token punctuation">&lt;</span>HumanInt<span class="token punctuation">></span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">HumanIntType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Name <span class="token operator">=</span> <span class="token string">"HumanInt"</span><span class="token punctuation">;</span>\n        <span class="token generic-method"><span class="token function">Field</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ListGraphType<span class="token punctuation">&lt;</span>EpisodeEnum<span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"appearsIn"</span><span class="token punctuation">,</span> <span class="token string">"Which movie they appear in."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>Enumeration Arguments</strong></p>\n<p>Enumerations can be used as arguments in GraphQL queries. Consider a query which gets the humans appearing in a specific film:</p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token keyword">query</span> HumansAppearingIn<span class="token punctuation">(</span><span class="token variable">$episode</span><span class="token punctuation">:</span> Episode<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    humans<span class="token punctuation">(</span><span class="token attr-name">appearsIn</span><span class="token punctuation">:</span> <span class="token variable">$episode</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        id\n        name\n        appearsIn\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment"># example query variables:</span>\n<span class="token comment"># {</span>\n<span class="token comment">#   "episode":"NEWHOPE"</span>\n<span class="token comment"># }</span></code></pre>\n      </div>\n<p>When GraphQL.NET receives an enum member name as a query argument, the queried field\'s\n<code class="language-text">ResolveFieldContext</code> stores the backing value associated with the enum member name\nin its arguments list. The GraphQL.NET query type which handles the example query may\nbe implemented as:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StarWarsQuery</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ObjectGraphType<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">></span></span></span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token function">StarWarsQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            Name <span class="token operator">=</span> <span class="token string">"Query"</span><span class="token punctuation">;</span>\n\n            <span class="token generic-method"><span class="token function">Field</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ListGraphType<span class="token punctuation">&lt;</span>HumanType<span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span>\n                <span class="token string">"humans"</span><span class="token punctuation">,</span>\n                <span class="token named-parameter punctuation">arguments</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryArguments</span><span class="token punctuation">(</span>\n                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryArgument<span class="token punctuation">&lt;</span>NonNullGraphType<span class="token punctuation">&lt;</span>EpisodeEnum<span class="token punctuation">></span><span class="token punctuation">></span></span>\n                        <span class="token punctuation">{</span> \n                            Name <span class="token operator">=</span> <span class="token string">"appearsIn"</span><span class="token punctuation">,</span> \n                            Description <span class="token operator">=</span> <span class="token string">"An episode the human appears in."</span> \n                        <span class="token punctuation">}</span>\n                <span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token named-parameter punctuation">resolve</span><span class="token punctuation">:</span> context <span class="token operator">=></span> \n                <span class="token punctuation">{</span>\n                    <span class="token comment">// episode = 4</span>\n                    <span class="token class-name"><span class="token keyword">var</span></span> episode <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetArgument</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"appearsIn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                    <span class="token comment">// Alternatively, get the argument as an enum. episodeFromEnum = Episodes.NEWHOPE</span>\n                    <span class="token class-name"><span class="token keyword">var</span></span> episodeFromEnum <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetArgument</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Episodes<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"appearsIn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                    <span class="token comment">// full implementation would access data store to get humans by episode.</span>\n                    <span class="token keyword">return</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token type-expression class-name">Human</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="type-mapping"><a href="#type-mapping" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Type Mapping</h2>\n<p>When specifying a field using the shortcut syntax <code class="language-text">Field(x =&gt; x.Parent)</code>, which does not specify\na specific graph type, GraphQL.NET will first look at the data model to see if it has a <code class="language-text">GraphQLMetadata</code>\nattribute specified on it indicating the graph type to use for the data model. For instance, you can\nspecify the graph type for a <code class="language-text">Widget</code> class in the following manner:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">GraphQLMetadata</span><span class="token punctuation">(</span>InputType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">WidgetInputGraphType</span><span class="token punctuation">)</span><span class="token punctuation">,</span> OutputType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">WidgetGraphType</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Widget</span>\n<span class="token punctuation">{</span>\n    <span class="token range operator">..</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>If no attribute is specified on the type, it will search a list of CLR mappings to graph type classes.\nAll of the intrinsic and supplemental scalar graph types included with GraphQL.NET will be searched,\nand lists are handled automatically as well.</p>\n<p>You can also specify additional mappings during the schema initialization, which will be searched\nwhen the schema is initialized. These mappings can be for input objects, output objects, or scalars.\nA single CLR type can be mapped separately for both input and output objects.</p>\n<p>You can override default mappings of built-in scalars by registering your own mapping.\nTo add a mapping, call the <code class="language-text">RegisterTypeMapping</code> method on the <code class="language-text">Schema</code>. Below is a sample of how\nto add mappings:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySchema</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MySchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token range operator">..</span><span class="token punctuation">.</span>\n\n        <span class="token comment">// For output graphs, map the \'User\' data model class to the output object graph type \'UserGraphType\'</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterTypeMapping</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">,</span> UserGraphType<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// For input graphs, map the \'User\' data model class to the input object graph type \'UserInputGraphType\'</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterTypeMapping</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">,</span> UserInputGraphType<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// For input or output graphs, map the \'Vector\' class/struct to the scalar graph type \'VectorGraphType\'</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterTypeMapping</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Vector<span class="token punctuation">,</span> VectorGraphType<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Override Guid default mapping to use the custom scalar graph type \'MyGuidGraphType\'</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterTypeMapping</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Guid<span class="token punctuation">,</span> MyGuidGraphType<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>There is no limitation on the CLR type of registered mappings -- for instance, scalar graph types\ncan map to .NET objects or value types such as structs. However, mapping a list type such as <code class="language-text">byte[]</code>\nis not supported, as the GraphQL.NET infrastructure will change this into a list graph type\nautomatically and only search the registered mappings for a registration for <code class="language-text">byte</code>.</p>\n<p>In order to implement these type mappings, GraphQL.NET will build the field or argument using a\npseudo-type of either <code class="language-text">GraphQLClrOutputTypeReference&lt;T&gt;</code> or <code class="language-text">GraphQLClrInputTypeReference&lt;T&gt;</code>.\nThese are resolved automatically during schema initialization. If you are writing your own field\nbuilders, you may use these pseudo-graphtype classes as placeholders for .NET-type-mapped fields\nor arguments.</p>\n<h2 id="type-references"><a href="#type-references" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Type references</h2>\n<p>If you are writing your own dynamic schema-builder or field-builder code, you may have a need to\nhave a placeholder graph type that is resolved during schema initialization. There are three type\nreference types available for this purpose:</p>\n<ul>\n<li><code class="language-text">GraphQLTypeReference</code> can be used as a placeholder for another named graph type within the schema.</li>\n<li><code class="language-text">GraphQLClrOutputTypeReference&lt;T&gt;</code> can be used as a placeholder for a CLR-mapped output graph type.</li>\n<li><code class="language-text">GraphQLClrInputTypeReference&lt;T&gt;</code> can be used as a placeholder for a CLR-mapped input graph type.</li>\n</ul>\n<p>These type references will be resolved during schema initialization. Please refer to the source\ncode for implementation and usage details.</p>',
fields:{relativePath:"docs/getting-started/schema-types.md"}},site:{siteMetadata:{githubEditUrl:"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site"}}},pathContext:{relativePath:"docs/getting-started/schema-types.md"}}}});
//# sourceMappingURL=path---docs-getting-started-schema-types-2e76e84fd623d7253d76.js.map