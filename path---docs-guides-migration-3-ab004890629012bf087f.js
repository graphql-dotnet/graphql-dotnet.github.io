webpackJsonp([39579220229295],{318:function(n,a){n.exports={data:{markdownRemark:{html:'<h1 id="migrating-from-v2x-to-v3x"><a href="#migrating-from-v2x-to-v3x" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Migrating from v2.x to v3.x</h1>\n<h2 id="new-features"><a href="#new-features" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>New Features</h2>\n<h3 id="support-for-additional-scalar-types-and-conversions-built-in"><a href="#support-for-additional-scalar-types-and-conversions-built-in" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Support for additional scalar types and conversions built-in</h3>\n<p>These .Net types now are automatically mapped to corresponding built-in custom scalar types:</p>\n<ul>\n<li>Byte</li>\n<li>SByte</li>\n<li>Short</li>\n<li>UShort</li>\n<li>UInt</li>\n<li>ULong</li>\n<li>Guid (maps to <code class="language-text">IdGraphType</code> by default; also supports <code class="language-text">GuidGraphType</code>)</li>\n<li>BigInt</li>\n</ul>\n<p>There is also support for converting base-64 encoded strings to byte arrays. See\nthe <a href="known-issues#can-custom-scalars-serialize-non-null-data-to-a-null-value-and-vice-versa">FAQ</a>\nand the <code class="language-text">ValueConverter</code> class for more details.</p>\n<p>See <a href="https://graphql-dotnet.github.io/docs/getting-started/schema-types">Schema Types</a> for more details.</p>\n<h3 id="other-new-features"><a href="#other-new-features" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Other new features</h3>\n<ul>\n<li>Based on .Net Standard 2.0, supporting .Net Core applications</li>\n<li>Supports scoped services (see below under <a href="#dependency-injection">Dependency Injection</a>)</li>\n<li>Supports the <code class="language-text">System.Text.Json</code> package for JSON serialization, in addition to the <code class="language-text">Newtonsoft.Json</code> package</li>\n<li>Data loaders work with serial execution strategies and can be chained together</li>\n<li>Name converters can be configured to use a different function for field names versus argument names</li>\n<li>Field builders can take an optional configuration action parameter</li>\n<li>Support for auto-registering input object graph types via <code class="language-text">AutoRegisteringInputObjectGraphType</code></li>\n<li>Added codes to <code class="language-text">ExecutionError</code>s</li>\n<li>Document processing exceptions can be logged or modified (see below under <a href="#exception-handling">Exception Handling</a>)</li>\n<li>Enhanced validation of graphs built-in</li>\n<li>Supports filtering of schema introspection requests - see details <a href="https://github.com/graphql-dotnet/graphql-dotnet/pull/1179">here</a></li>\n<li>Supports federated schemas - see details <a href="https://github.com/graphql-dotnet/graphql-dotnet/pull/1233">here</a></li>\n<li>Supports schema \'description\' property - see details <a href="https://github.com/graphql-dotnet/graphql-dotnet/pull/1613">here</a></li>\n<li>Supports comment nodes - see details <a href="https://github.com/graphql-dotnet/graphql-dotnet/pull/1617">here</a></li>\n<li>Supports result \'extensions\' - see details <a href="https://github.com/graphql-dotnet/graphql-dotnet/pull/1611">here</a></li>\n<li>Ability to limit maximum number of asynchronous field resolvers executing simultaneously - see details <a href="https://github.com/graphql-dotnet/graphql-dotnet/issues/1239">here</a></li>\n</ul>\n<h2 id="breaking-changes"><a href="#breaking-changes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Breaking Changes</h2>\n<h3 id="net-compatibility"><a href="#net-compatibility" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>.NET compatibility</h3>\n<p>This project now requires the .NET Standard 2.0 and breaks compatibility with applications based on\n.NET Framework 4.6 and earlier. See <a href="https://docs.microsoft.com/en-us/dotnet/standard/net-standard">https://docs.microsoft.com/en-us/dotnet/standard/net-standard</a> for a list of\nframeworks that support .Net Standard 2.0.</p>\n<h3 id="dependency-injection"><a href="#dependency-injection" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dependency Injection</h3>\n<p>The previous <code class="language-text">IDependencyResolver</code> interface and <code class="language-text">FuncDependencyResolver</code> class have been replaced by the\n.Net Standard <code class="language-text">IServiceProvider</code> interface and the new <code class="language-text">FuncServiceProvider</code> class.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">//public Schema(IDependencyResolver dependencyResolver)</span>\n<span class="token keyword">public</span> <span class="token function">Schema</span><span class="token punctuation">(</span><span class="token class-name">IServiceProvider</span> serviceProvider<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n  <span class="token range operator">..</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Also, the <code class="language-text">Schema.DependencyResolver</code> property has been removed and not replaced. If you need to access the service provider\nfrom your graphs, you can include <code class="language-text">IServiceProvider</code> in the constructor of the graph type. Your DI container will pass\na reference to the service provider. For singleton schemas, this will be the root service provider, from which you can\nobtain other singleton or transient services. For scoped schemas with scoped graph types, this will be the service provider\nfor the current executing scope. Casting <code class="language-text">Schema</code> to <code class="language-text">IServiceProvider</code> is also possible, but not recommended, and will\nyield similar results.</p>\n<p>If you wish to access a scoped service from within a resolver and want to use a singleton schema (as is recommended), you\ncan pass a scoped service provider to <code class="language-text">ExecutionOptions.RequestServices</code>, which can then be used to resolve scoped\nservices. For ASP.NET Core projects, you can set this equal to <code class="language-text">HttpContext.RequestServices</code>. Be aware that if you\nare using a parallel execution strategy (default for \'query\' requests), using scoped services within field resolvers can\nintroduce thread safety issues; you may need to use a serial execution strategy or manually create a scope within each\nfield resolver.</p>\n<p>See the <a href="https://graphql-dotnet.github.io/docs/getting-started/dependency-injection">Dependency Injection documentation</a> for\nmore details, including service lifetime guidelines and restrictions when registering your schema and graph types.</p>\n<h3 id="json-parsing-and-serialization"><a href="#json-parsing-and-serialization" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Json parsing and serialization</h3>\n<p>Version 2.x relied on the Newtonsoft.Json library for parsing of input variables and serialization of response data.\nAs the Newtonsoft.Json dependency has now been removed, a third-party library will be required within your application\nto parse and serialize json data. The <a href="https://www.nuget.org/packages/GraphQL.SystemTextJson/">GraphQL.SystemTextJson</a> and\n<a href="https://www.nuget.org/packages/GraphQL.NewtonsoftJson/">GraphQL.NewtonsoftJson</a> nuget packages include the necessary\ncomponents to assist in this regard. Below are examples of the changes required:</p>\n<p>Version 2.x sample, using the Newtonsoft.Json converter:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">Newtonsoft<span class="token punctuation">.</span>Json</span><span class="token punctuation">;</span>\n\n<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ISchema</span> schema<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name">GraphQLRequest</span> request<span class="token punctuation">;</span>\n    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> jsonReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonTextReader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> ser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        request <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GraphQLRequest<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>jsonReader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token class-name"><span class="token keyword">var</span></span> executer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DocumentExecuter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> executer<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>options <span class="token operator">=></span>\n    <span class="token punctuation">{</span>\n        options<span class="token punctuation">.</span>Schema <span class="token operator">=</span> schema<span class="token punctuation">;</span>\n        options<span class="token punctuation">.</span>Query <span class="token operator">=</span> request<span class="token punctuation">.</span>Query<span class="token punctuation">;</span>\n        options<span class="token punctuation">.</span>OperationName <span class="token operator">=</span> request<span class="token punctuation">.</span>OperationName<span class="token punctuation">;</span>\n        options<span class="token punctuation">.</span>Inputs <span class="token operator">=</span> request<span class="token punctuation">.</span>Variables<span class="token punctuation">.</span><span class="token function">ToInputs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">"application/json"</span><span class="token punctuation">;</span>\n    context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> result<span class="token punctuation">.</span>Errors<span class="token punctuation">?.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">?</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>HttpStatusCode<span class="token punctuation">.</span>BadRequest <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">;</span>\n\n    <span class="token class-name"><span class="token keyword">var</span></span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GraphQL<span class="token punctuation">.</span>Http<span class="token punctuation">.</span>DocumentWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Body<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GraphQLRequest</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> OperationName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Query <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">Newtonsoft<span class="token punctuation">.</span>Json<span class="token punctuation">.</span>Linq<span class="token punctuation">.</span>JObject</span> Variables <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Version 3.0 sample, using the System.Text.Json converter:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Json</span><span class="token punctuation">;</span>\n\n<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ISchema</span> schema<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">await</span> JsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GraphQLRequest<span class="token punctuation">></span></span></span>\n    <span class="token punctuation">(</span>\n        context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">,</span>\n        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerOptions</span> <span class="token punctuation">{</span> PropertyNameCaseInsensitive <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name"><span class="token keyword">var</span></span> executer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DocumentExecuter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> executer<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>options <span class="token operator">=></span>\n    <span class="token punctuation">{</span>\n        options<span class="token punctuation">.</span>Schema <span class="token operator">=</span> schema<span class="token punctuation">;</span>\n        options<span class="token punctuation">.</span>Query <span class="token operator">=</span> request<span class="token punctuation">.</span>Query<span class="token punctuation">;</span>\n        options<span class="token punctuation">.</span>OperationName <span class="token operator">=</span> request<span class="token punctuation">.</span>OperationName<span class="token punctuation">;</span>\n        options<span class="token punctuation">.</span>Inputs <span class="token operator">=</span> request<span class="token punctuation">.</span>Variables<span class="token punctuation">.</span><span class="token function">ToInputs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">"application/json"</span><span class="token punctuation">;</span>\n    context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\n\n    <span class="token class-name"><span class="token keyword">var</span></span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GraphQL<span class="token punctuation">.</span>SystemTextJson<span class="token punctuation">.</span>DocumentWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Body<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GraphQLRequest</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> OperationName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Query <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonConverter</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">GraphQL<span class="token punctuation">.</span>SystemTextJson<span class="token punctuation">.</span>ObjectDictionaryConverter</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">></span></span> Variables <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>This is just a simplified example of the changes necessary. Note that typically the <code class="language-text">DocumentExecuter</code> and <code class="language-text">DocumentWriter</code>\nare registered as singletons within the dependency injection container, as they can safely be shared between requests.</p>\n<p>If you continue to use the <code class="language-text">Newtonsoft.Json</code> converter, please note that ASP.NET Core 3.0 disallows synchronous IO by default,\nwhich is required by the converter. You will need to make a change in the <code class="language-text">ConfigureServices</code> section of <code class="language-text">Startup.cs</code> as\nfollows:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// kestrel</span>\nservices<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>KestrelServerOptions<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>options <span class="token operator">=></span>\n<span class="token punctuation">{</span>\n    options<span class="token punctuation">.</span>AllowSynchronousIO <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// IIS</span>\nservices<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IISServerOptions<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>options <span class="token operator">=></span>\n<span class="token punctuation">{</span>\n    options<span class="token punctuation">.</span>AllowSynchronousIO <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Please note that if you use a <code class="language-text">NameConverter</code> other than the default <code class="language-text">CamelCaseNameConverter</code>, you may need to configure\nyour json serializer also to not convert object properties to camel case. For example, with the <code class="language-text">System.Text.Json</code> converter,\nyou need to set <code class="language-text">JsonSerializerOptions.PropertyNamingPolicy = null;</code> as follows:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GraphQL<span class="token punctuation">.</span>SystemTextJson<span class="token punctuation">.</span>DocumentWriter</span><span class="token punctuation">(</span>options <span class="token operator">=></span> <span class="token punctuation">{</span>\n    options<span class="token punctuation">.</span>PropertyNamingPolicy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="usercontext"><a href="#usercontext" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>UserContext</h3>\n<p>The definition of the <code class="language-text">UserContext</code> object throughout the library has changed to a <code class="language-text">IDictionary&lt;string, object&gt;</code>.\nCustom user context classes will need to inherit from <code class="language-text">Dictionary&lt;string, object&gt;</code> or otherwise support the interface.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">//class MyContext</span>\n<span class="token keyword">class</span> <span class="token class-name">MyContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">></span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">DbContext</span> MyDbContext <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>If you are going to use GraphQL.NET in an ASP.NET Core application, then you may be interested in the\n<a href="https://github.com/graphql-dotnet/server">server</a> project. It already implements all the necessary integration\nwith GraphQL.NET via the custom ASP.NET Core middleware.</p>\n<h3 id="document-listeners"><a href="#document-listeners" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Document Listeners</h3>\n<p>The <code class="language-text">DocumentExecutionListenerBase&lt;T&gt;</code> class and <code class="language-text">IDocumentExecutionListener&lt;T&gt;</code> interface have been removed;\nplease implement the <code class="language-text">IDocumentExecutionListener</code> interface when creating a custom document listener. You\ncan also inherit from the <code class="language-text">DocumentExecutionListenerBase</code> class to provide default implementations of events.</p>\n<p>The methods definitions have also changed from passing <code class="language-text">userContext</code> and <code class="language-text">cancellationToken</code> parameters to a\nsingle parameter <code class="language-text">context</code> of type <code class="language-text">IExecutionContext</code>. The context has properties for accessing the user context,\ncancellation token, metrics, execution errors, and other information about the executing request.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">//class MyListener : DocumentExecutionListenerBase&lt;MyContext></span>\n<span class="token keyword">class</span> <span class="token class-name">MyListener</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DocumentExecutionListenerBase</span></span>\n<span class="token punctuation">{</span>\n    <span class="token comment">//public virtual Task AfterValidationAsync(MyContext userContext, IValidationResult validationResult, CancellationToken token)</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">AfterValidationAsync</span><span class="token punctuation">(</span><span class="token class-name">IExecutionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">IValidationResult</span> validationResult<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> myContext <span class="token operator">=</span> <span class="token punctuation">(</span>MyContext<span class="token punctuation">)</span>context<span class="token punctuation">.</span>userContext<span class="token punctuation">;</span>\n\n        <span class="token comment">// log validation error</span>\n\n        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token range operator">..</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="iresolvefieldcontext-and-iresolveconnectioncontext"><a href="#iresolvefieldcontext-and-iresolveconnectioncontext" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>IResolveFieldContext and IResolveConnectionContext</h3>\n<p>Field resolver methods now pass a reference to an <code class="language-text">IResolveFieldContext</code> interface, rather than a\n<code class="language-text">ResolveFieldContext</code> class. Inline lambda functions are typically unaffected, but if you define your\nresolvers separately, you will need to change the function signature.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyGraphType</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ObjectGraphType</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">MyGraphType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">Field</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">resolve</span><span class="token punctuation">:</span> x <span class="token operator">=></span> <span class="token string">"John Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">Field</span><span class="token punctuation">(</span><span class="token string">"Children"</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">resolve</span><span class="token punctuation">:</span> GetChildren<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//public IEnumerable&lt;string> GetChildren(ResolveFieldContext context)</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">GetChildren</span><span class="token punctuation">(</span><span class="token class-name">IResolveFieldContext</span> context<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"Jill"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Also please note that all <code class="language-text">IResolveFieldContext</code> and similar interfaces and classes have moved from\nthe <code class="language-text">GraphQL.Types</code> namespace to the <code class="language-text">GraphQL</code> namespace. You may need to add a <code class="language-text">using GraphQL;</code>\nstatement to some of your files.</p>\n<h3 id="connection-builders"><a href="#connection-builders" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Connection Builders</h3>\n<p>The connection builders have changed slightly. Please see <a href="https://graphql-dotnet.github.io/docs/getting-started/relay">https://graphql-dotnet.github.io/docs/getting-started/relay</a> for current implementation details.</p>\n<h3 id="field-middleware"><a href="#field-middleware" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Field Middleware</h3>\n<p>Field Middleware must be registered in the dependency injection container in order to be instantiated.\nYou also need to implement the <code class="language-text">IFieldMiddleware</code> interface on your custom middleware classes, and change\nthe signature for the <code class="language-text">Resolve</code> method to accept <code class="language-text">IResolveFieldContext</code>.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">//class MyMiddleware</span>\n<span class="token keyword">class</span> <span class="token class-name">MyMiddleware</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IFieldMiddleware</span></span>\n<span class="token punctuation">{</span>\n    <span class="token comment">//public async Task&lt;object> Resolve(ResolveFieldContext context, FieldMiddlewareDelegate next)</span>\n    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">></span></span> <span class="token function">Resolve</span><span class="token punctuation">(</span><span class="token class-name">IResolveFieldContext</span> context<span class="token punctuation">,</span> <span class="token class-name">FieldMiddlewareDelegate</span> next<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// your code here</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> ret <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// your code here</span>\n        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Please note that the delegate definition for <code class="language-text">FieldMiddlewareDelegate</code> has changed as follows:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// version 2.4.0</span>\n<span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">></span></span> <span class="token function">FieldMiddlewareDelegate</span><span class="token punctuation">(</span><span class="token class-name">ResolveFieldContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// version 3.0</span>\n<span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">></span></span> <span class="token function">FieldMiddlewareDelegate</span><span class="token punctuation">(</span><span class="token class-name">IResolveFieldContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>You also must ensure that your schema implements <code class="language-text">IServiceProvider</code>. This is handled\nautomatically if you inherit from <code class="language-text">Schema</code>.</p>\n<p>See <a href="https://graphql-dotnet.github.io/docs/getting-started/field-middleware">Field Middleware</a> for more details,\nincluding guidelines and restrictions on service lifetimes of middleware registered through your DI framework.</p>\n<h3 id="data-loaders"><a href="#data-loaders" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Data Loaders</h3>\n<p>Data loaders now return an <code class="language-text">IDataLoaderResult&lt;T&gt;</code> rather than a <code class="language-text">Task&lt;T&gt;</code>. Field resolver signatures may need to change\nas a result. Lambda functions passed to field builders\' <code class="language-text">ResolveAsync</code> method should not need to change.</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderType</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ObjectGraphType<span class="token punctuation">&lt;</span>Order<span class="token punctuation">></span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IDataLoaderContextAccessor</span> _accessor<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IUsersStore</span> _users<span class="token punctuation">;</span>\n\n    <span class="token comment">// Inject the IDataLoaderContextAccessor to access the current DataLoaderContext</span>\n    <span class="token keyword">public</span> <span class="token function">OrderType</span><span class="token punctuation">(</span><span class="token class-name">IDataLoaderContextAccessor</span> accessor<span class="token punctuation">,</span> <span class="token class-name">IUsersStore</span> users<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        _accessor <span class="token operator">=</span> accessor<span class="token punctuation">;</span>\n        _users <span class="token operator">=</span> users<span class="token punctuation">;</span>\n\n        <span class="token range operator">..</span><span class="token punctuation">.</span>\n\n        <span class="token generic-method"><span class="token function">Field</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserType<span class="token punctuation">,</span> User<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">ResolveAsync</span><span class="token punctuation">(</span>ResolveUser<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//public Task&lt;User> ResolveUser(IResolveFieldContext context)</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">IDataLoaderResult<span class="token punctuation">&lt;</span>User<span class="token punctuation">></span></span> <span class="token function">ResolveUser</span><span class="token punctuation">(</span><span class="token class-name">IResolveFieldContext</span> context<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// Get or add a batch loader with the key "GetUsersById"</span>\n        <span class="token comment">// The loader will call GetUsersByIdAsync for each batch of keys</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> loader <span class="token operator">=</span> _accessor<span class="token punctuation">.</span>Context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetOrAddBatchLoader</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> User<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"GetUsersById"</span><span class="token punctuation">,</span> users<span class="token punctuation">.</span>GetUsersByIdAsync<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Add this UserId to the pending keys to fetch</span>\n        <span class="token comment">// The task will complete once the GetUsersByIdAsync() returns with the batched results</span>\n        <span class="token keyword">return</span> loader<span class="token punctuation">.</span><span class="token function">LoadAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Source<span class="token punctuation">.</span>UserId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>If you need to process the data loader result before it is returned, additional refactoring will need to be done.\nThe data loader also now supports chained data loaders, and asynchronous code prior to queuing the data loader. See\n<a href="https://graphql-dotnet.github.io/docs/getting-started/dataloader">Data loader documentation</a> for more details.</p>\n<h3 id="dategraphtype-parsing-changes"><a href="#dategraphtype-parsing-changes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DateGraphType parsing changes</h3>\n<p>In 2.x, the <code class="language-text">DateGraphType</code> will always serialize to a date in the format of <code class="language-text">yyyy-MM-dd</code>, ignoring any time\ncomponent of the <code class="language-text">DateTime</code> value. As an input type it would accept any date/time format accepted by the\n<code class="language-text">DateTime.Parse</code> method. This allowed for ambiguous dates such as \'09-10-2015\', which has a different meaning\ndepending on locale.</p>\n<p>In 3.x, the output date format has not changed, but will throw an error if the <code class="language-text">DateTime</code> value has a time\ncomponent. The input date format now only accepts a format of <code class="language-text">yyyy-MM-dd</code>. Any other format will trigger\nan input error. Note that the <code class="language-text">DateTime.Kind</code> property for returned dates is set to <code class="language-text">DateTimeKind.Utc</code>.</p>\n<h3 id="executionstrategy-changes"><a href="#executionstrategy-changes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ExecutionStrategy changes</h3>\n<p>If you utilize data loaders along with a custom implementation of <code class="language-text">IExecutionStrategy</code> (typically inheriting\nfrom <code class="language-text">ExecutionStrategy</code>), you must change the implementation to monitor for <code class="language-text">IDataLoaderResult</code> returned\nvalues, and execute <code class="language-text">GetResultAsync</code> at the appropriate time to retrieve the actual value asynchronously.\nIf the field resolver returns a <code class="language-text">Task&lt;IDataLoaderResult&gt;</code>, the execution strategy should start the task as\nusual, only queuing the data loader once the <code class="language-text">IDataLoaderResult</code> has been returned. Note that\n<code class="language-text">await IDataLoaderResult.GetResultAsync()</code> may return another <code class="language-text">IDataLoaderResult</code> which must again\nbe queued to execute at the proper time. Please refer to the reference implementation of <code class="language-text">ParallelExecutionStrategy</code>\nfor an example.</p>\n<h3 id="exception-handling"><a href="#exception-handling" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Exception Handling</h3>\n<p>Exceptions have been split into three categories: schema errors, input errors, and processing errors. For instance,\nif an invalid query was passed to the <code class="language-text">DocumentExecuter</code>, it would be considered an input error, and a <code class="language-text">SyntaxError</code>\nwould be thrown. Or if an invalid enum string was passed as a variable to a query, an <code class="language-text">InvalidValueError</code> would be\nthrown. All validation rules that fail their respective tests are treated as input errors.</p>\n<p>In 2.x, most schema errors would throw an exception of the <code class="language-text">ExecutionError</code> type. This has been changed; now\nthe thrown error is a native exception -- for instance, an <code class="language-text">ArgumentOutOfRange</code> exception would be thrown when\ntrying to add a field to a type with the same name as one that already exists. Many of these exceptions\noccur prior to executing a document; however, some occur during the schema initialization within the\n<code class="language-text">DocumentExecuter</code> and are then treated as processing errors.</p>\n<p>In 3.x, <code class="language-text">ExecutionError</code> (and derived classes) are returned directly from the <code class="language-text">DocumentExecuter</code> for parsing\nand validation errors (input errors). Field resolvers and middleware can also return input errors by\nthrowing an <code class="language-text">ExecutionError</code> exception.</p>\n<p>Processing errors are now able to be caught within an optional <code class="language-text">UnhandledExceptionDelegate</code> and processed,\nlogged or masked as desired. By default, processing errors are masked and encapsulated in an <code class="language-text">UnhandledError</code>\nand returned within the <code class="language-text">ExecutionResult</code>. Alternatively, processing errors can be thrown back to the caller\nof the <code class="language-text">DocumentExecuter</code> by setting <code class="language-text">ThrowOnUnhandledException</code> to <code class="language-text">true</code>.</p>\n<p>See <a href="https://graphql-dotnet.github.io/docs/getting-started/errors">Error handling documentation</a> for more details,\nsamples, and a full list of exception types and codes.</p>\n<h3 id="subscriptionexecuter-removal"><a href="#subscriptionexecuter-removal" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SubscriptionExecuter removal</h3>\n<p>The <code class="language-text">SubscriptionExecuter</code> class, previously marked as obsolete, has been removed. Use the <code class="language-text">DocumentExecuter</code>\nin its place.</p>\n<h3 id="nameconverter"><a href="#nameconverter" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NameConverter</h3>\n<p>The <code class="language-text">ExecutionOptions.FieldNameConverter</code> property has been replaced by the <code class="language-text">NameConverter</code> property, and the\ncorresponding class names have changed as well. Static instance members have been added to the included\nname converters. Below is a sample of the required change when using <code class="language-text">PascalCaseFieldNameConverter</code>:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> executer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DocumentExecuter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> executer<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>options <span class="token operator">=></span> <span class="token punctuation">{</span>\n\n\t<span class="token range operator">..</span><span class="token punctuation">.</span>\n\n  <span class="token comment">//options.FieldNameConverter = new PascalCaseFieldNameConverter();</span>\n  options<span class="token punctuation">.</span>NameConverter <span class="token operator">=</span> PascalCaseNameConverter<span class="token punctuation">.</span>Instance<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>If you have written a custom name converter, you must now implement <code class="language-text">INameConverter</code> rather than\n<code class="language-text">IFieldNameConverter</code>, which has two methods, <code class="language-text">NameForField</code> and <code class="language-text">NameForArgument</code>, rather than\nonly <code class="language-text">NameFor</code>. There is also no need to check for introspection types, as GraphQL.NET will\nhandle this automatically. Below is a sample of the changes required:</p>\n<div class="gatsby-highlight" data-language="csharp">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token comment">// version 2.4.x</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConverter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IFieldNameConverter</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> IntrospectionTypes <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">SchemaIntrospection</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">NameFor</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> field<span class="token punctuation">,</span> <span class="token class-name">Type</span> parentType<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">isIntrospectionType</span><span class="token punctuation">(</span>parentType<span class="token punctuation">)</span> <span class="token punctuation">?</span> field<span class="token punctuation">.</span><span class="token function">ToCamelCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> field<span class="token punctuation">.</span><span class="token function">ToPascalCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">isIntrospectionType</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span> <span class="token operator">=></span> IntrospectionTypes<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// version 3.0</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConverter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INameConverter</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">NameForField</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> fieldName<span class="token punctuation">,</span> <span class="token class-name">IComplexGraphType</span> graphType<span class="token punctuation">)</span> <span class="token operator">=></span> fieldName<span class="token punctuation">.</span><span class="token function">ToPascalCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">NameForArgument</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> argumentName<span class="token punctuation">,</span> <span class="token class-name">IComplexGraphType</span> graphType<span class="token punctuation">,</span> <span class="token class-name">FieldType</span> field<span class="token punctuation">)</span> <span class="token operator">=></span> argumentName<span class="token punctuation">.</span><span class="token function">ToPascalCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="global-references-to-the-three-introspection-fields-are-now-properties-on-code-classlanguage-textischemacode"><a href="#global-references-to-the-three-introspection-fields-are-now-properties-on-code-classlanguage-textischemacode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Global references to the three introspection fields are now properties on <code class="language-text">ISchema</code></h3>\n<p>The three introspection field definitions for <code class="language-text">__schema</code>, <code class="language-text">__type</code>, and <code class="language-text">__typename</code> have moved from static properties on the <code class="language-text">SchemaIntrospection</code> class\nto properties of the <code class="language-text">ISchema</code> interface, typically provided by the <code class="language-text">Schema</code> class. Custom implementations of <code class="language-text">ISchema</code> must implement three new properties:\n<code class="language-text">SchemaMetaFieldType</code>, <code class="language-text">TypeMetaFieldType</code>, and <code class="language-text">TypeNameMetaFieldType</code>. These can be provided by the <code class="language-text">GraphTypesLookup</code> class.</p>',
fields:{relativePath:"docs/guides/migration3.md"}},site:{siteMetadata:{githubEditUrl:"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site"}}},pathContext:{relativePath:"docs/guides/migration3.md"}}}});
//# sourceMappingURL=path---docs-guides-migration-3-ab004890629012bf087f.js.map