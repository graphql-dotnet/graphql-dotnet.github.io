{"version":3,"sources":["webpack:///path---docs-migrations-migration-7-17bb8930db86cab53125.js","webpack:///./.cache/json/docs-migrations-migration-7.json"],"names":["webpackJsonp","349","module","exports","data","markdownRemark","html","fields","relativePath","site","siteMetadata","githubEditUrl","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAAsrgGC,QAAghDC,aAAA,kCAAgDC,MAASC,cAAgBC,cAAA,6EAA4FC,aAAgBJ,aAAA","file":"path---docs-migrations-migration-7-17bb8930db86cab53125.js","sourcesContent":["webpackJsonp([171986746120192],{\n\n/***/ 349:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"migrating-from-v5x-to-v7x\\\"><a href=\\\"#migrating-from-v5x-to-v7x\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Migrating from v5.x to v7.x</h1>\\n<p>Note that v6 was skipped to align GraphQL.NET version with versions of packages from <a href=\\\"https://github.com/graphql-dotnet/server\\\">server</a>\\nproject. The historically established discrepancy in one major version constantly caused problems among the developers.</p>\\n<p>See <a href=\\\"https://github.com/graphql-dotnet/graphql-dotnet/issues?q=milestone%3A7.0+is%3Aissue+is%3Aclosed\\\">issues</a> and\\n<a href=\\\"https://github.com/graphql-dotnet/graphql-dotnet/pulls?q=is%3Apr+milestone%3A7.0+is%3Aclosed\\\">pull requests</a> done in v7.</p>\\n<h2 id=\\\"new-features\\\"><a href=\\\"#new-features\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>New Features</h2>\\n<h3 id=\\\"1-reduced-memory-usage-for-data-loader-results\\\"><a href=\\\"#1-reduced-memory-usage-for-data-loader-results\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>1. Reduced memory usage for data loader results</h3>\\n<p>Especially noteworthy when a data loader is configured with caching enabled and a singleton lifetime,\\nmemory usage is reduced by freeing unnecessary references after obtaining the results.</p>\\n<h3 id=\\\"2-async-support-for-validation-rules\\\"><a href=\\\"#2-async-support-for-validation-rules\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>2. Async support for validation rules</h3>\\n<p>Particularly useful for authentication checks, now validation rules are asynchronous.</p>\\n<h3 id=\\\"3-add-code-classlanguage-textuseapollotracingcode-builder-method-added-in-530-as-code-classlanguage-textaddapollotracingcode\\\"><a href=\\\"#3-add-code-classlanguage-textuseapollotracingcode-builder-method-added-in-530-as-code-classlanguage-textaddapollotracingcode\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>3. Add <code class=\\\"language-text\\\">UseApolloTracing</code> builder method (added in 5.3.0 as <code class=\\\"language-text\\\">AddApolloTracing</code>)</h3>\\n<p>This method adds the <code class=\\\"language-text\\\">InstrumentFieldsMiddleware</code> to the schema, and conditionally enables metrics\\nduring execution via <code class=\\\"language-text\\\">ExecutionOptions.EnableMetrics</code>. It also appends the Apollo Tracing results\\nto the execution result if metrics is enabled during execution.</p>\\n<h3 id=\\\"4-add-code-classlanguage-textconfigureexecutioncode-builder-method-added-in-530\\\"><a href=\\\"#4-add-code-classlanguage-textconfigureexecutioncode-builder-method-added-in-530\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>4. Add <code class=\\\"language-text\\\">ConfigureExecution</code> builder method (added in 5.3.0)</h3>\\n<p><code class=\\\"language-text\\\">ConfigureExecution</code> allows a delegate to both alter the execution options and the execution result.\\nFor example, to add total execution time to the results, you could write:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddGraphQL</span><span class=\\\"token punctuation\\\">(</span>b <span class=\\\"token operator\\\">=></span> b\\n    <span class=\\\"token comment\\\">// other builder methods here</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ConfigureExecution</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> timer <span class=\\\"token operator\\\">=</span> Stopwatch<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">StartNew</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        result<span class=\\\"token punctuation\\\">.</span>Extensions <span class=\\\"token operator\\\">??=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">Dictionary<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">object</span><span class=\\\"token punctuation\\\">?</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        result<span class=\\\"token punctuation\\\">.</span>Extensions<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"elapsedMs\\\"</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> timer<span class=\\\"token punctuation\\\">.</span>ElapsedMilliseconds<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>You can also use the method to add logging of any execution errors; not just unhandled errors.</p>\\n<p>Note: you can access <code class=\\\"language-text\\\">options.RequestServices</code> for access to the scoped DI service provider\\nfor the request.</p>\\n<h3 id=\\\"5-complexity-analyzer-allows-configuration-of-each-fields-impact-towards-the-total-complexity-factor\\\"><a href=\\\"#5-complexity-analyzer-allows-configuration-of-each-fields-impact-towards-the-total-complexity-factor\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>5. Complexity analyzer allows configuration of each field's impact towards the total complexity factor</h3>\\n<p>With this change the complexity analyzer could be configured to operate in terms of 'database calls'\\nor similar means which more closely represent the complexity of the request.</p>\\n<p>To set the impact on a field, call <code class=\\\"language-text\\\">.WithComplexityImpact(value)</code> on the field type, such as:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IntGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">WithComplexityImpact</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>For more details, please review the PR here: <a href=\\\"https://github.com/graphql-dotnet/graphql-dotnet/pull/3159\\\">https://github.com/graphql-dotnet/graphql-dotnet/pull/3159</a></p>\\n<h3 id=\\\"6-code-classlanguage-textautoregisteringobjectgraphtypecode-recognizes-inherited-methods\\\"><a href=\\\"#6-code-classlanguage-textautoregisteringobjectgraphtypecode-recognizes-inherited-methods\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>6. <code class=\\\"language-text\\\">AutoRegisteringObjectGraphType</code> recognizes inherited methods</h3>\\n<p>Inherited methods are now recognized by <code class=\\\"language-text\\\">AutoRegisteringObjectGraphType</code> and fields are built for them.</p>\\n<h3 id=\\\"7-graphql-attributes-can-be-applied-globally\\\"><a href=\\\"#7-graphql-attributes-can-be-applied-globally\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>7. GraphQL attributes can be applied globally</h3>\\n<p>GraphQL attributes (<code class=\\\"language-text\\\">GraphQLAttribute</code>) can now be applied at the module or assembly level, which\\nwill apply to all applicable CLR types within the module or assembly.</p>\\n<p>This allow global changes to how the schema builder or auto-registering graph type builds graph types,\\nfield types or field arguments.</p>\\n<p>For an example use case, users could add a global attribute which converts query arguments of type\\n<code class=\\\"language-text\\\">DbContext</code> to pull from services, like this:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token attribute\\\"><span class=\\\"token class-name\\\">AttributeUsage</span><span class=\\\"token attribute-arguments\\\"><span class=\\\"token punctuation\\\">(</span>AttributeTargets<span class=\\\"token punctuation\\\">.</span>Assembly<span class=\\\"token punctuation\\\">)</span></span></span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DbContextFromServicesAttribute</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">GraphQLAttribute</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">void</span></span> <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Modify</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>TParameterType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">ArgumentInformation</span> argumentInformation<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token type-expression class-name\\\">TParameterType</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token keyword\\\">typeof</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token type-expression class-name\\\">DbContext</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            argumentInformation<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SetDelegate</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span>RequestServices <span class=\\\"token operator\\\">??</span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">MissingRequestServicesException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>TParameterType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// in AssemblyInfo.cs or whereever in your code at assembly level</span>\\n<span class=\\\"token punctuation\\\">[</span>assembly<span class=\\\"token punctuation\\\">:</span> DbContextFromServices<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>Similar code could be used to pull your user context class into a method argument.</p>\\n<p>If it is necessary for a custom global GraphQL attribute to execute prior to or after other attributes,\\nadjust the return value of the <code class=\\\"language-text\\\">Priority</code> property of the attribute.</p>\\n<p>Note that global attributes may also be added to the <code class=\\\"language-text\\\">GlobalSwitches.GlobalAttributes</code> collection.</p>\\n<h3 id=\\\"8-code-classlanguage-textexecutionoptionsusercode-property-added-and-available-to-validation-rules-and-field-resolvers\\\"><a href=\\\"#8-code-classlanguage-textexecutionoptionsusercode-property-added-and-available-to-validation-rules-and-field-resolvers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>8. <code class=\\\"language-text\\\">ExecutionOptions.User</code> property added and available to validation rules and field resolvers</h3>\\n<p>You may pass a <code class=\\\"language-text\\\">ClaimsPrincipal</code> instance into <code class=\\\"language-text\\\">ExecutionOptions</code> and it will be fed through to\\n<code class=\\\"language-text\\\">ValidationContext.User</code>, <code class=\\\"language-text\\\">IExecutionContext.User</code> and <code class=\\\"language-text\\\">IResolveFieldContext.User</code> so the value\\nis accessible by validation rules, document listeners, field middleware and field resolvers.</p>\\n<p>This property is similar in nature to the ASP.NET Core <code class=\\\"language-text\\\">HttpContext.User</code> property, not being\\nused by the GraphQL.NET engine internally but merely being a convenience property similar to\\n<code class=\\\"language-text\\\">RequestServices</code> and <code class=\\\"language-text\\\">UserContext</code> for use by separate authentication packages.</p>\\n<h3 id=\\\"9-code-classlanguage-textfieldlttreturntypecode-and-argumenttargumentclrtype-overloads-to-create-field-and-argument-builders-with-inferred-graph-types\\\"><a href=\\\"#9-code-classlanguage-textfieldlttreturntypecode-and-argumenttargumentclrtype-overloads-to-create-field-and-argument-builders-with-inferred-graph-types\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>9. <code class=\\\"language-text\\\">Field&lt;TReturnType></code> and `Argument<TArgumentClrType> overloads to create field and argument builders with inferred graph types</h3>\\n<p>To define a field with a field builder, previously the graph type was always required, like this:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IntGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"test\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Resolve</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// or</span>\\n\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IntGraphType<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"test\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Resolve</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Now you can simply specify the return type, and the graph type will be inferred:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"test\\\"</span><span class=\\\"token punctuation\\\">)</span>        <span class=\\\"token comment\\\">// by default assumes not-null</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Resolve</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// or</span>\\n\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"test\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token comment\\\">// specify true or false to indicate nullability</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Resolve</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>This is similar to the expression syntax (<code class=\\\"language-text\\\">Field(x => x.Name)</code>) which does not require\\nthe graph type to be specified in order to define a field.</p>\\n<p>Similarly, you can now define an argument by specifying the CLR type:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"test\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Argument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">)</span>              <span class=\\\"token comment\\\">// required</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Argument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"description\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// optional</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Resolve</span><span class=\\\"token punctuation\\\">(</span>ctx <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> name <span class=\\\"token operator\\\">=</span> ctx<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> desc <span class=\\\"token operator\\\">=</span> ctx<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"description\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>As with the expression syntax or the <code class=\\\"language-text\\\">AutoRegisteringObjectGraphType</code>,\\nCLR type mappings can be tailored via the <code class=\\\"language-text\\\">schema.RegisterTypeMapping()</code> methods.</p>\\n<h3 id=\\\"10-interface-graph-types-can-be-automatically-built-from-clr-types\\\"><a href=\\\"#10-interface-graph-types-can-be-automatically-built-from-clr-types\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>10. Interface graph types can be automatically built from CLR types</h3>\\n<p>Similar to how input and output types can be inferred from their CLR counterparts,\\nnow interface graph types can also be inferred from CLR types. This is possible\\nwith the new class <code class=\\\"language-text\\\">AutoRegisteringInterfaceGraphType&lt;TSourceType></code> which functions\\nidentically to <code class=\\\"language-text\\\">AutoRegisteringObjectGraphType&lt;TSourceType></code> except it creates an\\ninterface type rather than an object graph type. When using automatic CLR type\\nmapping provided by <code class=\\\"language-text\\\">AddAutoClrMappings()</code> or <code class=\\\"language-text\\\">AddAutoSchema()</code>, any CLR interface\\ntype is automatically mapped to a interface graph type rather than an object graph\\ntype.</p>\\n<p>Note that auto-mapped CLR types do not automatically register or link\\nto any GraphQL interfaces; such mapping needs to be specified via the new\\n<code class=\\\"language-text\\\">ImplementsAttribute</code>. Similarly, CLR types not referenced directly in the schema\\nneed to be added to the schema manually or else no graph type will be generated for them.</p>\\n<p>Below is a typical example of how the new functionality can be used:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddGraphQL</span><span class=\\\"token punctuation\\\">(</span>b <span class=\\\"token operator\\\">=></span> b\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddAutoSchema</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>SampleQuery<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddSystemTextJson</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SampleQuery</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token return-type class-name\\\">IAnimal</span> <span class=\\\"token function\\\">Find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">AnimalType</span> type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> type <span class=\\\"token keyword\\\">switch</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        AnimalType<span class=\\\"token punctuation\\\">.</span>Cat <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">Cat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        AnimalType<span class=\\\"token punctuation\\\">.</span>Dog <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">Dog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        _ <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">ArgumentOutOfRangeException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">nameof</span><span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token return-type class-name\\\">Cat</span> <span class=\\\"token function\\\">Cat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">Cat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Fluffy\\\"</span><span class=\\\"token punctuation\\\">,</span> Lives <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">9</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token return-type class-name\\\">Dog</span> <span class=\\\"token function\\\">Dog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">Dog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Shadow\\\"</span><span class=\\\"token punctuation\\\">,</span> IsLarge <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IObject</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span><span class=\\\"token attribute\\\"><span class=\\\"token class-name\\\">Id</span></span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">int</span></span> Id <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IAnimal</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">IObject</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token return-type class-name\\\">AnimalType</span> Type <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">string</span></span> Name <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">enum</span> <span class=\\\"token class-name\\\">AnimalType</span> <span class=\\\"token punctuation\\\">{</span> Cat<span class=\\\"token punctuation\\\">,</span> Dog <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token attribute\\\"><span class=\\\"token class-name\\\">Implements</span><span class=\\\"token attribute-arguments\\\"><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token type-expression class-name\\\">IAnimal</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></span></span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Cat</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">IAnimal</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span><span class=\\\"token attribute\\\"><span class=\\\"token class-name\\\">Id</span></span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">int</span></span> Id <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\">AnimalType</span> Type <span class=\\\"token operator\\\">=></span> AnimalType<span class=\\\"token punctuation\\\">.</span>Cat<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">string</span></span> Name <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">int</span></span> Lives <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token attribute\\\"><span class=\\\"token class-name\\\">Implements</span><span class=\\\"token attribute-arguments\\\"><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token type-expression class-name\\\">IAnimal</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></span></span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Dog</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">IAnimal</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span><span class=\\\"token attribute\\\"><span class=\\\"token class-name\\\">Id</span></span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">int</span></span> Id <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\">AnimalType</span> Type <span class=\\\"token operator\\\">=></span> AnimalType<span class=\\\"token punctuation\\\">.</span>Dog<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">string</span></span> Name <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">bool</span></span> IsLarge <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>It is important to ensure that any GraphQL attributes applied to members of the CLR types\\nare applied to both the interface and the classes alike, as the GraphQL.NET engine will build\\ndistinct graph types for the interface and classes which implement those interfaces. Regardless,\\nfields will execute against the source object as expected.</p>\\n<p>When supported by the language in use, default interface methods are fully supported, including static\\nmethods defined on an interface. This functionality is available in C# 8.0 and later.</p>\\n<p>When building a graph type from an interface, methods are built for all inherited methods\\nas well as the specified interface's methods. This is by design.</p>\\n<h3 id=\\\"11-add-code-classlanguage-texterrorinfoprovideroptionsexposeexceptiondetailsmodecode-property\\\"><a href=\\\"#11-add-code-classlanguage-texterrorinfoprovideroptionsexposeexceptiondetailsmodecode-property\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>11. Add <code class=\\\"language-text\\\">ErrorInfoProviderOptions.ExposeExceptionDetailsMode</code> property</h3>\\n<p>In v7 we introduced a new <code class=\\\"language-text\\\">ErrorInfoProviderOptions.ExposeExceptionDetailsMode</code> property\\nthat allows you to control location of exception details. By default in v7 exception details\\nare located within \\\"extensions.details\\\" separately from exception message itself. Before v7\\nexception details were located along with exception message. To use old behavior set\\n<code class=\\\"language-text\\\">ExposeExceptionDetailsMode</code> to <code class=\\\"language-text\\\">Message</code> or just do nothing if you have already set\\n<code class=\\\"language-text\\\">ExposeExceptionStackTrace</code> property to <code class=\\\"language-text\\\">true</code>. To better reflect the meaning of these changes\\nwe have added a new <code class=\\\"language-text\\\">ErrorInfoProviderOptions.ExposeExceptionDetails</code> property and marked\\n<code class=\\\"language-text\\\">ErrorInfoProviderOptions.ExposeExceptionStackTrace</code> property as obsolete.</p>\\n<h2 id=\\\"breaking-changes\\\"><a href=\\\"#breaking-changes\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Breaking Changes</h2>\\n<h3 id=\\\"1-code-classlanguage-textdataloaderpairlttkey-tloadercode-property-removed\\\"><a href=\\\"#1-code-classlanguage-textdataloaderpairlttkey-tloadercode-property-removed\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>1. <code class=\\\"language-text\\\">DataLoaderPair&lt;TKey, T>.Loader</code> property removed</h3>\\n<p>This property was not used internally and should not be necessary by user code or custom implementations.\\nRemoval was necessary as the value is released after the result is set.</p>\\n<h3 id=\\\"2-code-classlanguage-textinodevisitorcode-and-code-classlanguage-textivariablevisitorcode-members-signatures-are-asynchronous-and-end-in-code-classlanguage-textasynccode\\\"><a href=\\\"#2-code-classlanguage-textinodevisitorcode-and-code-classlanguage-textivariablevisitorcode-members-signatures-are-asynchronous-and-end-in-code-classlanguage-textasynccode\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>2. <code class=\\\"language-text\\\">INodeVisitor</code> and <code class=\\\"language-text\\\">IVariableVisitor</code> members' signatures are asynchronous and end in <code class=\\\"language-text\\\">Async</code>.</h3>\\n<p>Note that <code class=\\\"language-text\\\">MatchingNodeVisitor</code> has not changed, so many validation rules will not require\\nany source code changes.</p>\\n<h3 id=\\\"3-code-classlanguage-textexecutionoptionscomplexityconfigurationcode-has-been-removed\\\"><a href=\\\"#3-code-classlanguage-textexecutionoptionscomplexityconfigurationcode-has-been-removed\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>3. <code class=\\\"language-text\\\">ExecutionOptions.ComplexityConfiguration</code> has been removed</h3>\\n<p>Complexity analysis is now a validation rule and has been removed from execution options.\\nThere is no change when using the <code class=\\\"language-text\\\">IGraphQLBuilder.AddComplexityAnalyzer</code> methods as shown below:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token comment\\\">// GraphQL 5.x or 7.x</span>\\nbuilder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddComplexityAnalyzer</span><span class=\\\"token punctuation\\\">(</span>complexityConfig <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// set configuration here</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>However, when manually setting <code class=\\\"language-text\\\">options.ComplexityConfiguration</code>, you will need to instead add the\\n<code class=\\\"language-text\\\">ComplexityValidationRule</code> validation rule to the validation rules.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token comment\\\">// GraphQL 5.x</span>\\noptions<span class=\\\"token punctuation\\\">.</span>ComplexityConfiguration <span class=\\\"token operator\\\">=</span> complexityConfig<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\noptions<span class=\\\"token punctuation\\\">.</span>ValidationRules <span class=\\\"token operator\\\">=</span> GraphQL<span class=\\\"token punctuation\\\">.</span>Validation<span class=\\\"token punctuation\\\">.</span>DocumentValidator<span class=\\\"token punctuation\\\">.</span>CoreRules<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Append</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">ComplexityValidationRule</span><span class=\\\"token punctuation\\\">(</span>complexityConfig<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"4-code-classlanguage-texticomplexityanalyzercode-and-code-classlanguage-textidocumentcachecode-have-been-removed-from-code-classlanguage-textdocumentexecutercode-constructors\\\"><a href=\\\"#4-code-classlanguage-texticomplexityanalyzercode-and-code-classlanguage-textidocumentcachecode-have-been-removed-from-code-classlanguage-textdocumentexecutercode-constructors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>4. <code class=\\\"language-text\\\">IComplexityAnalyzer</code> and <code class=\\\"language-text\\\">IDocumentCache</code> have been removed from <code class=\\\"language-text\\\">DocumentExecuter</code> constructors</h3>\\n<p>When not using the complexity analyzer, or when using the default complexity analyzer, simply\\nremove the argument from calls to the constructor. The <code class=\\\"language-text\\\">IDocumentCache</code> argument was\\nremoved as well; see the next section for details.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token comment\\\">/// GraphQL 5.x</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyCustomDocumentExecuter</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token class-name\\\">IDocumentBuilder</span> documentBuilder<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">IDocumentValidator</span> documentValidator<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">IComplexityAnalyzer</span> complexityAnalyzer<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">IDocumentCache</span> documentCache<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>IConfigureExecutionOptions<span class=\\\"token punctuation\\\">></span></span> configureExecutionOptions<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">IExecutionStrategySelector</span> executionStrategySelector<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span>documentBuilder<span class=\\\"token punctuation\\\">,</span> documentValidator<span class=\\\"token punctuation\\\">,</span> complexityAnalyzer<span class=\\\"token punctuation\\\">,</span> documentCache<span class=\\\"token punctuation\\\">,</span> configureExecutionOptions<span class=\\\"token punctuation\\\">,</span> executionStrategySelector<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/// GraphQL 7.x</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyCustomDocumentExecuter</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token class-name\\\">IDocumentBuilder</span> documentBuilder<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">IDocumentValidator</span> documentValidator<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">IExecutionStrategySelector</span> executionStrategySelector<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>IConfigureExecution<span class=\\\"token punctuation\\\">></span></span> configurations<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span>documentBuilder<span class=\\\"token punctuation\\\">,</span> documentValidator<span class=\\\"token punctuation\\\">,</span> documentCache<span class=\\\"token punctuation\\\">,</span> executionStrategySelector<span class=\\\"token punctuation\\\">,</span> configurations<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>When using a custom complexity analyzer implementation added through the <code class=\\\"language-text\\\">IGraphQLBuilder.AddComplexityAnalyzer</code>\\nmethods, no change is required.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token comment\\\">/// GraphQL 5.x or 7.x</span>\\nbuilder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddComplexityAnalyzer</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyComplexityAnalyzer<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>complexityConfig <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// set configuration here</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>When using a custom complexity analyzer implementation configured through DI, and need to\\nadd the <code class=\\\"language-text\\\">ComplexityValidationRule</code> validation rule to the validation rules, pass the implementation\\nfrom DI through to <code class=\\\"language-text\\\">ComplexityValidationRule</code>.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token comment\\\">// GraphQL 5.x</span>\\noptions<span class=\\\"token punctuation\\\">.</span>ComplexityConfiguration <span class=\\\"token operator\\\">=</span> complexityConfig<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\noptions<span class=\\\"token punctuation\\\">.</span>ValidationRules <span class=\\\"token operator\\\">=</span> GraphQL<span class=\\\"token punctuation\\\">.</span>Validation<span class=\\\"token punctuation\\\">.</span>DocumentValidator<span class=\\\"token punctuation\\\">.</span>CoreRules<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Append</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">ComplexityValidationRule</span><span class=\\\"token punctuation\\\">(</span>\\n        complexityConfig<span class=\\\"token punctuation\\\">,</span>\\n        options<span class=\\\"token punctuation\\\">.</span>RequestServices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IComplexityAnalyzer<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Using the <code class=\\\"language-text\\\">IGraphQLBuilder</code> interface to configure the GraphQL.NET execution engine is the recommended approach.</p>\\n<p>Note that the <code class=\\\"language-text\\\">IComplexityAnalyzer</code> has been deprecated and will be removed in v8.\\nPlease convert your custom complexity analyzer to a validation rule.</p>\\n<h3 id=\\\"5-changes-in-document-caching\\\"><a href=\\\"#5-changes-in-document-caching\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>5. Changes in document caching</h3>\\n<p>To make work with document cache more flexible and allow some advanced use-cases this component\\nwas moved out of the GraphQL.NET execution engine. There is no more <code class=\\\"language-text\\\">IDocumentCache</code> interface\\nto implement and no more <code class=\\\"language-text\\\">AddDocumentCache</code> extension methods defined on <code class=\\\"language-text\\\">IGraphQLBuilder</code>.\\nThe recommended way to setup caching layer is to inherit from <code class=\\\"language-text\\\">IConfigureExecution</code> interface\\nand register your class as its implementation. No change is required if you used <code class=\\\"language-text\\\">AddMemoryCache</code>\\nextension methods before though <code class=\\\"language-text\\\">AddMemoryCache</code> method itself was marked as obsolete and you may\\nwant to switch to its replacement <code class=\\\"language-text\\\">UseMemoryCache</code>. </p>\\n<p>Other changes in <code class=\\\"language-text\\\">MemoryDocumentCache</code> that may affect you - <code class=\\\"language-text\\\">GetMemoryCacheEntryOptions</code>,\\n<code class=\\\"language-text\\\">GetAsync</code> and <code class=\\\"language-text\\\">SetAsync</code> methods take <code class=\\\"language-text\\\">ExecutionOptions options</code> argument instead of <code class=\\\"language-text\\\">string query</code>.</p>\\n<h3 id=\\\"6-obsolete-members-have-been-removed\\\"><a href=\\\"#6-obsolete-members-have-been-removed\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>6. Obsolete members have been removed</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Member</th>\\n<th>Replaced by</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code class=\\\"language-text\\\">AuthorizationExtensions.RequiresAuthorization</code></td>\\n<td><code class=\\\"language-text\\\">IsAuthorizationRequired</code></td>\\n</tr>\\n<tr>\\n<td><code class=\\\"language-text\\\">AuthorizationExtensions.AuthorizeWith</code></td>\\n<td><code class=\\\"language-text\\\">AuthorizeWithPolicy</code></td>\\n</tr>\\n<tr>\\n<td><code class=\\\"language-text\\\">GraphQLAuthorizeAttribute</code></td>\\n<td><code class=\\\"language-text\\\">AuthorizeAttribute</code></td>\\n</tr>\\n<tr>\\n<td><code class=\\\"language-text\\\">IConfigureExecutionOptions</code></td>\\n<td><code class=\\\"language-text\\\">IConfigureExecution</code></td>\\n</tr>\\n<tr>\\n<td><code class=\\\"language-text\\\">GraphQLBuilderExtensions.AddMetrics</code></td>\\n<td><code class=\\\"language-text\\\">AddApolloTracing</code></td>\\n</tr>\\n<tr>\\n<td><code class=\\\"language-text\\\">ApolloTracingDocumentExecuter</code></td>\\n<td><code class=\\\"language-text\\\">AddApolloTracing</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>A few of the <code class=\\\"language-text\\\">DocumentExecuter</code> constructors have been removed that include <code class=\\\"language-text\\\">IConfigureExecutionOptions</code>.\\nNo changes to <code class=\\\"language-text\\\">ConfigureExecutionOptions</code> builder methods are required.</p>\\n<p><code class=\\\"language-text\\\">AddMetrics</code> contains functionality not present in <code class=\\\"language-text\\\">UseApolloTracing</code> and vice versa.\\nPlease consider the operation of the new <code class=\\\"language-text\\\">UseApolloTracing</code> method (see 'New Features' section above)\\nwhen replacing <code class=\\\"language-text\\\">AddMetrics</code> with <code class=\\\"language-text\\\">UseApolloTracing</code>. Remember that <code class=\\\"language-text\\\">UseApolloTracing</code> includes\\nfunctionality previously within <code class=\\\"language-text\\\">ApolloTracingDocumentExecuter</code> and/or <code class=\\\"language-text\\\">EnrichWithApolloTracing</code>.</p>\\n<h3 id=\\\"7-code-classlanguage-textglobalswitchesmapallenumerabletypescode-has-been-removed-only-specific-types-are-detected-as-lists\\\"><a href=\\\"#7-code-classlanguage-textglobalswitchesmapallenumerabletypescode-has-been-removed-only-specific-types-are-detected-as-lists\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>7. <code class=\\\"language-text\\\">GlobalSwitches.MapAllEnumerableTypes</code> has been removed; only specific types are detected as lists.</h3>\\n<p>When auto detecting graph types from CLR types (usually within <code class=\\\"language-text\\\">AutoRegisteringObjectGraphType</code> or the\\nexpression syntax of <code class=\\\"language-text\\\">Field(x => x.Member)</code>), previously any type except <code class=\\\"language-text\\\">string</code> that implemented\\n<code class=\\\"language-text\\\">IEnumerable</code> was considered a list type. This would includes types such as dictionary types, making\\nit impossible to register a CLR type that derives from a dictionary for automatic mapping.</p>\\n<p>Now only the following types or generic types are considered list types:</p>\\n<ul>\\n<li>Any array type</li>\\n<li><code class=\\\"language-text\\\">IEnumerable</code></li>\\n<li><code class=\\\"language-text\\\">IEnumerable&lt;T></code></li>\\n<li><code class=\\\"language-text\\\">IList&lt;T></code></li>\\n<li><code class=\\\"language-text\\\">List&lt;T></code></li>\\n<li><code class=\\\"language-text\\\">ICollection&lt;T></code></li>\\n<li><code class=\\\"language-text\\\">IReadOnlyCollection&lt;T></code></li>\\n<li><code class=\\\"language-text\\\">IReadOnlyList&lt;T></code></li>\\n<li><code class=\\\"language-text\\\">HashSet&lt;T></code></li>\\n<li><code class=\\\"language-text\\\">ISet&lt;T></code></li>\\n</ul>\\n<p>There is no change as compared to when <code class=\\\"language-text\\\">GlobalSwitches.MapAllEnumerableTypes</code> was set to <code class=\\\"language-text\\\">false</code>.</p>\\n<h3 id=\\\"8-unification-of-namespaces-for-di-extension-methods\\\"><a href=\\\"#8-unification-of-namespaces-for-di-extension-methods\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>8. Unification of namespaces for DI extension methods</h3>\\n<p>All extension methods to configure GraphQL.NET services within a dependency injection framework\\nwere moved into <code class=\\\"language-text\\\">GraphQL</code> namespace. Also class names were changed:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">GraphQL.DataLoader.GraphQLBuilderExtensions</code> -> <code class=\\\"language-text\\\">GraphQL.DataLoaderGraphQLBuilderExtensions</code></li>\\n<li><code class=\\\"language-text\\\">GraphQL.MemoryCache.GraphQLBuilderExtensions</code> -> <code class=\\\"language-text\\\">GraphQL.MemoryCacheGraphQLBuilderExtensions</code></li>\\n<li><code class=\\\"language-text\\\">GraphQL.MicrosoftDI.GraphQLBuilderExtensions</code> -> <code class=\\\"language-text\\\">GraphQL.MicrosoftDIGraphQLBuilderExtensions</code></li>\\n<li><code class=\\\"language-text\\\">GraphQL.NewtonsoftJson.GraphQLBuilderExtensions</code> -> <code class=\\\"language-text\\\">GraphQL.NewtonsoftJsonGraphQLBuilderExtensions</code></li>\\n<li><code class=\\\"language-text\\\">GraphQL.SystemTextJson.GraphQLBuilderExtensions</code> -> <code class=\\\"language-text\\\">GraphQL.SystemTextJsonGraphQLBuilderExtensions</code></li>\\n</ul>\\n<p>This change was done for better discoverability and usability of extension methods when configuring DI.</p>\\n<h3 id=\\\"9-code-classlanguage-textiresolvefieldcontextusercode-property-added\\\"><a href=\\\"#9-code-classlanguage-textiresolvefieldcontextusercode-property-added\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>9. <code class=\\\"language-text\\\">IResolveFieldContext.User</code> property added</h3>\\n<p>Custom implementations of <code class=\\\"language-text\\\">IResolveFieldContext</code> must implement the new <code class=\\\"language-text\\\">User</code> property.</p>\\n<h3 id=\\\"10-errors-do-not-serialize-the-code-classlanguage-textdatacode-property-within-the-response-by-default\\\"><a href=\\\"#10-errors-do-not-serialize-the-code-classlanguage-textdatacode-property-within-the-response-by-default\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>10. Errors do not serialize the <code class=\\\"language-text\\\">Data</code> property within the response by default.</h3>\\n<p>This change was made because various .NET services add data to the <code class=\\\"language-text\\\">Exception</code> instance\\nwhich may be unintentionally returned to the caller.</p>\\n<p>To revert to prior behavior, register a custom <code class=\\\"language-text\\\">ErrorInfoProvider</code> instance configured\\nto return the data to the caller.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token comment\\\">//</span>\\nservices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddGraphQL</span><span class=\\\"token punctuation\\\">(</span>b <span class=\\\"token operator\\\">=></span> b\\n    <span class=\\\"token comment\\\">// add schema, serializer, etc</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddErrorInfoProvider</span><span class=\\\"token punctuation\\\">(</span>o <span class=\\\"token operator\\\">=></span> o<span class=\\\"token punctuation\\\">.</span>ExposeData <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"11-a-bunch-of-fieldxxx-apis-were-deprecated\\\"><a href=\\\"#11-a-bunch-of-fieldxxx-apis-were-deprecated\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>11. A bunch of FieldXXX APIs were deprecated</h3>\\n<p>After upgrading to v7 you will likely notice many compiler warnings with a message similar to the following:</p>\\n<blockquote>\\n<p>Please use one of the Field() methods returning FieldBuilder and the methods defined on it or just use\\nAddField() method directly. This method may be removed in a future release. For now you can continue to\\nuse this API but we do not encourage this.</p>\\n</blockquote>\\n<p>The goal of this <a href=\\\"https://github.com/graphql-dotnet/graphql-dotnet/pull/3237\\\">change</a> was to simplify\\nAPIs and guide developers with well-discovered APIs.</p>\\n<p>You will need to change a way of setting fields on your graph types. Instead of many <code class=\\\"language-text\\\">FieldXXX</code>\\noverloads, start configuring your field with one of the <code class=\\\"language-text\\\">Field</code> methods defined on <code class=\\\"language-text\\\">ComplexGraphType</code>.\\nAll such methods define a new field and return an instance of <code class=\\\"language-text\\\">FieldBuilder&lt;T,U></code>. Then continue to\\nconfigure the field with rich APIs provided by the returned builder. </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token comment\\\">// GraphQL 5.x</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">\\\"Argument name\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span> context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Argument name\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Resolve</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span> context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\">// GraphQL 5.x</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">FieldAsync</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>CharacterInterface<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"hero\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">async</span> context <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">await</span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetDroidByIdAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"3\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ConfigureAwait</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>CharacterInterface<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"hero\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">async</span> context <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">await</span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetDroidByIdAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"3\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ConfigureAwait</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\">// GraphQL 5.x</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">FieldAsync</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>HumanType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">\\\"human\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token named-parameter punctuation\\\">arguments</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token punctuation\\\">{</span> Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">,</span> Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"id of the human\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">async</span> context <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">await</span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetHumanByIdAsync</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ConfigureAwait</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>HumanType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"human\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Argument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"id of the human\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">async</span> context <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">await</span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetHumanByIdAsync</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ConfigureAwait</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\">// GraphQL 5.x</span>\\n<span class=\\\"token class-name\\\">Func<span class=\\\"token punctuation\\\">&lt;</span>IResolveFieldContext<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">object</span><span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">,</span> Task<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">?</span><span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> resolver <span class=\\\"token operator\\\">=</span> context <span class=\\\"token operator\\\">=></span> Task<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">FromResult</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"abc\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">FieldAsync</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> resolver<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\n<span class=\\\"token class-name\\\">Func<span class=\\\"token punctuation\\\">&lt;</span>IResolveFieldContext<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">object</span><span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">,</span> Task<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">?</span><span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> resolver <span class=\\\"token operator\\\">=</span> context <span class=\\\"token operator\\\">=></span> Task<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">FromResult</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"abc\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>resolver<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\">// GraphQL 5.x</span>\\n<span class=\\\"token class-name\\\">Func<span class=\\\"token punctuation\\\">&lt;</span>IResolveFieldContext<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">,</span> Task<span class=\\\"token punctuation\\\">&lt;</span>Droid<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> func <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">,</span> id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetDroidByIdAsync</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">FieldDelegate</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DroidType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">\\\"droid\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token named-parameter punctuation\\\">arguments</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token punctuation\\\">{</span> Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">,</span> Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"id of the droid\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> func\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\n<span class=\\\"token class-name\\\">Func<span class=\\\"token punctuation\\\">&lt;</span>IResolveFieldContext<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">,</span> Task<span class=\\\"token punctuation\\\">&lt;</span>Droid<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> func <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">,</span> id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetDroidByIdAsync</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DroidType<span class=\\\"token punctuation\\\">,</span> Droid<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"droid\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Argument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"id of the droid\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveDelegate</span><span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\">// GraphQL 5.x</span>\\n<span class=\\\"token class-name\\\">IObservable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">object</span><span class=\\\"token punctuation\\\">></span></span> observable <span class=\\\"token operator\\\">=</span> <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">FieldSubscribe</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MessageGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"messages\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token named-parameter punctuation\\\">subscribe</span><span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span> observable<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\n<span class=\\\"token class-name\\\">IObservable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">object</span><span class=\\\"token punctuation\\\">></span></span> observable <span class=\\\"token operator\\\">=</span> <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MessageGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"messages\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveStream</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span> observable<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\">// GraphQL 5.x</span>\\n<span class=\\\"token class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span>IObservable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">object</span><span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> observable <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">FieldSubscribeAsync</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MessageGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"messages\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token named-parameter punctuation\\\">subscribeAsync</span><span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span> observable<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\n<span class=\\\"token class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span>IObservable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">object</span><span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> observable <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MessageGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"messages\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveStreamAsync</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span> observable<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Also <code class=\\\"language-text\\\">ComplexGraphType.Field&lt;IntGraphType>(\\\"name\\\")</code> now returns <code class=\\\"language-text\\\">FieldBuilder</code> instead of <code class=\\\"language-text\\\">FieldType</code>.</p>\\n<h3 id=\\\"12-code-classlanguage-textsortordercode-property-added-to-code-classlanguage-texticonfigureexecutioncode\\\"><a href=\\\"#12-code-classlanguage-textsortordercode-property-added-to-code-classlanguage-texticonfigureexecutioncode\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>12. <code class=\\\"language-text\\\">SortOrder</code> property added to <code class=\\\"language-text\\\">IConfigureExecution</code></h3>\\n<p>If you have classes that implement <code class=\\\"language-text\\\">IConfigureExecution</code>, you will now need to also implement the\\nadded <code class=\\\"language-text\\\">SortOrder</code> property. The sort order determines the order that the <code class=\\\"language-text\\\">IConfigureExecution</code>\\ninstances are run, with the lowest value being run first.</p>\\n<p>The default sort order of configurations are as follows:</p>\\n<ul>\\n<li>100: Option configurations -- <code class=\\\"language-text\\\">Add</code> calls such as <code class=\\\"language-text\\\">AddValidationRule</code>, and <code class=\\\"language-text\\\">ConfigureExecutionOptions</code> calls</li>\\n<li>200: Execution configurations -- <code class=\\\"language-text\\\">Use</code> calls such as <code class=\\\"language-text\\\">UseApolloTracing</code>, and <code class=\\\"language-text\\\">ConfigureExecution</code> calls</li>\\n</ul>\\n<h3 id=\\\"13-interfaces-mapped-by-the-code-classlanguage-textautoregisteringgraphtypemappingprovidercode-now-generate-interface-graph-types-rather-than-object-graph-types\\\"><a href=\\\"#13-interfaces-mapped-by-the-code-classlanguage-textautoregisteringgraphtypemappingprovidercode-now-generate-interface-graph-types-rather-than-object-graph-types\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>13. Interfaces mapped by the <code class=\\\"language-text\\\">AutoRegisteringGraphTypeMappingProvider</code> now generate interface graph types rather than object graph types.</h3>\\n<p>If you use interfaces to contain your GraphQL attributes for your data models, or for any other reason\\nrely on the generation of object graph types for interface CLR types, you may wish to revert this design\\nchoice. Simply reconfigure the mapping provider as follows and interfaces will be generated as object graph\\ntypes as before:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddGraphQL</span><span class=\\\"token punctuation\\\">(</span>b <span class=\\\"token operator\\\">=></span> b\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddGraphTypeMappingProvider</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">AutoRegisteringGraphTypeMappingProvider</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token comment\\\">// other calls</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"14-graph-types-cannot-be-used-as-data-models\\\"><a href=\\\"#14-graph-types-cannot-be-used-as-data-models\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>14. Graph types cannot be used as data models</h3>\\n<p>From version 7.1 on, graph types cannot be used as data models. This is because the graph types are\\ndesigned to be used as schema definitions, and not as data models. The following classes\\nwill now throw an exception if a graph type is used as a data model:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">ObjectGraphType&lt;TSourceType></code></li>\\n<li><code class=\\\"language-text\\\">InputObjectGraphType&lt;TSourceType></code></li>\\n<li><code class=\\\"language-text\\\">AutoRegisteringObjectGraphType&lt;TSourceType></code></li>\\n<li><code class=\\\"language-text\\\">AutoRegisteringInputObjectGraphType&lt;TSourceType></code></li>\\n<li><code class=\\\"language-text\\\">AutoRegisteringInterfaceGraphType&lt;TSourceType></code></li>\\n<li></li>\\n</ul>\\n<p>If it is necessary to do so, you can derive from the <code class=\\\"language-text\\\">ObjectGraphType</code> or <code class=\\\"language-text\\\">InputObjectGraphType</code> classes\\ninstead of the generic version.</p>\\n<h3 id=\\\"15-different-instances-of-the-same-graph-type-cannot-be-referenced-in-the-same-schema\\\"><a href=\\\"#15-different-instances-of-the-same-graph-type-cannot-be-referenced-in-the-same-schema\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>15. Different instances of the same graph type cannot be referenced in the same schema</h3>\\n<p>From version 7.1.1 on, different instances of the same graph type cannot be referenced in the same schema.\\nThis prevents the situation where some graph types are not initialized and throw errors when used.\\nIf this is causing a problem (perhaps with graph types that are dynamically generated, for instance),\\ncreate and pull from a dictionary of instantiated types, or use <code class=\\\"language-text\\\">GraphQLTypeReference</code> to reference\\nthe graph type by name.</p>\",\"fields\":{\"relativePath\":\"docs/migrations/migration7.md\"}},\"site\":{\"siteMetadata\":{\"githubEditUrl\":\"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site\"}}},\"pathContext\":{\"relativePath\":\"docs/migrations/migration7.md\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-migrations-migration-7-17bb8930db86cab53125.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"migrating-from-v5x-to-v7x\\\"><a href=\\\"#migrating-from-v5x-to-v7x\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Migrating from v5.x to v7.x</h1>\\n<p>Note that v6 was skipped to align GraphQL.NET version with versions of packages from <a href=\\\"https://github.com/graphql-dotnet/server\\\">server</a>\\nproject. The historically established discrepancy in one major version constantly caused problems among the developers.</p>\\n<p>See <a href=\\\"https://github.com/graphql-dotnet/graphql-dotnet/issues?q=milestone%3A7.0+is%3Aissue+is%3Aclosed\\\">issues</a> and\\n<a href=\\\"https://github.com/graphql-dotnet/graphql-dotnet/pulls?q=is%3Apr+milestone%3A7.0+is%3Aclosed\\\">pull requests</a> done in v7.</p>\\n<h2 id=\\\"new-features\\\"><a href=\\\"#new-features\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>New Features</h2>\\n<h3 id=\\\"1-reduced-memory-usage-for-data-loader-results\\\"><a href=\\\"#1-reduced-memory-usage-for-data-loader-results\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>1. Reduced memory usage for data loader results</h3>\\n<p>Especially noteworthy when a data loader is configured with caching enabled and a singleton lifetime,\\nmemory usage is reduced by freeing unnecessary references after obtaining the results.</p>\\n<h3 id=\\\"2-async-support-for-validation-rules\\\"><a href=\\\"#2-async-support-for-validation-rules\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>2. Async support for validation rules</h3>\\n<p>Particularly useful for authentication checks, now validation rules are asynchronous.</p>\\n<h3 id=\\\"3-add-code-classlanguage-textuseapollotracingcode-builder-method-added-in-530-as-code-classlanguage-textaddapollotracingcode\\\"><a href=\\\"#3-add-code-classlanguage-textuseapollotracingcode-builder-method-added-in-530-as-code-classlanguage-textaddapollotracingcode\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>3. Add <code class=\\\"language-text\\\">UseApolloTracing</code> builder method (added in 5.3.0 as <code class=\\\"language-text\\\">AddApolloTracing</code>)</h3>\\n<p>This method adds the <code class=\\\"language-text\\\">InstrumentFieldsMiddleware</code> to the schema, and conditionally enables metrics\\nduring execution via <code class=\\\"language-text\\\">ExecutionOptions.EnableMetrics</code>. It also appends the Apollo Tracing results\\nto the execution result if metrics is enabled during execution.</p>\\n<h3 id=\\\"4-add-code-classlanguage-textconfigureexecutioncode-builder-method-added-in-530\\\"><a href=\\\"#4-add-code-classlanguage-textconfigureexecutioncode-builder-method-added-in-530\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>4. Add <code class=\\\"language-text\\\">ConfigureExecution</code> builder method (added in 5.3.0)</h3>\\n<p><code class=\\\"language-text\\\">ConfigureExecution</code> allows a delegate to both alter the execution options and the execution result.\\nFor example, to add total execution time to the results, you could write:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddGraphQL</span><span class=\\\"token punctuation\\\">(</span>b <span class=\\\"token operator\\\">=></span> b\\n    <span class=\\\"token comment\\\">// other builder methods here</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ConfigureExecution</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> timer <span class=\\\"token operator\\\">=</span> Stopwatch<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">StartNew</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        result<span class=\\\"token punctuation\\\">.</span>Extensions <span class=\\\"token operator\\\">??=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">Dictionary<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">object</span><span class=\\\"token punctuation\\\">?</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        result<span class=\\\"token punctuation\\\">.</span>Extensions<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"elapsedMs\\\"</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> timer<span class=\\\"token punctuation\\\">.</span>ElapsedMilliseconds<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>You can also use the method to add logging of any execution errors; not just unhandled errors.</p>\\n<p>Note: you can access <code class=\\\"language-text\\\">options.RequestServices</code> for access to the scoped DI service provider\\nfor the request.</p>\\n<h3 id=\\\"5-complexity-analyzer-allows-configuration-of-each-fields-impact-towards-the-total-complexity-factor\\\"><a href=\\\"#5-complexity-analyzer-allows-configuration-of-each-fields-impact-towards-the-total-complexity-factor\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>5. Complexity analyzer allows configuration of each field's impact towards the total complexity factor</h3>\\n<p>With this change the complexity analyzer could be configured to operate in terms of 'database calls'\\nor similar means which more closely represent the complexity of the request.</p>\\n<p>To set the impact on a field, call <code class=\\\"language-text\\\">.WithComplexityImpact(value)</code> on the field type, such as:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IntGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">WithComplexityImpact</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>For more details, please review the PR here: <a href=\\\"https://github.com/graphql-dotnet/graphql-dotnet/pull/3159\\\">https://github.com/graphql-dotnet/graphql-dotnet/pull/3159</a></p>\\n<h3 id=\\\"6-code-classlanguage-textautoregisteringobjectgraphtypecode-recognizes-inherited-methods\\\"><a href=\\\"#6-code-classlanguage-textautoregisteringobjectgraphtypecode-recognizes-inherited-methods\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>6. <code class=\\\"language-text\\\">AutoRegisteringObjectGraphType</code> recognizes inherited methods</h3>\\n<p>Inherited methods are now recognized by <code class=\\\"language-text\\\">AutoRegisteringObjectGraphType</code> and fields are built for them.</p>\\n<h3 id=\\\"7-graphql-attributes-can-be-applied-globally\\\"><a href=\\\"#7-graphql-attributes-can-be-applied-globally\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>7. GraphQL attributes can be applied globally</h3>\\n<p>GraphQL attributes (<code class=\\\"language-text\\\">GraphQLAttribute</code>) can now be applied at the module or assembly level, which\\nwill apply to all applicable CLR types within the module or assembly.</p>\\n<p>This allow global changes to how the schema builder or auto-registering graph type builds graph types,\\nfield types or field arguments.</p>\\n<p>For an example use case, users could add a global attribute which converts query arguments of type\\n<code class=\\\"language-text\\\">DbContext</code> to pull from services, like this:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token attribute\\\"><span class=\\\"token class-name\\\">AttributeUsage</span><span class=\\\"token attribute-arguments\\\"><span class=\\\"token punctuation\\\">(</span>AttributeTargets<span class=\\\"token punctuation\\\">.</span>Assembly<span class=\\\"token punctuation\\\">)</span></span></span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DbContextFromServicesAttribute</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">GraphQLAttribute</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">void</span></span> <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Modify</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>TParameterType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">ArgumentInformation</span> argumentInformation<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token type-expression class-name\\\">TParameterType</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token keyword\\\">typeof</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token type-expression class-name\\\">DbContext</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            argumentInformation<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">SetDelegate</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span>RequestServices <span class=\\\"token operator\\\">??</span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">MissingRequestServicesException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>TParameterType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// in AssemblyInfo.cs or whereever in your code at assembly level</span>\\n<span class=\\\"token punctuation\\\">[</span>assembly<span class=\\\"token punctuation\\\">:</span> DbContextFromServices<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>Similar code could be used to pull your user context class into a method argument.</p>\\n<p>If it is necessary for a custom global GraphQL attribute to execute prior to or after other attributes,\\nadjust the return value of the <code class=\\\"language-text\\\">Priority</code> property of the attribute.</p>\\n<p>Note that global attributes may also be added to the <code class=\\\"language-text\\\">GlobalSwitches.GlobalAttributes</code> collection.</p>\\n<h3 id=\\\"8-code-classlanguage-textexecutionoptionsusercode-property-added-and-available-to-validation-rules-and-field-resolvers\\\"><a href=\\\"#8-code-classlanguage-textexecutionoptionsusercode-property-added-and-available-to-validation-rules-and-field-resolvers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>8. <code class=\\\"language-text\\\">ExecutionOptions.User</code> property added and available to validation rules and field resolvers</h3>\\n<p>You may pass a <code class=\\\"language-text\\\">ClaimsPrincipal</code> instance into <code class=\\\"language-text\\\">ExecutionOptions</code> and it will be fed through to\\n<code class=\\\"language-text\\\">ValidationContext.User</code>, <code class=\\\"language-text\\\">IExecutionContext.User</code> and <code class=\\\"language-text\\\">IResolveFieldContext.User</code> so the value\\nis accessible by validation rules, document listeners, field middleware and field resolvers.</p>\\n<p>This property is similar in nature to the ASP.NET Core <code class=\\\"language-text\\\">HttpContext.User</code> property, not being\\nused by the GraphQL.NET engine internally but merely being a convenience property similar to\\n<code class=\\\"language-text\\\">RequestServices</code> and <code class=\\\"language-text\\\">UserContext</code> for use by separate authentication packages.</p>\\n<h3 id=\\\"9-code-classlanguage-textfieldlttreturntypecode-and-argumenttargumentclrtype-overloads-to-create-field-and-argument-builders-with-inferred-graph-types\\\"><a href=\\\"#9-code-classlanguage-textfieldlttreturntypecode-and-argumenttargumentclrtype-overloads-to-create-field-and-argument-builders-with-inferred-graph-types\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>9. <code class=\\\"language-text\\\">Field&lt;TReturnType></code> and `Argument<TArgumentClrType> overloads to create field and argument builders with inferred graph types</h3>\\n<p>To define a field with a field builder, previously the graph type was always required, like this:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IntGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"test\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Resolve</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// or</span>\\n\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IntGraphType<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"test\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Resolve</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Now you can simply specify the return type, and the graph type will be inferred:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"test\\\"</span><span class=\\\"token punctuation\\\">)</span>        <span class=\\\"token comment\\\">// by default assumes not-null</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Resolve</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// or</span>\\n\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"test\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token comment\\\">// specify true or false to indicate nullability</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Resolve</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>This is similar to the expression syntax (<code class=\\\"language-text\\\">Field(x => x.Name)</code>) which does not require\\nthe graph type to be specified in order to define a field.</p>\\n<p>Similarly, you can now define an argument by specifying the CLR type:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"test\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Argument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">)</span>              <span class=\\\"token comment\\\">// required</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Argument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"description\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// optional</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Resolve</span><span class=\\\"token punctuation\\\">(</span>ctx <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> name <span class=\\\"token operator\\\">=</span> ctx<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> desc <span class=\\\"token operator\\\">=</span> ctx<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"description\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>As with the expression syntax or the <code class=\\\"language-text\\\">AutoRegisteringObjectGraphType</code>,\\nCLR type mappings can be tailored via the <code class=\\\"language-text\\\">schema.RegisterTypeMapping()</code> methods.</p>\\n<h3 id=\\\"10-interface-graph-types-can-be-automatically-built-from-clr-types\\\"><a href=\\\"#10-interface-graph-types-can-be-automatically-built-from-clr-types\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>10. Interface graph types can be automatically built from CLR types</h3>\\n<p>Similar to how input and output types can be inferred from their CLR counterparts,\\nnow interface graph types can also be inferred from CLR types. This is possible\\nwith the new class <code class=\\\"language-text\\\">AutoRegisteringInterfaceGraphType&lt;TSourceType></code> which functions\\nidentically to <code class=\\\"language-text\\\">AutoRegisteringObjectGraphType&lt;TSourceType></code> except it creates an\\ninterface type rather than an object graph type. When using automatic CLR type\\nmapping provided by <code class=\\\"language-text\\\">AddAutoClrMappings()</code> or <code class=\\\"language-text\\\">AddAutoSchema()</code>, any CLR interface\\ntype is automatically mapped to a interface graph type rather than an object graph\\ntype.</p>\\n<p>Note that auto-mapped CLR types do not automatically register or link\\nto any GraphQL interfaces; such mapping needs to be specified via the new\\n<code class=\\\"language-text\\\">ImplementsAttribute</code>. Similarly, CLR types not referenced directly in the schema\\nneed to be added to the schema manually or else no graph type will be generated for them.</p>\\n<p>Below is a typical example of how the new functionality can be used:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddGraphQL</span><span class=\\\"token punctuation\\\">(</span>b <span class=\\\"token operator\\\">=></span> b\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddAutoSchema</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>SampleQuery<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddSystemTextJson</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SampleQuery</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token return-type class-name\\\">IAnimal</span> <span class=\\\"token function\\\">Find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">AnimalType</span> type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> type <span class=\\\"token keyword\\\">switch</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        AnimalType<span class=\\\"token punctuation\\\">.</span>Cat <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">Cat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        AnimalType<span class=\\\"token punctuation\\\">.</span>Dog <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">Dog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        _ <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">ArgumentOutOfRangeException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">nameof</span><span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token return-type class-name\\\">Cat</span> <span class=\\\"token function\\\">Cat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">Cat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Fluffy\\\"</span><span class=\\\"token punctuation\\\">,</span> Lives <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">9</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token return-type class-name\\\">Dog</span> <span class=\\\"token function\\\">Dog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">Dog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Shadow\\\"</span><span class=\\\"token punctuation\\\">,</span> IsLarge <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IObject</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span><span class=\\\"token attribute\\\"><span class=\\\"token class-name\\\">Id</span></span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">int</span></span> Id <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IAnimal</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">IObject</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token return-type class-name\\\">AnimalType</span> Type <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">string</span></span> Name <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">enum</span> <span class=\\\"token class-name\\\">AnimalType</span> <span class=\\\"token punctuation\\\">{</span> Cat<span class=\\\"token punctuation\\\">,</span> Dog <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token attribute\\\"><span class=\\\"token class-name\\\">Implements</span><span class=\\\"token attribute-arguments\\\"><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token type-expression class-name\\\">IAnimal</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></span></span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Cat</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">IAnimal</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span><span class=\\\"token attribute\\\"><span class=\\\"token class-name\\\">Id</span></span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">int</span></span> Id <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\">AnimalType</span> Type <span class=\\\"token operator\\\">=></span> AnimalType<span class=\\\"token punctuation\\\">.</span>Cat<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">string</span></span> Name <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">int</span></span> Lives <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token attribute\\\"><span class=\\\"token class-name\\\">Implements</span><span class=\\\"token attribute-arguments\\\"><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token type-expression class-name\\\">IAnimal</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></span></span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Dog</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">IAnimal</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span><span class=\\\"token attribute\\\"><span class=\\\"token class-name\\\">Id</span></span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">int</span></span> Id <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\">AnimalType</span> Type <span class=\\\"token operator\\\">=></span> AnimalType<span class=\\\"token punctuation\\\">.</span>Dog<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">string</span></span> Name <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">bool</span></span> IsLarge <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>It is important to ensure that any GraphQL attributes applied to members of the CLR types\\nare applied to both the interface and the classes alike, as the GraphQL.NET engine will build\\ndistinct graph types for the interface and classes which implement those interfaces. Regardless,\\nfields will execute against the source object as expected.</p>\\n<p>When supported by the language in use, default interface methods are fully supported, including static\\nmethods defined on an interface. This functionality is available in C# 8.0 and later.</p>\\n<p>When building a graph type from an interface, methods are built for all inherited methods\\nas well as the specified interface's methods. This is by design.</p>\\n<h3 id=\\\"11-add-code-classlanguage-texterrorinfoprovideroptionsexposeexceptiondetailsmodecode-property\\\"><a href=\\\"#11-add-code-classlanguage-texterrorinfoprovideroptionsexposeexceptiondetailsmodecode-property\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>11. Add <code class=\\\"language-text\\\">ErrorInfoProviderOptions.ExposeExceptionDetailsMode</code> property</h3>\\n<p>In v7 we introduced a new <code class=\\\"language-text\\\">ErrorInfoProviderOptions.ExposeExceptionDetailsMode</code> property\\nthat allows you to control location of exception details. By default in v7 exception details\\nare located within \\\"extensions.details\\\" separately from exception message itself. Before v7\\nexception details were located along with exception message. To use old behavior set\\n<code class=\\\"language-text\\\">ExposeExceptionDetailsMode</code> to <code class=\\\"language-text\\\">Message</code> or just do nothing if you have already set\\n<code class=\\\"language-text\\\">ExposeExceptionStackTrace</code> property to <code class=\\\"language-text\\\">true</code>. To better reflect the meaning of these changes\\nwe have added a new <code class=\\\"language-text\\\">ErrorInfoProviderOptions.ExposeExceptionDetails</code> property and marked\\n<code class=\\\"language-text\\\">ErrorInfoProviderOptions.ExposeExceptionStackTrace</code> property as obsolete.</p>\\n<h2 id=\\\"breaking-changes\\\"><a href=\\\"#breaking-changes\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Breaking Changes</h2>\\n<h3 id=\\\"1-code-classlanguage-textdataloaderpairlttkey-tloadercode-property-removed\\\"><a href=\\\"#1-code-classlanguage-textdataloaderpairlttkey-tloadercode-property-removed\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>1. <code class=\\\"language-text\\\">DataLoaderPair&lt;TKey, T>.Loader</code> property removed</h3>\\n<p>This property was not used internally and should not be necessary by user code or custom implementations.\\nRemoval was necessary as the value is released after the result is set.</p>\\n<h3 id=\\\"2-code-classlanguage-textinodevisitorcode-and-code-classlanguage-textivariablevisitorcode-members-signatures-are-asynchronous-and-end-in-code-classlanguage-textasynccode\\\"><a href=\\\"#2-code-classlanguage-textinodevisitorcode-and-code-classlanguage-textivariablevisitorcode-members-signatures-are-asynchronous-and-end-in-code-classlanguage-textasynccode\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>2. <code class=\\\"language-text\\\">INodeVisitor</code> and <code class=\\\"language-text\\\">IVariableVisitor</code> members' signatures are asynchronous and end in <code class=\\\"language-text\\\">Async</code>.</h3>\\n<p>Note that <code class=\\\"language-text\\\">MatchingNodeVisitor</code> has not changed, so many validation rules will not require\\nany source code changes.</p>\\n<h3 id=\\\"3-code-classlanguage-textexecutionoptionscomplexityconfigurationcode-has-been-removed\\\"><a href=\\\"#3-code-classlanguage-textexecutionoptionscomplexityconfigurationcode-has-been-removed\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>3. <code class=\\\"language-text\\\">ExecutionOptions.ComplexityConfiguration</code> has been removed</h3>\\n<p>Complexity analysis is now a validation rule and has been removed from execution options.\\nThere is no change when using the <code class=\\\"language-text\\\">IGraphQLBuilder.AddComplexityAnalyzer</code> methods as shown below:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token comment\\\">// GraphQL 5.x or 7.x</span>\\nbuilder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddComplexityAnalyzer</span><span class=\\\"token punctuation\\\">(</span>complexityConfig <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// set configuration here</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>However, when manually setting <code class=\\\"language-text\\\">options.ComplexityConfiguration</code>, you will need to instead add the\\n<code class=\\\"language-text\\\">ComplexityValidationRule</code> validation rule to the validation rules.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token comment\\\">// GraphQL 5.x</span>\\noptions<span class=\\\"token punctuation\\\">.</span>ComplexityConfiguration <span class=\\\"token operator\\\">=</span> complexityConfig<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\noptions<span class=\\\"token punctuation\\\">.</span>ValidationRules <span class=\\\"token operator\\\">=</span> GraphQL<span class=\\\"token punctuation\\\">.</span>Validation<span class=\\\"token punctuation\\\">.</span>DocumentValidator<span class=\\\"token punctuation\\\">.</span>CoreRules<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Append</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">ComplexityValidationRule</span><span class=\\\"token punctuation\\\">(</span>complexityConfig<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"4-code-classlanguage-texticomplexityanalyzercode-and-code-classlanguage-textidocumentcachecode-have-been-removed-from-code-classlanguage-textdocumentexecutercode-constructors\\\"><a href=\\\"#4-code-classlanguage-texticomplexityanalyzercode-and-code-classlanguage-textidocumentcachecode-have-been-removed-from-code-classlanguage-textdocumentexecutercode-constructors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>4. <code class=\\\"language-text\\\">IComplexityAnalyzer</code> and <code class=\\\"language-text\\\">IDocumentCache</code> have been removed from <code class=\\\"language-text\\\">DocumentExecuter</code> constructors</h3>\\n<p>When not using the complexity analyzer, or when using the default complexity analyzer, simply\\nremove the argument from calls to the constructor. The <code class=\\\"language-text\\\">IDocumentCache</code> argument was\\nremoved as well; see the next section for details.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token comment\\\">/// GraphQL 5.x</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyCustomDocumentExecuter</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token class-name\\\">IDocumentBuilder</span> documentBuilder<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">IDocumentValidator</span> documentValidator<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">IComplexityAnalyzer</span> complexityAnalyzer<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">IDocumentCache</span> documentCache<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>IConfigureExecutionOptions<span class=\\\"token punctuation\\\">></span></span> configureExecutionOptions<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">IExecutionStrategySelector</span> executionStrategySelector<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span>documentBuilder<span class=\\\"token punctuation\\\">,</span> documentValidator<span class=\\\"token punctuation\\\">,</span> complexityAnalyzer<span class=\\\"token punctuation\\\">,</span> documentCache<span class=\\\"token punctuation\\\">,</span> configureExecutionOptions<span class=\\\"token punctuation\\\">,</span> executionStrategySelector<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/// GraphQL 7.x</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyCustomDocumentExecuter</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token class-name\\\">IDocumentBuilder</span> documentBuilder<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">IDocumentValidator</span> documentValidator<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">IExecutionStrategySelector</span> executionStrategySelector<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token class-name\\\">IEnumerable<span class=\\\"token punctuation\\\">&lt;</span>IConfigureExecution<span class=\\\"token punctuation\\\">></span></span> configurations<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span>documentBuilder<span class=\\\"token punctuation\\\">,</span> documentValidator<span class=\\\"token punctuation\\\">,</span> documentCache<span class=\\\"token punctuation\\\">,</span> executionStrategySelector<span class=\\\"token punctuation\\\">,</span> configurations<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>When using a custom complexity analyzer implementation added through the <code class=\\\"language-text\\\">IGraphQLBuilder.AddComplexityAnalyzer</code>\\nmethods, no change is required.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token comment\\\">/// GraphQL 5.x or 7.x</span>\\nbuilder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">AddComplexityAnalyzer</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MyComplexityAnalyzer<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>complexityConfig <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// set configuration here</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>When using a custom complexity analyzer implementation configured through DI, and need to\\nadd the <code class=\\\"language-text\\\">ComplexityValidationRule</code> validation rule to the validation rules, pass the implementation\\nfrom DI through to <code class=\\\"language-text\\\">ComplexityValidationRule</code>.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token comment\\\">// GraphQL 5.x</span>\\noptions<span class=\\\"token punctuation\\\">.</span>ComplexityConfiguration <span class=\\\"token operator\\\">=</span> complexityConfig<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\noptions<span class=\\\"token punctuation\\\">.</span>ValidationRules <span class=\\\"token operator\\\">=</span> GraphQL<span class=\\\"token punctuation\\\">.</span>Validation<span class=\\\"token punctuation\\\">.</span>DocumentValidator<span class=\\\"token punctuation\\\">.</span>CoreRules<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Append</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">ComplexityValidationRule</span><span class=\\\"token punctuation\\\">(</span>\\n        complexityConfig<span class=\\\"token punctuation\\\">,</span>\\n        options<span class=\\\"token punctuation\\\">.</span>RequestServices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetRequiredService</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IComplexityAnalyzer<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Using the <code class=\\\"language-text\\\">IGraphQLBuilder</code> interface to configure the GraphQL.NET execution engine is the recommended approach.</p>\\n<p>Note that the <code class=\\\"language-text\\\">IComplexityAnalyzer</code> has been deprecated and will be removed in v8.\\nPlease convert your custom complexity analyzer to a validation rule.</p>\\n<h3 id=\\\"5-changes-in-document-caching\\\"><a href=\\\"#5-changes-in-document-caching\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>5. Changes in document caching</h3>\\n<p>To make work with document cache more flexible and allow some advanced use-cases this component\\nwas moved out of the GraphQL.NET execution engine. There is no more <code class=\\\"language-text\\\">IDocumentCache</code> interface\\nto implement and no more <code class=\\\"language-text\\\">AddDocumentCache</code> extension methods defined on <code class=\\\"language-text\\\">IGraphQLBuilder</code>.\\nThe recommended way to setup caching layer is to inherit from <code class=\\\"language-text\\\">IConfigureExecution</code> interface\\nand register your class as its implementation. No change is required if you used <code class=\\\"language-text\\\">AddMemoryCache</code>\\nextension methods before though <code class=\\\"language-text\\\">AddMemoryCache</code> method itself was marked as obsolete and you may\\nwant to switch to its replacement <code class=\\\"language-text\\\">UseMemoryCache</code>. </p>\\n<p>Other changes in <code class=\\\"language-text\\\">MemoryDocumentCache</code> that may affect you - <code class=\\\"language-text\\\">GetMemoryCacheEntryOptions</code>,\\n<code class=\\\"language-text\\\">GetAsync</code> and <code class=\\\"language-text\\\">SetAsync</code> methods take <code class=\\\"language-text\\\">ExecutionOptions options</code> argument instead of <code class=\\\"language-text\\\">string query</code>.</p>\\n<h3 id=\\\"6-obsolete-members-have-been-removed\\\"><a href=\\\"#6-obsolete-members-have-been-removed\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>6. Obsolete members have been removed</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Member</th>\\n<th>Replaced by</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code class=\\\"language-text\\\">AuthorizationExtensions.RequiresAuthorization</code></td>\\n<td><code class=\\\"language-text\\\">IsAuthorizationRequired</code></td>\\n</tr>\\n<tr>\\n<td><code class=\\\"language-text\\\">AuthorizationExtensions.AuthorizeWith</code></td>\\n<td><code class=\\\"language-text\\\">AuthorizeWithPolicy</code></td>\\n</tr>\\n<tr>\\n<td><code class=\\\"language-text\\\">GraphQLAuthorizeAttribute</code></td>\\n<td><code class=\\\"language-text\\\">AuthorizeAttribute</code></td>\\n</tr>\\n<tr>\\n<td><code class=\\\"language-text\\\">IConfigureExecutionOptions</code></td>\\n<td><code class=\\\"language-text\\\">IConfigureExecution</code></td>\\n</tr>\\n<tr>\\n<td><code class=\\\"language-text\\\">GraphQLBuilderExtensions.AddMetrics</code></td>\\n<td><code class=\\\"language-text\\\">AddApolloTracing</code></td>\\n</tr>\\n<tr>\\n<td><code class=\\\"language-text\\\">ApolloTracingDocumentExecuter</code></td>\\n<td><code class=\\\"language-text\\\">AddApolloTracing</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>A few of the <code class=\\\"language-text\\\">DocumentExecuter</code> constructors have been removed that include <code class=\\\"language-text\\\">IConfigureExecutionOptions</code>.\\nNo changes to <code class=\\\"language-text\\\">ConfigureExecutionOptions</code> builder methods are required.</p>\\n<p><code class=\\\"language-text\\\">AddMetrics</code> contains functionality not present in <code class=\\\"language-text\\\">UseApolloTracing</code> and vice versa.\\nPlease consider the operation of the new <code class=\\\"language-text\\\">UseApolloTracing</code> method (see 'New Features' section above)\\nwhen replacing <code class=\\\"language-text\\\">AddMetrics</code> with <code class=\\\"language-text\\\">UseApolloTracing</code>. Remember that <code class=\\\"language-text\\\">UseApolloTracing</code> includes\\nfunctionality previously within <code class=\\\"language-text\\\">ApolloTracingDocumentExecuter</code> and/or <code class=\\\"language-text\\\">EnrichWithApolloTracing</code>.</p>\\n<h3 id=\\\"7-code-classlanguage-textglobalswitchesmapallenumerabletypescode-has-been-removed-only-specific-types-are-detected-as-lists\\\"><a href=\\\"#7-code-classlanguage-textglobalswitchesmapallenumerabletypescode-has-been-removed-only-specific-types-are-detected-as-lists\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>7. <code class=\\\"language-text\\\">GlobalSwitches.MapAllEnumerableTypes</code> has been removed; only specific types are detected as lists.</h3>\\n<p>When auto detecting graph types from CLR types (usually within <code class=\\\"language-text\\\">AutoRegisteringObjectGraphType</code> or the\\nexpression syntax of <code class=\\\"language-text\\\">Field(x => x.Member)</code>), previously any type except <code class=\\\"language-text\\\">string</code> that implemented\\n<code class=\\\"language-text\\\">IEnumerable</code> was considered a list type. This would includes types such as dictionary types, making\\nit impossible to register a CLR type that derives from a dictionary for automatic mapping.</p>\\n<p>Now only the following types or generic types are considered list types:</p>\\n<ul>\\n<li>Any array type</li>\\n<li><code class=\\\"language-text\\\">IEnumerable</code></li>\\n<li><code class=\\\"language-text\\\">IEnumerable&lt;T></code></li>\\n<li><code class=\\\"language-text\\\">IList&lt;T></code></li>\\n<li><code class=\\\"language-text\\\">List&lt;T></code></li>\\n<li><code class=\\\"language-text\\\">ICollection&lt;T></code></li>\\n<li><code class=\\\"language-text\\\">IReadOnlyCollection&lt;T></code></li>\\n<li><code class=\\\"language-text\\\">IReadOnlyList&lt;T></code></li>\\n<li><code class=\\\"language-text\\\">HashSet&lt;T></code></li>\\n<li><code class=\\\"language-text\\\">ISet&lt;T></code></li>\\n</ul>\\n<p>There is no change as compared to when <code class=\\\"language-text\\\">GlobalSwitches.MapAllEnumerableTypes</code> was set to <code class=\\\"language-text\\\">false</code>.</p>\\n<h3 id=\\\"8-unification-of-namespaces-for-di-extension-methods\\\"><a href=\\\"#8-unification-of-namespaces-for-di-extension-methods\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>8. Unification of namespaces for DI extension methods</h3>\\n<p>All extension methods to configure GraphQL.NET services within a dependency injection framework\\nwere moved into <code class=\\\"language-text\\\">GraphQL</code> namespace. Also class names were changed:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">GraphQL.DataLoader.GraphQLBuilderExtensions</code> -> <code class=\\\"language-text\\\">GraphQL.DataLoaderGraphQLBuilderExtensions</code></li>\\n<li><code class=\\\"language-text\\\">GraphQL.MemoryCache.GraphQLBuilderExtensions</code> -> <code class=\\\"language-text\\\">GraphQL.MemoryCacheGraphQLBuilderExtensions</code></li>\\n<li><code class=\\\"language-text\\\">GraphQL.MicrosoftDI.GraphQLBuilderExtensions</code> -> <code class=\\\"language-text\\\">GraphQL.MicrosoftDIGraphQLBuilderExtensions</code></li>\\n<li><code class=\\\"language-text\\\">GraphQL.NewtonsoftJson.GraphQLBuilderExtensions</code> -> <code class=\\\"language-text\\\">GraphQL.NewtonsoftJsonGraphQLBuilderExtensions</code></li>\\n<li><code class=\\\"language-text\\\">GraphQL.SystemTextJson.GraphQLBuilderExtensions</code> -> <code class=\\\"language-text\\\">GraphQL.SystemTextJsonGraphQLBuilderExtensions</code></li>\\n</ul>\\n<p>This change was done for better discoverability and usability of extension methods when configuring DI.</p>\\n<h3 id=\\\"9-code-classlanguage-textiresolvefieldcontextusercode-property-added\\\"><a href=\\\"#9-code-classlanguage-textiresolvefieldcontextusercode-property-added\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>9. <code class=\\\"language-text\\\">IResolveFieldContext.User</code> property added</h3>\\n<p>Custom implementations of <code class=\\\"language-text\\\">IResolveFieldContext</code> must implement the new <code class=\\\"language-text\\\">User</code> property.</p>\\n<h3 id=\\\"10-errors-do-not-serialize-the-code-classlanguage-textdatacode-property-within-the-response-by-default\\\"><a href=\\\"#10-errors-do-not-serialize-the-code-classlanguage-textdatacode-property-within-the-response-by-default\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>10. Errors do not serialize the <code class=\\\"language-text\\\">Data</code> property within the response by default.</h3>\\n<p>This change was made because various .NET services add data to the <code class=\\\"language-text\\\">Exception</code> instance\\nwhich may be unintentionally returned to the caller.</p>\\n<p>To revert to prior behavior, register a custom <code class=\\\"language-text\\\">ErrorInfoProvider</code> instance configured\\nto return the data to the caller.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token comment\\\">//</span>\\nservices<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddGraphQL</span><span class=\\\"token punctuation\\\">(</span>b <span class=\\\"token operator\\\">=></span> b\\n    <span class=\\\"token comment\\\">// add schema, serializer, etc</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddErrorInfoProvider</span><span class=\\\"token punctuation\\\">(</span>o <span class=\\\"token operator\\\">=></span> o<span class=\\\"token punctuation\\\">.</span>ExposeData <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"11-a-bunch-of-fieldxxx-apis-were-deprecated\\\"><a href=\\\"#11-a-bunch-of-fieldxxx-apis-were-deprecated\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>11. A bunch of FieldXXX APIs were deprecated</h3>\\n<p>After upgrading to v7 you will likely notice many compiler warnings with a message similar to the following:</p>\\n<blockquote>\\n<p>Please use one of the Field() methods returning FieldBuilder and the methods defined on it or just use\\nAddField() method directly. This method may be removed in a future release. For now you can continue to\\nuse this API but we do not encourage this.</p>\\n</blockquote>\\n<p>The goal of this <a href=\\\"https://github.com/graphql-dotnet/graphql-dotnet/pull/3237\\\">change</a> was to simplify\\nAPIs and guide developers with well-discovered APIs.</p>\\n<p>You will need to change a way of setting fields on your graph types. Instead of many <code class=\\\"language-text\\\">FieldXXX</code>\\noverloads, start configuring your field with one of the <code class=\\\"language-text\\\">Field</code> methods defined on <code class=\\\"language-text\\\">ComplexGraphType</code>.\\nAll such methods define a new field and return an instance of <code class=\\\"language-text\\\">FieldBuilder&lt;T,U></code>. Then continue to\\nconfigure the field with rich APIs provided by the returned builder. </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token comment\\\">// GraphQL 5.x</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">\\\"Argument name\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span> context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Description</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Argument name\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Resolve</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span> context<span class=\\\"token punctuation\\\">.</span>Source<span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\">// GraphQL 5.x</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">FieldAsync</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>CharacterInterface<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"hero\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">async</span> context <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">await</span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetDroidByIdAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"3\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ConfigureAwait</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>CharacterInterface<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"hero\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">async</span> context <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">await</span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetDroidByIdAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"3\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ConfigureAwait</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\">// GraphQL 5.x</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">FieldAsync</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>HumanType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">\\\"human\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token named-parameter punctuation\\\">arguments</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token punctuation\\\">{</span> Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">,</span> Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"id of the human\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">async</span> context <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">await</span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetHumanByIdAsync</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ConfigureAwait</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>HumanType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"human\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Argument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"id of the human\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">async</span> context <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">await</span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetHumanByIdAsync</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">GetArgument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ConfigureAwait</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\">// GraphQL 5.x</span>\\n<span class=\\\"token class-name\\\">Func<span class=\\\"token punctuation\\\">&lt;</span>IResolveFieldContext<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">object</span><span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">,</span> Task<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">?</span><span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> resolver <span class=\\\"token operator\\\">=</span> context <span class=\\\"token operator\\\">=></span> Task<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">FromResult</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"abc\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">FieldAsync</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> resolver<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\n<span class=\\\"token class-name\\\">Func<span class=\\\"token punctuation\\\">&lt;</span>IResolveFieldContext<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">object</span><span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">,</span> Task<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">?</span><span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> resolver <span class=\\\"token operator\\\">=</span> context <span class=\\\"token operator\\\">=></span> Task<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">FromResult</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"abc\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>resolver<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\">// GraphQL 5.x</span>\\n<span class=\\\"token class-name\\\">Func<span class=\\\"token punctuation\\\">&lt;</span>IResolveFieldContext<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">,</span> Task<span class=\\\"token punctuation\\\">&lt;</span>Droid<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> func <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">,</span> id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetDroidByIdAsync</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">FieldDelegate</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DroidType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">\\\"droid\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token named-parameter punctuation\\\">arguments</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token punctuation\\\">{</span> Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">,</span> Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"id of the droid\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> func\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\n<span class=\\\"token class-name\\\">Func<span class=\\\"token punctuation\\\">&lt;</span>IResolveFieldContext<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">,</span> Task<span class=\\\"token punctuation\\\">&lt;</span>Droid<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> func <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">,</span> id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> data<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetDroidByIdAsync</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>DroidType<span class=\\\"token punctuation\\\">,</span> Droid<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"droid\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Argument</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"id of the droid\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveDelegate</span><span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\">// GraphQL 5.x</span>\\n<span class=\\\"token class-name\\\">IObservable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">object</span><span class=\\\"token punctuation\\\">></span></span> observable <span class=\\\"token operator\\\">=</span> <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">FieldSubscribe</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MessageGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"messages\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token named-parameter punctuation\\\">subscribe</span><span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span> observable<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\n<span class=\\\"token class-name\\\">IObservable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">object</span><span class=\\\"token punctuation\\\">></span></span> observable <span class=\\\"token operator\\\">=</span> <span class=\\\"token range operator\\\">..</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MessageGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"messages\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveStream</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span> observable<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\">// GraphQL 5.x</span>\\n<span class=\\\"token class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span>IObservable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">object</span><span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> observable <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">FieldSubscribeAsync</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MessageGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"messages\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token named-parameter punctuation\\\">subscribeAsync</span><span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span> observable<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\">// GraphQL 7.x</span>\\n<span class=\\\"token class-name\\\">Task<span class=\\\"token punctuation\\\">&lt;</span>IObservable<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">object</span><span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> observable <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>MessageGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"messages\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveStreamAsync</span><span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">=></span> observable<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Also <code class=\\\"language-text\\\">ComplexGraphType.Field&lt;IntGraphType>(\\\"name\\\")</code> now returns <code class=\\\"language-text\\\">FieldBuilder</code> instead of <code class=\\\"language-text\\\">FieldType</code>.</p>\\n<h3 id=\\\"12-code-classlanguage-textsortordercode-property-added-to-code-classlanguage-texticonfigureexecutioncode\\\"><a href=\\\"#12-code-classlanguage-textsortordercode-property-added-to-code-classlanguage-texticonfigureexecutioncode\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>12. <code class=\\\"language-text\\\">SortOrder</code> property added to <code class=\\\"language-text\\\">IConfigureExecution</code></h3>\\n<p>If you have classes that implement <code class=\\\"language-text\\\">IConfigureExecution</code>, you will now need to also implement the\\nadded <code class=\\\"language-text\\\">SortOrder</code> property. The sort order determines the order that the <code class=\\\"language-text\\\">IConfigureExecution</code>\\ninstances are run, with the lowest value being run first.</p>\\n<p>The default sort order of configurations are as follows:</p>\\n<ul>\\n<li>100: Option configurations -- <code class=\\\"language-text\\\">Add</code> calls such as <code class=\\\"language-text\\\">AddValidationRule</code>, and <code class=\\\"language-text\\\">ConfigureExecutionOptions</code> calls</li>\\n<li>200: Execution configurations -- <code class=\\\"language-text\\\">Use</code> calls such as <code class=\\\"language-text\\\">UseApolloTracing</code>, and <code class=\\\"language-text\\\">ConfigureExecution</code> calls</li>\\n</ul>\\n<h3 id=\\\"13-interfaces-mapped-by-the-code-classlanguage-textautoregisteringgraphtypemappingprovidercode-now-generate-interface-graph-types-rather-than-object-graph-types\\\"><a href=\\\"#13-interfaces-mapped-by-the-code-classlanguage-textautoregisteringgraphtypemappingprovidercode-now-generate-interface-graph-types-rather-than-object-graph-types\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>13. Interfaces mapped by the <code class=\\\"language-text\\\">AutoRegisteringGraphTypeMappingProvider</code> now generate interface graph types rather than object graph types.</h3>\\n<p>If you use interfaces to contain your GraphQL attributes for your data models, or for any other reason\\nrely on the generation of object graph types for interface CLR types, you may wish to revert this design\\nchoice. Simply reconfigure the mapping provider as follows and interfaces will be generated as object graph\\ntypes as before:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">services<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddGraphQL</span><span class=\\\"token punctuation\\\">(</span>b <span class=\\\"token operator\\\">=></span> b\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">AddGraphTypeMappingProvider</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">AutoRegisteringGraphTypeMappingProvider</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token comment\\\">// other calls</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"14-graph-types-cannot-be-used-as-data-models\\\"><a href=\\\"#14-graph-types-cannot-be-used-as-data-models\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>14. Graph types cannot be used as data models</h3>\\n<p>From version 7.1 on, graph types cannot be used as data models. This is because the graph types are\\ndesigned to be used as schema definitions, and not as data models. The following classes\\nwill now throw an exception if a graph type is used as a data model:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">ObjectGraphType&lt;TSourceType></code></li>\\n<li><code class=\\\"language-text\\\">InputObjectGraphType&lt;TSourceType></code></li>\\n<li><code class=\\\"language-text\\\">AutoRegisteringObjectGraphType&lt;TSourceType></code></li>\\n<li><code class=\\\"language-text\\\">AutoRegisteringInputObjectGraphType&lt;TSourceType></code></li>\\n<li><code class=\\\"language-text\\\">AutoRegisteringInterfaceGraphType&lt;TSourceType></code></li>\\n<li></li>\\n</ul>\\n<p>If it is necessary to do so, you can derive from the <code class=\\\"language-text\\\">ObjectGraphType</code> or <code class=\\\"language-text\\\">InputObjectGraphType</code> classes\\ninstead of the generic version.</p>\\n<h3 id=\\\"15-different-instances-of-the-same-graph-type-cannot-be-referenced-in-the-same-schema\\\"><a href=\\\"#15-different-instances-of-the-same-graph-type-cannot-be-referenced-in-the-same-schema\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>15. Different instances of the same graph type cannot be referenced in the same schema</h3>\\n<p>From version 7.1.1 on, different instances of the same graph type cannot be referenced in the same schema.\\nThis prevents the situation where some graph types are not initialized and throw errors when used.\\nIf this is causing a problem (perhaps with graph types that are dynamically generated, for instance),\\ncreate and pull from a dictionary of instantiated types, or use <code class=\\\"language-text\\\">GraphQLTypeReference</code> to reference\\nthe graph type by name.</p>\",\"fields\":{\"relativePath\":\"docs/migrations/migration7.md\"}},\"site\":{\"siteMetadata\":{\"githubEditUrl\":\"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site\"}}},\"pathContext\":{\"relativePath\":\"docs/migrations/migration7.md\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-migrations-migration-7.json\n// module id = 349\n// module chunks = 171986746120192"],"sourceRoot":""}