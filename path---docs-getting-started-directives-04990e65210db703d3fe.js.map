{"version":3,"sources":["webpack:///path---docs-getting-started-directives-04990e65210db703d3fe.js","webpack:///./.cache/json/docs-getting-started-directives.json"],"names":["webpackJsonp","315","module","exports","data","markdownRemark","html","fields","relativePath","site","siteMetadata","githubEditUrl","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAAgmkEC,QAA0zGC,aAAA,uCAAqDC,MAASC,cAAgBC,cAAA,6EAA4FC,aAAgBJ,aAAA","file":"path---docs-getting-started-directives-04990e65210db703d3fe.js","sourcesContent":["webpackJsonp([244442750240678],{\n\n/***/ 315:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"directives\\\"><a href=\\\"#directives\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Directives</h1>\\n<p>A directive can be attached to almost every part of the schema - field, query, enum, fragment inclusion etc. and can affect execution\\nof the query in any way the server desires. The core GraphQL <a href=\\\"https://spec.graphql.org/October2021/#sec-Type-System.Directives\\\">specification</a>\\nincludes exactly four directives.</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">@include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT</code> Only include this field in the result if the argument is true.</li>\\n<li><code class=\\\"language-text\\\">@skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT</code> Skip this field if the argument is true.</li>\\n<li><code class=\\\"language-text\\\">@deprecated(reason: String = \\\"No longer supported\\\") on FIELD_DEFINITION | ENUM_VALUE</code> Indicates deprecated portions of a GraphQL serviceâ€™s schema, such as deprecated fields on a type or deprecated enum values.</li>\\n<li><code class=\\\"language-text\\\">@specifiedBy(url: String!) on SCALAR</code> Provides a scalar specification URL for specifying the behavior of custom scalar types.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">query</span> <span class=\\\"token definition-query function\\\">HeroQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$id</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">ID</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$withFriends</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">Boolean</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property-query\\\">hero</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">id</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$id</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">name</span>\\n    <span class=\\\"token property\\\">friends</span> <span class=\\\"token directive function\\\">@include</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">if</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$withFriends</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">name</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"executable-directives-and-type-system-directives\\\"><a href=\\\"#executable-directives-and-type-system-directives\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Executable Directives and Type System Directives</h1>\\n<p>There are two types of directives - those that are applied on incoming requests (so called client directives) and applied\\non the schema (so called server directives). This is determined by the specified <a href=\\\"https://spec.graphql.org/October2021/#sec-Type-System.Directives\\\">locations</a>\\nwhen defining the directive. Also it is acceptable to define a directive that will be both client-side and server-side.</p>\\n<p>Server-side examples:</p>\\n<ul>\\n<li><a href=\\\"https://spec.graphql.org/October2021/#sec--deprecated\\\">@deprecated</a></li>\\n<li><a href=\\\"https://spec.graphql.org/October2021/#sec--specifiedBy\\\">@specifiedBy</a></li>\\n</ul>\\n<p>Client-side examples:</p>\\n<ul>\\n<li><a href=\\\"https://spec.graphql.org/October2021/#sec--skip\\\">@skip</a></li>\\n<li><a href=\\\"https://spec.graphql.org/October2021/#sec--include\\\">@include</a></li>\\n</ul>\\n<h1 id=\\\"repeatable-directives\\\"><a href=\\\"#repeatable-directives\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Repeatable Directives</h1>\\n<p>In GraphQL language a directive may be defined as repeatable by including the <code class=\\\"language-text\\\">repeatable</code> keyword.\\nRepeatable directives are often useful when the same directive should be used with different arguments\\nat a single location, especially in cases where additional information needs to be provided to a type\\nor schema extension via a directive. GraphQL.NET v4 supports repeatable directives. To make your directive\\nrepeatable in GraphQL.NET set <code class=\\\"language-text\\\">Directive.Repeatable</code> property to <code class=\\\"language-text\\\">true</code>.</p>\\n<h1 id=\\\"basic-steps-when-adding-a-directive\\\"><a href=\\\"#basic-steps-when-adding-a-directive\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Basic steps when adding a directive</h1>\\n<ol>\\n<li>Define your custom directive.</li>\\n<li>Apply the directive to the desired schema elements.</li>\\n<li>Write the code that will implement the logic of the directive.</li>\\n</ol>\\n<h1 id=\\\"defining-your-custom-directive\\\"><a href=\\\"#defining-your-custom-directive\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Defining your custom directive</h1>\\n<p>To define your custom directive create a directive class inherited from <code class=\\\"language-text\\\">Directive</code>.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyDirective</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">Directive</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"my\\\"</span><span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>Field<span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>FragmentSpread<span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>InlineFragment<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"My super directive\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        Arguments <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"secret\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Some secret\\\"</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>In SDL this definition will look like the following:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">directive</span> <span class=\\\"token directive function\\\">@my</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">secret</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">on</span> <span class=\\\"token constant\\\">FIELD</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token constant\\\">FRAGMENT_SPREAD</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token constant\\\">INLINE_FRAGMENT</span></code></pre>\\n      </div>\\n<p>Then register an instance of this class within your schema.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MySchema</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">Schema</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MySchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Directives<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Register</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">MyDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"how-to-apply-a-directive\\\"><a href=\\\"#how-to-apply-a-directive\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>How to apply a directive</h1>\\n<p>After you have defined your directive, then it can be applied to the corresponding elements of the schema.\\nIf you try to apply the directive in locations that are not allowed for this, an exception will be thrown\\nwhen initializing the schema. Also, during the schema initialization, the compliance of all applied\\ndirectives with the corresponding directives' definitions (names, number and types of parameters, and so on)\\nwill be checked.</p>\\n<p>The following is an example of using the server-side <code class=\\\"language-text\\\">@length</code> directive.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">LengthDirective</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">Directive</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// The meaning of this property will be explained below in the 'Directives and introspection' paragraph. </span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">bool</span><span class=\\\"token punctuation\\\">?</span></span> Introspectable <span class=\\\"token operator\\\">=></span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">LengthDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"length\\\"</span><span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>InputFieldDefinition<span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>ArgumentDefinition<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Used to specify the minimum and/or maximum length for an input field or argument.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        Arguments <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>IntGraphType<span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"min\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"If specified, specifies the minimum length that the input field or argument must have.\\\"</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>IntGraphType<span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"max\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"If specified, specifies the maximum length that the input field or argument must have.\\\"</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>In SDL this definition will look like the following:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">directive</span> <span class=\\\"token directive function\\\">@length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">min</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token attr-name\\\">max</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">Int</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">on</span> <span class=\\\"token constant\\\">INPUT_FIELD_DEFINITION</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token constant\\\">ARGUMENT_DEFINITION</span></code></pre>\\n      </div>\\n<p>Applying <code class=\\\"language-text\\\">@length</code> directive to an input field.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ComplexInput</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">InputObjectGraphType</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">ComplexInput</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"ComplexInput\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IntGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"intField\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"stringField\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ApplyDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"length\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"min\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"max\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Applying <code class=\\\"language-text\\\">@length</code> directive to a field argument.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Query</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">Query</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>Human<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token string\\\">\\\"human\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token named-parameter punctuation\\\">arguments</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span>\\n                <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>IdGraphType<span class=\\\"token punctuation\\\">></span></span>\\n                <span class=\\\"token punctuation\\\">{</span>\\n                    Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"id\\\"</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ApplyDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"length\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"min\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"max\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Above was an example of how to create and how to apply the <code class=\\\"language-text\\\">@length</code> directive. Also, for the directive\\nto work, additional code is required that would use the requirements specified by the directive. The\\nimplementation of this code for <code class=\\\"language-text\\\">@length</code> directive is intentionally omitted, due to the complexity,\\nthose who interested can look at it in the <a href=\\\"https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL/Validation/Rules.Custom/InputFieldsAndArgumentsOfCorrectLength.cs\\\">sources</a>.\\nFor a much simpler example of such an implementation, see <a href=\\\"#how-do-directives-work\\\">How do directives work</a>\\nparagraph below describing the <code class=\\\"language-text\\\">@upper</code> directive.</p>\\n<h1 id=\\\"how-do-directives-work\\\"><a href=\\\"#how-do-directives-work\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>How do directives work</h1>\\n<p>So you have defined a directive. Then you have applied (or not in case of client-side directive) this\\ndirective to the required locations in your schema. What's next? So far, all you have done is set some\\nmeta information, and there is still no code anywhere that is responsible for the actions of the added\\ndirective. The next step is to define a class that will customize the schema using the information\\nprovided by the applied directive. This class should implement <code class=\\\"language-text\\\">ISchemaNodeVisitor</code> interface.</p>\\n<p>Let's imagine an <code class=\\\"language-text\\\">@upper</code> directive.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UpperDirective</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">Directive</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">UpperDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"upper\\\"</span><span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>FieldDefinition<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Converts the value of string fields to uppercase.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>In SDL this definition will look like the following:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">directive</span> <span class=\\\"token directive function\\\">@upper</span> <span class=\\\"token keyword\\\">on</span> <span class=\\\"token constant\\\">FIELD_DEFINITION</span></code></pre>\\n      </div>\\n<p>To make this directive work, you need to write a class like the following by implementing the necessary\\nschema visitor methods. <code class=\\\"language-text\\\">BaseSchemaNodeVisitor</code> is just a base class implementing <code class=\\\"language-text\\\">ISchemaNodeVisitor</code>\\ninterface with empty <code class=\\\"language-text\\\">virtual</code> methods, so it does nothing. For this example, we need to override just\\none method - <code class=\\\"language-text\\\">VisitFieldDefinition</code>. This method wraps the original field resolver.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UppercaseDirectiveVisitor</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">BaseSchemaNodeVisitor</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">void</span></span> <span class=\\\"token function\\\">VisitFieldDefinition</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">FieldType</span> field<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IObjectGraphType</span> type<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">ISchema</span> schema<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> applied <span class=\\\"token operator\\\">=</span> field<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">FindAppliedDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"upper\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>applied <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> inner <span class=\\\"token operator\\\">=</span> field<span class=\\\"token punctuation\\\">.</span>Resolver <span class=\\\"token operator\\\">??</span> NameFieldResolver<span class=\\\"token punctuation\\\">.</span>Instance<span class=\\\"token punctuation\\\">;</span>\\n            field<span class=\\\"token punctuation\\\">.</span>Resolver <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">AsyncFieldResolver<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">object</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">async</span> context <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">object</span></span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> inner<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token keyword\\\">return</span> result <span class=\\\"token keyword\\\">is</span> <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">string</span></span> <span class=\\\"token return-type class-name\\\">str\\n                    <span class=\\\"token punctuation\\\">?</span></span> str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToUpperInvariant</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token punctuation\\\">:</span> result<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>And then register schema visitor within your schema just like you did to register the directive.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MySchema</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">Schema</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MySchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">RegisterVisitor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">UppercaseDirectiveVisitor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token comment\\\">// there are also registration methods that take the type, see below for details</span>\\n        <span class=\\\"token comment\\\">// RegisterVisitor(typeof(UppercaseDirectiveVisitor));</span>\\n        <span class=\\\"token comment\\\">// this.RegisterVisitor&lt;UppercaseDirectiveVisitor>(); // extension method</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Note that a schema visitor, unlike a directive, can be registered not only as an instance but also as\\na type. In this case, when initializing the schema, schema visitor will be created according to how\\nyou configure the DI container. In other words, schema visitors support dependency injection. The\\nlibrary resolves a schema visitor only once and caches it for the lifetime of the <code class=\\\"language-text\\\">Schema</code>. For more\\ninformation about lifetimes see <a href=\\\"dependency-injection#schema-service-lifetime\\\">Schema Service Lifetime</a>. </p>\\n<h1 id=\\\"is-it-mandatory-to-create-a-schema-visitor-in-addition-to-the-directive\\\"><a href=\\\"#is-it-mandatory-to-create-a-schema-visitor-in-addition-to-the-directive\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Is it mandatory to create a schema visitor in addition to the directive</h1>\\n<p>No. The applied directives (along with the directive definition itself) can exist without the corresponding\\nschema visitors. In this case, the directive is usually set to provide additional information to clients by\\nmeans of introspection. For example, consider such server-side <code class=\\\"language-text\\\">@author</code> directive:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AuthorDirective</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">Directive</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">AuthorDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"author\\\"</span><span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>FieldDefinition<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Provides information about the author of the field\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        Arguments <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Author's name\\\"</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"email\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n               Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Email where you can ask your question\\\"</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>In SDL this definition will look like the following:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">directive</span> <span class=\\\"token directive function\\\">@author</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token attr-name\\\">email</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">on</span> <span class=\\\"token constant\\\">FIELD_DEFINITION</span></code></pre>\\n      </div>\\n<p>Then the directive can be applied like this:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Query</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">Query</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>Human<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"human\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">GetHuman</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ApplyDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"author\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"Tom Pumpkin\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"email\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"ztx0673@gmail.com\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>As you can see, the GraphQL server simply provides additional information that is available to clients through introspection.\\nThe GraphQL server does not assume any processing of it.</p>\\n<p>Another case is when the directive is not used by a corresponding schema visitor, but by another GraphQL.NET component, for\\nexample, a validation rule. Consider the <a href=\\\"#How-to-apply-a-directive\\\">@length</a> directive example above. The purpose of this\\ndirective for server is to validate inputs before executing a GraphQL request. The same can be said for a client - it wouldn't\\nmake sense to send a request with data not within the declared length limits. That is, of course, if client is ready to\\nrecognize a custom server-defined directive.</p>\\n<h1 id=\\\"can-a-schema-visitor-be-used-without-creatingregistering-a-directive\\\"><a href=\\\"#can-a-schema-visitor-be-used-without-creatingregistering-a-directive\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Can a schema visitor be used without creating/registering a directive</h1>\\n<p>Yes. Strictly speaking, schema visitors do not necessarily process directives. <code class=\\\"language-text\\\">ISchemaNodeVisitor</code> interface is a general\\nmeans of traversing a schema. You can traverse your schema at any time using the <code class=\\\"language-text\\\">Run</code> extension method. Just remember that\\nif your schema visitor modifies the schema, then you must ensure synchronization if you call <code class=\\\"language-text\\\">Run</code> method in parallel with\\nthe processing of incoming GraphQL requests to the schema.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> schema <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">MySchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> visitor <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">MyVisitor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nvisitor<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Run</span><span class=\\\"token punctuation\\\">(</span>schema<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h1 id=\\\"directives-and-introspection\\\"><a href=\\\"#directives-and-introspection\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Directives and introspection</h1>\\n<p>Currently, the GraphQL specification allows introspection only of directives defined in the schema but does not allow\\nintrospection of so called <em>applied</em> directives.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__Schema</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">description</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">types</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__Type</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">queryType</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">mutationType</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span>\\n  <span class=\\\"token attr-name\\\">subscriptionType</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span>\\n  <span class=\\\"token attr-name\\\">directives</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__Directive</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>   &lt;----- <span class=\\\"token property\\\">only</span> <span class=\\\"token property\\\">defined</span> <span class=\\\"token property\\\">directives</span> <span class=\\\"token property\\\">here</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Since v4 Graph.NET provides the ability to apply directives to the schema elements and expose this user-defined\\nmeta-information via introspection. This is an experimental feature that is not in the official specification (yet).\\nTo enable it call <code class=\\\"language-text\\\">ISchema.EnableExperimentalIntrospectionFeatures()</code>. This method also makes it possible to\\nexpose directives' <code class=\\\"language-text\\\">isRepeatable</code> field via introspection (a feature from the GraphQL specification working draft).\\nNote that you can also set the <code class=\\\"language-text\\\">mode</code> parameter in this method which by default equals to <code class=\\\"language-text\\\">ExecutionOnly</code>.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token comment\\\">/// &lt;summary></span>\\n<span class=\\\"token comment\\\">/// A way to use experimental features.</span>\\n<span class=\\\"token comment\\\">/// &lt;/summary></span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">enum</span> <span class=\\\"token class-name\\\">ExperimentalIntrospectionFeaturesMode</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">/// &lt;summary></span>\\n    <span class=\\\"token comment\\\">/// Allow experimental features only for client queries but not for standard introspection</span>\\n    <span class=\\\"token comment\\\">/// request. This means that the client, in response to a standard introspection request,</span>\\n    <span class=\\\"token comment\\\">/// receives a standard response without any new fields and types. However, client CAN</span>\\n    <span class=\\\"token comment\\\">/// make requests to the server using the new fields and types. This mode is needed in order</span>\\n    <span class=\\\"token comment\\\">/// to bypass the problem of tools such as GraphQL Playground, Voyager, GraphiQL that require</span>\\n    <span class=\\\"token comment\\\">/// a standard response to an introspection request and refuse to work correctly if there are</span>\\n    <span class=\\\"token comment\\\">/// any unknown fields or types in the response.</span>\\n    <span class=\\\"token comment\\\">/// &lt;/summary></span>\\n    ExecutionOnly<span class=\\\"token punctuation\\\">,</span>\\n\\n    <span class=\\\"token comment\\\">/// &lt;summary></span>\\n    <span class=\\\"token comment\\\">/// Allow experimental features for both standard introspection query and client queries.</span>\\n    <span class=\\\"token comment\\\">/// This means that the client, in response to a standard introspection request, receives</span>\\n    <span class=\\\"token comment\\\">/// a response augmented with the new fields and types. Client can make requests to the</span>\\n    <span class=\\\"token comment\\\">/// server using the new fields and types.</span>\\n    <span class=\\\"token comment\\\">/// &lt;/summary></span>\\n    IntrospectionAndExecution\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Introspection schema after enabling experimental features (new types and fields are highlighted).</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__Schema</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">description</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">types</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__Type</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">queryType</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">mutationType</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span>\\n  <span class=\\\"token attr-name\\\">subscriptionType</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span>\\n  <span class=\\\"token attr-name\\\">directives</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__Directive</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">appliedDirectives</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__AppliedDirective</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>   &lt;----- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">FIELD</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__Type</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">kind</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__TypeKind</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">description</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">fields</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">includeDeprecated</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">Boolean</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__Field</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token attr-name\\\">interfaces</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__Type</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token attr-name\\\">possibleTypes</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__Type</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token attr-name\\\">enumValues</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">includeDeprecated</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">Boolean</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__EnumValue</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token attr-name\\\">inputFields</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__InputValue</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token attr-name\\\">ofType</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span>\\n  <span class=\\\"token attr-name\\\">appliedDirectives</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__AppliedDirective</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>   &lt;----- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">FIELD</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__Field</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">description</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">args</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__InputValue</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">type</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">isDeprecated</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">Boolean</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">deprecationReason</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">appliedDirectives</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__AppliedDirective</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>   &lt;----- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">FIELD</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__InputValue</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">description</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">type</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">defaultValue</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">appliedDirectives</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__AppliedDirective</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>   &lt;----- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">FIELD</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__EnumValue</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">description</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">isDeprecated</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">Boolean</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">deprecationReason</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">appliedDirectives</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__AppliedDirective</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>   &lt;----- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">FIELD</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">enum</span> <span class=\\\"token class-name\\\">__TypeKind</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token constant\\\">SCALAR</span>\\n  <span class=\\\"token constant\\\">OBJECT</span>\\n  <span class=\\\"token constant\\\">INTERFACE</span>\\n  <span class=\\\"token constant\\\">UNION</span>\\n  <span class=\\\"token constant\\\">ENUM</span>\\n  <span class=\\\"token constant\\\">INPUT_OBJECT</span>\\n  <span class=\\\"token constant\\\">LIST</span>\\n  <span class=\\\"token constant\\\">NON_NULL</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__Directive</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">description</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">locations</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__DirectiveLocation</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">args</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__InputValue</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">isRepeatable</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">Boolean</span><span class=\\\"token operator\\\">!</span>                      &lt;----- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">FIELD</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">FROM</span> <span class=\\\"token constant\\\">THE</span> <span class=\\\"token constant\\\">WORKING</span> <span class=\\\"token constant\\\">DRAFT</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token attr-name\\\">appliedDirectives</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__AppliedDirective</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>   &lt;----- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">FIELD</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">enum</span> <span class=\\\"token class-name\\\">__DirectiveLocation</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token constant\\\">QUERY</span>\\n  <span class=\\\"token constant\\\">MUTATION</span>\\n  <span class=\\\"token constant\\\">SUBSCRIPTION</span>\\n  <span class=\\\"token constant\\\">FIELD</span>\\n  <span class=\\\"token constant\\\">FRAGMENT_DEFINITION</span>\\n  <span class=\\\"token constant\\\">FRAGMENT_SPREAD</span>\\n  <span class=\\\"token constant\\\">INLINE_FRAGMENT</span>\\n  <span class=\\\"token constant\\\">SCHEMA</span>\\n  <span class=\\\"token constant\\\">SCALAR</span>\\n  <span class=\\\"token constant\\\">OBJECT</span>\\n  <span class=\\\"token constant\\\">FIELD_DEFINITION</span>\\n  <span class=\\\"token constant\\\">ARGUMENT_DEFINITION</span>\\n  <span class=\\\"token constant\\\">INTERFACE</span>\\n  <span class=\\\"token constant\\\">UNION</span>\\n  <span class=\\\"token constant\\\">ENUM</span>\\n  <span class=\\\"token constant\\\">ENUM_VALUE</span>\\n  <span class=\\\"token constant\\\">INPUT_OBJECT</span>\\n  <span class=\\\"token constant\\\">INPUT_FIELD_DEFINITION</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__AppliedDirective</span> <span class=\\\"token punctuation\\\">{</span>                     &lt;--- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">INTROSPECTION</span> <span class=\\\"token constant\\\">TYPE</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">args</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__DirectiveArgument</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__DirectiveArgument</span> <span class=\\\"token punctuation\\\">{</span>                    &lt;--- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">INTROSPECTION</span> <span class=\\\"token constant\\\">TYPE</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">value</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>To make your defined directive and all its applications to the schema elements available through\\nintrospection, override the <code class=\\\"language-text\\\">Introspectable</code> property of your directive.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyDirective</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">Directive</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"my\\\"</span><span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>Field<span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>FragmentSpread<span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>InlineFragment<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"My super directive\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        Arguments <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"secret\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Some secret\\\"</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">bool</span><span class=\\\"token punctuation\\\">?</span></span> Introspectable <span class=\\\"token operator\\\">=></span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>If you do not explicitly set this property (either to <code class=\\\"language-text\\\">true</code> or <code class=\\\"language-text\\\">false</code>) then by default your\\ndirective definition along with all applications of this directive to the schema elements will\\nbe present in the introspection response if and only if directive definition has all its locations\\nof type <a href=\\\"https://spec.graphql.org/October2021/#ExecutableDirectiveLocation\\\"><code class=\\\"language-text\\\">ExecutableDirectiveLocation</code></a>\\n(so called client-side directive).</p>\\n<h1 id=\\\"directive-vs-field-middleware\\\"><a href=\\\"#directive-vs-field-middleware\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Directive vs Field Middleware</h1>\\n<p>You can think of a Field Middleware as something global that controls how all fields of all types\\nin the schema are resolved. A directive, at the same time, would only affect specific schema elements\\nand only those elements. Moreover, a directive is not limited to field resolvers like middleware is.\\nFor more information about field middlewares see <a href=\\\"https://graphql-dotnet.github.io/docs/getting-started/field-middleware\\\">Field Middleware</a>.</p>\\n<h1 id=\\\"existing-implementations\\\"><a href=\\\"#existing-implementations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Existing implementations</h1>\\n<p>There has long been a need in the community for a specification to describe the possibility of\\ngetting <em>applied</em> directives through introspection. An example is <a href=\\\"https://github.com/graphql/graphql-spec/issues/300\\\">issue-300</a>\\n(almost 4 years old at the time of this writing). Obviously, some projects couldn't wait any\\nlonger and somehow added <em>applied</em> directive support on their own. One such project is this one - GraphQL.NET.\\nThe <a href=\\\"https://github.com/graphql-java/graphql-java\\\">graphql-java</a> project followed a <a href=\\\"https://github.com/graphql-java/graphql-java/pull/2221\\\">similar</a>\\npath. Perhaps there are others, the page will be updated.</p>\\n<p>We hope that this consistency helps the GraphQL world in the absence of a proper GraphQL specification\\nmechanism for getting <em>applied</em> directives through introspection. If other projects on other platforms/languages\\nsupport <em>applied</em> directives in this form, it will become a de facto standard and speed up the specification process.</p>\",\"fields\":{\"relativePath\":\"docs/getting-started/directives.md\"}},\"site\":{\"siteMetadata\":{\"githubEditUrl\":\"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site\"}}},\"pathContext\":{\"relativePath\":\"docs/getting-started/directives.md\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-getting-started-directives-04990e65210db703d3fe.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"directives\\\"><a href=\\\"#directives\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Directives</h1>\\n<p>A directive can be attached to almost every part of the schema - field, query, enum, fragment inclusion etc. and can affect execution\\nof the query in any way the server desires. The core GraphQL <a href=\\\"https://spec.graphql.org/October2021/#sec-Type-System.Directives\\\">specification</a>\\nincludes exactly four directives.</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">@include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT</code> Only include this field in the result if the argument is true.</li>\\n<li><code class=\\\"language-text\\\">@skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT</code> Skip this field if the argument is true.</li>\\n<li><code class=\\\"language-text\\\">@deprecated(reason: String = \\\"No longer supported\\\") on FIELD_DEFINITION | ENUM_VALUE</code> Indicates deprecated portions of a GraphQL serviceâ€™s schema, such as deprecated fields on a type or deprecated enum values.</li>\\n<li><code class=\\\"language-text\\\">@specifiedBy(url: String!) on SCALAR</code> Provides a scalar specification URL for specifying the behavior of custom scalar types.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">query</span> <span class=\\\"token definition-query function\\\">HeroQuery</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$id</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">ID</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$withFriends</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">Boolean</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property-query\\\">hero</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">id</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$id</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">name</span>\\n    <span class=\\\"token property\\\">friends</span> <span class=\\\"token directive function\\\">@include</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">if</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$withFriends</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">name</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"executable-directives-and-type-system-directives\\\"><a href=\\\"#executable-directives-and-type-system-directives\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Executable Directives and Type System Directives</h1>\\n<p>There are two types of directives - those that are applied on incoming requests (so called client directives) and applied\\non the schema (so called server directives). This is determined by the specified <a href=\\\"https://spec.graphql.org/October2021/#sec-Type-System.Directives\\\">locations</a>\\nwhen defining the directive. Also it is acceptable to define a directive that will be both client-side and server-side.</p>\\n<p>Server-side examples:</p>\\n<ul>\\n<li><a href=\\\"https://spec.graphql.org/October2021/#sec--deprecated\\\">@deprecated</a></li>\\n<li><a href=\\\"https://spec.graphql.org/October2021/#sec--specifiedBy\\\">@specifiedBy</a></li>\\n</ul>\\n<p>Client-side examples:</p>\\n<ul>\\n<li><a href=\\\"https://spec.graphql.org/October2021/#sec--skip\\\">@skip</a></li>\\n<li><a href=\\\"https://spec.graphql.org/October2021/#sec--include\\\">@include</a></li>\\n</ul>\\n<h1 id=\\\"repeatable-directives\\\"><a href=\\\"#repeatable-directives\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Repeatable Directives</h1>\\n<p>In GraphQL language a directive may be defined as repeatable by including the <code class=\\\"language-text\\\">repeatable</code> keyword.\\nRepeatable directives are often useful when the same directive should be used with different arguments\\nat a single location, especially in cases where additional information needs to be provided to a type\\nor schema extension via a directive. GraphQL.NET v4 supports repeatable directives. To make your directive\\nrepeatable in GraphQL.NET set <code class=\\\"language-text\\\">Directive.Repeatable</code> property to <code class=\\\"language-text\\\">true</code>.</p>\\n<h1 id=\\\"basic-steps-when-adding-a-directive\\\"><a href=\\\"#basic-steps-when-adding-a-directive\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Basic steps when adding a directive</h1>\\n<ol>\\n<li>Define your custom directive.</li>\\n<li>Apply the directive to the desired schema elements.</li>\\n<li>Write the code that will implement the logic of the directive.</li>\\n</ol>\\n<h1 id=\\\"defining-your-custom-directive\\\"><a href=\\\"#defining-your-custom-directive\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Defining your custom directive</h1>\\n<p>To define your custom directive create a directive class inherited from <code class=\\\"language-text\\\">Directive</code>.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyDirective</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">Directive</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"my\\\"</span><span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>Field<span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>FragmentSpread<span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>InlineFragment<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"My super directive\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        Arguments <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"secret\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Some secret\\\"</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>In SDL this definition will look like the following:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">directive</span> <span class=\\\"token directive function\\\">@my</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">secret</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">on</span> <span class=\\\"token constant\\\">FIELD</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token constant\\\">FRAGMENT_SPREAD</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token constant\\\">INLINE_FRAGMENT</span></code></pre>\\n      </div>\\n<p>Then register an instance of this class within your schema.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MySchema</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">Schema</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MySchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Directives<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Register</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">MyDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"how-to-apply-a-directive\\\"><a href=\\\"#how-to-apply-a-directive\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>How to apply a directive</h1>\\n<p>After you have defined your directive, then it can be applied to the corresponding elements of the schema.\\nIf you try to apply the directive in locations that are not allowed for this, an exception will be thrown\\nwhen initializing the schema. Also, during the schema initialization, the compliance of all applied\\ndirectives with the corresponding directives' definitions (names, number and types of parameters, and so on)\\nwill be checked.</p>\\n<p>The following is an example of using the server-side <code class=\\\"language-text\\\">@length</code> directive.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">LengthDirective</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">Directive</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// The meaning of this property will be explained below in the 'Directives and introspection' paragraph. </span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">bool</span><span class=\\\"token punctuation\\\">?</span></span> Introspectable <span class=\\\"token operator\\\">=></span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">LengthDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"length\\\"</span><span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>InputFieldDefinition<span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>ArgumentDefinition<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Used to specify the minimum and/or maximum length for an input field or argument.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        Arguments <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>IntGraphType<span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"min\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"If specified, specifies the minimum length that the input field or argument must have.\\\"</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>IntGraphType<span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"max\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"If specified, specifies the maximum length that the input field or argument must have.\\\"</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>In SDL this definition will look like the following:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">directive</span> <span class=\\\"token directive function\\\">@length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">min</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">Int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token attr-name\\\">max</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">Int</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">on</span> <span class=\\\"token constant\\\">INPUT_FIELD_DEFINITION</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token constant\\\">ARGUMENT_DEFINITION</span></code></pre>\\n      </div>\\n<p>Applying <code class=\\\"language-text\\\">@length</code> directive to an input field.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ComplexInput</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">InputObjectGraphType</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">ComplexInput</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"ComplexInput\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>IntGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"intField\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"stringField\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ApplyDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"length\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"min\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"max\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Applying <code class=\\\"language-text\\\">@length</code> directive to a field argument.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Query</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">Query</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>Human<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token string\\\">\\\"human\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token named-parameter punctuation\\\">arguments</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span>\\n                <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>IdGraphType<span class=\\\"token punctuation\\\">></span></span>\\n                <span class=\\\"token punctuation\\\">{</span>\\n                    Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"id\\\"</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ApplyDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"length\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"min\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"max\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Above was an example of how to create and how to apply the <code class=\\\"language-text\\\">@length</code> directive. Also, for the directive\\nto work, additional code is required that would use the requirements specified by the directive. The\\nimplementation of this code for <code class=\\\"language-text\\\">@length</code> directive is intentionally omitted, due to the complexity,\\nthose who interested can look at it in the <a href=\\\"https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL/Validation/Rules.Custom/InputFieldsAndArgumentsOfCorrectLength.cs\\\">sources</a>.\\nFor a much simpler example of such an implementation, see <a href=\\\"#how-do-directives-work\\\">How do directives work</a>\\nparagraph below describing the <code class=\\\"language-text\\\">@upper</code> directive.</p>\\n<h1 id=\\\"how-do-directives-work\\\"><a href=\\\"#how-do-directives-work\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>How do directives work</h1>\\n<p>So you have defined a directive. Then you have applied (or not in case of client-side directive) this\\ndirective to the required locations in your schema. What's next? So far, all you have done is set some\\nmeta information, and there is still no code anywhere that is responsible for the actions of the added\\ndirective. The next step is to define a class that will customize the schema using the information\\nprovided by the applied directive. This class should implement <code class=\\\"language-text\\\">ISchemaNodeVisitor</code> interface.</p>\\n<p>Let's imagine an <code class=\\\"language-text\\\">@upper</code> directive.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UpperDirective</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">Directive</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">UpperDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"upper\\\"</span><span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>FieldDefinition<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Converts the value of string fields to uppercase.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>In SDL this definition will look like the following:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">directive</span> <span class=\\\"token directive function\\\">@upper</span> <span class=\\\"token keyword\\\">on</span> <span class=\\\"token constant\\\">FIELD_DEFINITION</span></code></pre>\\n      </div>\\n<p>To make this directive work, you need to write a class like the following by implementing the necessary\\nschema visitor methods. <code class=\\\"language-text\\\">BaseSchemaNodeVisitor</code> is just a base class implementing <code class=\\\"language-text\\\">ISchemaNodeVisitor</code>\\ninterface with empty <code class=\\\"language-text\\\">virtual</code> methods, so it does nothing. For this example, we need to override just\\none method - <code class=\\\"language-text\\\">VisitFieldDefinition</code>. This method wraps the original field resolver.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UppercaseDirectiveVisitor</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">BaseSchemaNodeVisitor</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">void</span></span> <span class=\\\"token function\\\">VisitFieldDefinition</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">FieldType</span> field<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">IObjectGraphType</span> type<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">ISchema</span> schema<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> applied <span class=\\\"token operator\\\">=</span> field<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">FindAppliedDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"upper\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>applied <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> inner <span class=\\\"token operator\\\">=</span> field<span class=\\\"token punctuation\\\">.</span>Resolver <span class=\\\"token operator\\\">??</span> NameFieldResolver<span class=\\\"token punctuation\\\">.</span>Instance<span class=\\\"token punctuation\\\">;</span>\\n            field<span class=\\\"token punctuation\\\">.</span>Resolver <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">AsyncFieldResolver<span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token keyword\\\">object</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">async</span> context <span class=\\\"token operator\\\">=></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">object</span></span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> inner<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ResolveAsync</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token keyword\\\">return</span> result <span class=\\\"token keyword\\\">is</span> <span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">string</span></span> <span class=\\\"token return-type class-name\\\">str\\n                    <span class=\\\"token punctuation\\\">?</span></span> str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToUpperInvariant</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token punctuation\\\">:</span> result<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>And then register schema visitor within your schema just like you did to register the directive.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MySchema</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">Schema</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MySchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">RegisterVisitor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">UppercaseDirectiveVisitor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token comment\\\">// there are also registration methods that take the type, see below for details</span>\\n        <span class=\\\"token comment\\\">// RegisterVisitor(typeof(UppercaseDirectiveVisitor));</span>\\n        <span class=\\\"token comment\\\">// this.RegisterVisitor&lt;UppercaseDirectiveVisitor>(); // extension method</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Note that a schema visitor, unlike a directive, can be registered not only as an instance but also as\\na type. In this case, when initializing the schema, schema visitor will be created according to how\\nyou configure the DI container. In other words, schema visitors support dependency injection. The\\nlibrary resolves a schema visitor only once and caches it for the lifetime of the <code class=\\\"language-text\\\">Schema</code>. For more\\ninformation about lifetimes see <a href=\\\"dependency-injection#schema-service-lifetime\\\">Schema Service Lifetime</a>. </p>\\n<h1 id=\\\"is-it-mandatory-to-create-a-schema-visitor-in-addition-to-the-directive\\\"><a href=\\\"#is-it-mandatory-to-create-a-schema-visitor-in-addition-to-the-directive\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Is it mandatory to create a schema visitor in addition to the directive</h1>\\n<p>No. The applied directives (along with the directive definition itself) can exist without the corresponding\\nschema visitors. In this case, the directive is usually set to provide additional information to clients by\\nmeans of introspection. For example, consider such server-side <code class=\\\"language-text\\\">@author</code> directive:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AuthorDirective</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">Directive</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">AuthorDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"author\\\"</span><span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>FieldDefinition<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Provides information about the author of the field\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        Arguments <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Author's name\\\"</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n                Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"email\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n               Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Email where you can ask your question\\\"</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>In SDL this definition will look like the following:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">directive</span> <span class=\\\"token directive function\\\">@author</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token attr-name\\\">email</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">on</span> <span class=\\\"token constant\\\">FIELD_DEFINITION</span></code></pre>\\n      </div>\\n<p>Then the directive can be applied like this:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Query</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">ObjectGraphType</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">Query</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token generic-method\\\"><span class=\\\"token function\\\">Field</span><span class=\\\"token generic class-name\\\"><span class=\\\"token punctuation\\\">&lt;</span>Human<span class=\\\"token punctuation\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"human\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token named-parameter punctuation\\\">resolve</span><span class=\\\"token punctuation\\\">:</span> context <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">GetHuman</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ApplyDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"author\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"Tom Pumpkin\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"email\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"ztx0673@gmail.com\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>As you can see, the GraphQL server simply provides additional information that is available to clients through introspection.\\nThe GraphQL server does not assume any processing of it.</p>\\n<p>Another case is when the directive is not used by a corresponding schema visitor, but by another GraphQL.NET component, for\\nexample, a validation rule. Consider the <a href=\\\"#How-to-apply-a-directive\\\">@length</a> directive example above. The purpose of this\\ndirective for server is to validate inputs before executing a GraphQL request. The same can be said for a client - it wouldn't\\nmake sense to send a request with data not within the declared length limits. That is, of course, if client is ready to\\nrecognize a custom server-defined directive.</p>\\n<h1 id=\\\"can-a-schema-visitor-be-used-without-creatingregistering-a-directive\\\"><a href=\\\"#can-a-schema-visitor-be-used-without-creatingregistering-a-directive\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Can a schema visitor be used without creating/registering a directive</h1>\\n<p>Yes. Strictly speaking, schema visitors do not necessarily process directives. <code class=\\\"language-text\\\">ISchemaNodeVisitor</code> interface is a general\\nmeans of traversing a schema. You can traverse your schema at any time using the <code class=\\\"language-text\\\">Run</code> extension method. Just remember that\\nif your schema visitor modifies the schema, then you must ensure synchronization if you call <code class=\\\"language-text\\\">Run</code> method in parallel with\\nthe processing of incoming GraphQL requests to the schema.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> schema <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">MySchema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">var</span></span> visitor <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">MyVisitor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nvisitor<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Run</span><span class=\\\"token punctuation\\\">(</span>schema<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h1 id=\\\"directives-and-introspection\\\"><a href=\\\"#directives-and-introspection\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Directives and introspection</h1>\\n<p>Currently, the GraphQL specification allows introspection only of directives defined in the schema but does not allow\\nintrospection of so called <em>applied</em> directives.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__Schema</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">description</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">types</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__Type</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">queryType</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">mutationType</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span>\\n  <span class=\\\"token attr-name\\\">subscriptionType</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span>\\n  <span class=\\\"token attr-name\\\">directives</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__Directive</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>   &lt;----- <span class=\\\"token property\\\">only</span> <span class=\\\"token property\\\">defined</span> <span class=\\\"token property\\\">directives</span> <span class=\\\"token property\\\">here</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Since v4 Graph.NET provides the ability to apply directives to the schema elements and expose this user-defined\\nmeta-information via introspection. This is an experimental feature that is not in the official specification (yet).\\nTo enable it call <code class=\\\"language-text\\\">ISchema.EnableExperimentalIntrospectionFeatures()</code>. This method also makes it possible to\\nexpose directives' <code class=\\\"language-text\\\">isRepeatable</code> field via introspection (a feature from the GraphQL specification working draft).\\nNote that you can also set the <code class=\\\"language-text\\\">mode</code> parameter in this method which by default equals to <code class=\\\"language-text\\\">ExecutionOnly</code>.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token comment\\\">/// &lt;summary></span>\\n<span class=\\\"token comment\\\">/// A way to use experimental features.</span>\\n<span class=\\\"token comment\\\">/// &lt;/summary></span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">enum</span> <span class=\\\"token class-name\\\">ExperimentalIntrospectionFeaturesMode</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">/// &lt;summary></span>\\n    <span class=\\\"token comment\\\">/// Allow experimental features only for client queries but not for standard introspection</span>\\n    <span class=\\\"token comment\\\">/// request. This means that the client, in response to a standard introspection request,</span>\\n    <span class=\\\"token comment\\\">/// receives a standard response without any new fields and types. However, client CAN</span>\\n    <span class=\\\"token comment\\\">/// make requests to the server using the new fields and types. This mode is needed in order</span>\\n    <span class=\\\"token comment\\\">/// to bypass the problem of tools such as GraphQL Playground, Voyager, GraphiQL that require</span>\\n    <span class=\\\"token comment\\\">/// a standard response to an introspection request and refuse to work correctly if there are</span>\\n    <span class=\\\"token comment\\\">/// any unknown fields or types in the response.</span>\\n    <span class=\\\"token comment\\\">/// &lt;/summary></span>\\n    ExecutionOnly<span class=\\\"token punctuation\\\">,</span>\\n\\n    <span class=\\\"token comment\\\">/// &lt;summary></span>\\n    <span class=\\\"token comment\\\">/// Allow experimental features for both standard introspection query and client queries.</span>\\n    <span class=\\\"token comment\\\">/// This means that the client, in response to a standard introspection request, receives</span>\\n    <span class=\\\"token comment\\\">/// a response augmented with the new fields and types. Client can make requests to the</span>\\n    <span class=\\\"token comment\\\">/// server using the new fields and types.</span>\\n    <span class=\\\"token comment\\\">/// &lt;/summary></span>\\n    IntrospectionAndExecution\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Introspection schema after enabling experimental features (new types and fields are highlighted).</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"graphql\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__Schema</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">description</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">types</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__Type</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">queryType</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">mutationType</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span>\\n  <span class=\\\"token attr-name\\\">subscriptionType</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span>\\n  <span class=\\\"token attr-name\\\">directives</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__Directive</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">appliedDirectives</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__AppliedDirective</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>   &lt;----- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">FIELD</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__Type</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">kind</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__TypeKind</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">description</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">fields</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">includeDeprecated</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">Boolean</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__Field</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token attr-name\\\">interfaces</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__Type</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token attr-name\\\">possibleTypes</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__Type</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token attr-name\\\">enumValues</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">includeDeprecated</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">Boolean</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__EnumValue</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token attr-name\\\">inputFields</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__InputValue</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token attr-name\\\">ofType</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span>\\n  <span class=\\\"token attr-name\\\">appliedDirectives</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__AppliedDirective</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>   &lt;----- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">FIELD</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__Field</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">description</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">args</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__InputValue</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">type</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">isDeprecated</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">Boolean</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">deprecationReason</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">appliedDirectives</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__AppliedDirective</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>   &lt;----- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">FIELD</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__InputValue</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">description</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">type</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">__Type</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">defaultValue</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">appliedDirectives</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__AppliedDirective</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>   &lt;----- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">FIELD</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__EnumValue</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">description</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">isDeprecated</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">Boolean</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">deprecationReason</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">appliedDirectives</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__AppliedDirective</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>   &lt;----- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">FIELD</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">enum</span> <span class=\\\"token class-name\\\">__TypeKind</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token constant\\\">SCALAR</span>\\n  <span class=\\\"token constant\\\">OBJECT</span>\\n  <span class=\\\"token constant\\\">INTERFACE</span>\\n  <span class=\\\"token constant\\\">UNION</span>\\n  <span class=\\\"token constant\\\">ENUM</span>\\n  <span class=\\\"token constant\\\">INPUT_OBJECT</span>\\n  <span class=\\\"token constant\\\">LIST</span>\\n  <span class=\\\"token constant\\\">NON_NULL</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__Directive</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">description</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span>\\n  <span class=\\\"token attr-name\\\">locations</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__DirectiveLocation</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">args</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__InputValue</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">isRepeatable</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">Boolean</span><span class=\\\"token operator\\\">!</span>                      &lt;----- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">FIELD</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">FROM</span> <span class=\\\"token constant\\\">THE</span> <span class=\\\"token constant\\\">WORKING</span> <span class=\\\"token constant\\\">DRAFT</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token attr-name\\\">appliedDirectives</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__AppliedDirective</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>   &lt;----- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">FIELD</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">enum</span> <span class=\\\"token class-name\\\">__DirectiveLocation</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token constant\\\">QUERY</span>\\n  <span class=\\\"token constant\\\">MUTATION</span>\\n  <span class=\\\"token constant\\\">SUBSCRIPTION</span>\\n  <span class=\\\"token constant\\\">FIELD</span>\\n  <span class=\\\"token constant\\\">FRAGMENT_DEFINITION</span>\\n  <span class=\\\"token constant\\\">FRAGMENT_SPREAD</span>\\n  <span class=\\\"token constant\\\">INLINE_FRAGMENT</span>\\n  <span class=\\\"token constant\\\">SCHEMA</span>\\n  <span class=\\\"token constant\\\">SCALAR</span>\\n  <span class=\\\"token constant\\\">OBJECT</span>\\n  <span class=\\\"token constant\\\">FIELD_DEFINITION</span>\\n  <span class=\\\"token constant\\\">ARGUMENT_DEFINITION</span>\\n  <span class=\\\"token constant\\\">INTERFACE</span>\\n  <span class=\\\"token constant\\\">UNION</span>\\n  <span class=\\\"token constant\\\">ENUM</span>\\n  <span class=\\\"token constant\\\">ENUM_VALUE</span>\\n  <span class=\\\"token constant\\\">INPUT_OBJECT</span>\\n  <span class=\\\"token constant\\\">INPUT_FIELD_DEFINITION</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__AppliedDirective</span> <span class=\\\"token punctuation\\\">{</span>                     &lt;--- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">INTROSPECTION</span> <span class=\\\"token constant\\\">TYPE</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">args</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token class-name\\\">__DirectiveArgument</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">!</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">__DirectiveArgument</span> <span class=\\\"token punctuation\\\">{</span>                    &lt;--- <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token constant\\\">INTROSPECTION</span> <span class=\\\"token constant\\\">TYPE</span>\\n  <span class=\\\"token attr-name\\\">name</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token attr-name\\\">value</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token scalar\\\">String</span><span class=\\\"token operator\\\">!</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>To make your defined directive and all its applications to the schema elements available through\\nintrospection, override the <code class=\\\"language-text\\\">Introspectable</code> property of your directive.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyDirective</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">Directive</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">MyDirective</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"my\\\"</span><span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>Field<span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>FragmentSpread<span class=\\\"token punctuation\\\">,</span> DirectiveLocation<span class=\\\"token punctuation\\\">.</span>InlineFragment<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"My super directive\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        Arguments <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArguments</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token constructor-invocation class-name\\\">QueryArgument<span class=\\\"token punctuation\\\">&lt;</span>NonNullGraphType<span class=\\\"token punctuation\\\">&lt;</span>StringGraphType<span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"secret\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            Description <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Some secret\\\"</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">bool</span><span class=\\\"token punctuation\\\">?</span></span> Introspectable <span class=\\\"token operator\\\">=></span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>If you do not explicitly set this property (either to <code class=\\\"language-text\\\">true</code> or <code class=\\\"language-text\\\">false</code>) then by default your\\ndirective definition along with all applications of this directive to the schema elements will\\nbe present in the introspection response if and only if directive definition has all its locations\\nof type <a href=\\\"https://spec.graphql.org/October2021/#ExecutableDirectiveLocation\\\"><code class=\\\"language-text\\\">ExecutableDirectiveLocation</code></a>\\n(so called client-side directive).</p>\\n<h1 id=\\\"directive-vs-field-middleware\\\"><a href=\\\"#directive-vs-field-middleware\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Directive vs Field Middleware</h1>\\n<p>You can think of a Field Middleware as something global that controls how all fields of all types\\nin the schema are resolved. A directive, at the same time, would only affect specific schema elements\\nand only those elements. Moreover, a directive is not limited to field resolvers like middleware is.\\nFor more information about field middlewares see <a href=\\\"https://graphql-dotnet.github.io/docs/getting-started/field-middleware\\\">Field Middleware</a>.</p>\\n<h1 id=\\\"existing-implementations\\\"><a href=\\\"#existing-implementations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Existing implementations</h1>\\n<p>There has long been a need in the community for a specification to describe the possibility of\\ngetting <em>applied</em> directives through introspection. An example is <a href=\\\"https://github.com/graphql/graphql-spec/issues/300\\\">issue-300</a>\\n(almost 4 years old at the time of this writing). Obviously, some projects couldn't wait any\\nlonger and somehow added <em>applied</em> directive support on their own. One such project is this one - GraphQL.NET.\\nThe <a href=\\\"https://github.com/graphql-java/graphql-java\\\">graphql-java</a> project followed a <a href=\\\"https://github.com/graphql-java/graphql-java/pull/2221\\\">similar</a>\\npath. Perhaps there are others, the page will be updated.</p>\\n<p>We hope that this consistency helps the GraphQL world in the absence of a proper GraphQL specification\\nmechanism for getting <em>applied</em> directives through introspection. If other projects on other platforms/languages\\nsupport <em>applied</em> directives in this form, it will become a de facto standard and speed up the specification process.</p>\",\"fields\":{\"relativePath\":\"docs/getting-started/directives.md\"}},\"site\":{\"siteMetadata\":{\"githubEditUrl\":\"https://github.com/graphql-dotnet/graphql-dotnet/edit/master/docs2/site\"}}},\"pathContext\":{\"relativePath\":\"docs/getting-started/directives.md\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-getting-started-directives.json\n// module id = 315\n// module chunks = 244442750240678"],"sourceRoot":""}